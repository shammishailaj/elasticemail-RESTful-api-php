<?php
/**
 * ReportsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reportsBouncedGet
     *
     * Returns bounced logs filtered by specified parameters.
     *
     * @param  string[] $message_categories  (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Log
     */
    public function reportsBouncedGet($message_categories, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        list($response) = $this->reportsBouncedGetWithHttpInfo($message_categories, $from, $to, $channel_name, $limit, $offset, $include_email, $include_sms, $email, $ipaddress);
        return $response;
    }

    /**
     * Operation reportsBouncedGetWithHttpInfo
     *
     * Returns bounced logs filtered by specified parameters.
     *
     * @param  string[] $message_categories  (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Log, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsBouncedGetWithHttpInfo($message_categories, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        $returnType = '\Swagger\Client\Model\Log';
        $request = $this->reportsBouncedGetRequest($message_categories, $from, $to, $channel_name, $limit, $offset, $include_email, $include_sms, $email, $ipaddress);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Log',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsBouncedGetAsync
     *
     * Returns bounced logs filtered by specified parameters.
     *
     * @param  string[] $message_categories  (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsBouncedGetAsync($message_categories, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        return $this->reportsBouncedGetAsyncWithHttpInfo($message_categories, $from, $to, $channel_name, $limit, $offset, $include_email, $include_sms, $email, $ipaddress)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsBouncedGetAsyncWithHttpInfo
     *
     * Returns bounced logs filtered by specified parameters.
     *
     * @param  string[] $message_categories  (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsBouncedGetAsyncWithHttpInfo($message_categories, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        $returnType = '\Swagger\Client\Model\Log';
        $request = $this->reportsBouncedGetRequest($message_categories, $from, $to, $channel_name, $limit, $offset, $include_email, $include_sms, $email, $ipaddress);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsBouncedGet'
     *
     * @param  string[] $message_categories  (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsBouncedGetRequest($message_categories, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        // verify the required parameter 'message_categories' is set
        if ($message_categories === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_categories when calling reportsBouncedGet'
            );
        }

        $resourcePath = '/reports/bounced';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($message_categories)) {
            $message_categories = ObjectSerializer::serializeCollection($message_categories, 'csv', true);
        }
        if ($message_categories !== null) {
            $queryParams['messageCategories'] = ObjectSerializer::toQueryValue($message_categories);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($channel_name !== null) {
            $queryParams['channelName'] = ObjectSerializer::toQueryValue($channel_name);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($include_email !== null) {
            $queryParams['includeEmail'] = ObjectSerializer::toQueryValue($include_email);
        }
        // query params
        if ($include_sms !== null) {
            $queryParams['includeSms'] = ObjectSerializer::toQueryValue($include_sms);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($ipaddress !== null) {
            $queryParams['ipaddress'] = ObjectSerializer::toQueryValue($ipaddress);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsEmailcreditsHistoryGet
     *
     * Lists email credits history
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EmailCredits[]
     */
    public function reportsEmailcreditsHistoryGet()
    {
        list($response) = $this->reportsEmailcreditsHistoryGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation reportsEmailcreditsHistoryGetWithHttpInfo
     *
     * Lists email credits history
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EmailCredits[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsEmailcreditsHistoryGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\EmailCredits[]';
        $request = $this->reportsEmailcreditsHistoryGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EmailCredits[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsEmailcreditsHistoryGetAsync
     *
     * Lists email credits history
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmailcreditsHistoryGetAsync()
    {
        return $this->reportsEmailcreditsHistoryGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsEmailcreditsHistoryGetAsyncWithHttpInfo
     *
     * Lists email credits history
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEmailcreditsHistoryGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\EmailCredits[]';
        $request = $this->reportsEmailcreditsHistoryGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsEmailcreditsHistoryGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsEmailcreditsHistoryGetRequest()
    {

        $resourcePath = '/reports/emailcredits/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsEventlogGet
     *
     * Returns log of delivery events filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EventLog
     */
    public function reportsEventlogGet($statuses = null, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0')
    {
        list($response) = $this->reportsEventlogGetWithHttpInfo($statuses, $from, $to, $channel_name, $limit, $offset);
        return $response;
    }

    /**
     * Operation reportsEventlogGetWithHttpInfo
     *
     * Returns log of delivery events filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EventLog, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsEventlogGetWithHttpInfo($statuses = null, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\EventLog';
        $request = $this->reportsEventlogGetRequest($statuses, $from, $to, $channel_name, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EventLog',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsEventlogGetAsync
     *
     * Returns log of delivery events filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEventlogGetAsync($statuses = null, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0')
    {
        return $this->reportsEventlogGetAsyncWithHttpInfo($statuses, $from, $to, $channel_name, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsEventlogGetAsyncWithHttpInfo
     *
     * Returns log of delivery events filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEventlogGetAsyncWithHttpInfo($statuses = null, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\EventLog';
        $request = $this->reportsEventlogGetRequest($statuses, $from, $to, $channel_name, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsEventlogGet'
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsEventlogGetRequest($statuses = null, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0')
    {

        $resourcePath = '/reports/eventlog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($statuses)) {
            $statuses = ObjectSerializer::serializeCollection($statuses, 'csv', true);
        }
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($channel_name !== null) {
            $queryParams['channelName'] = ObjectSerializer::toQueryValue($channel_name);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsEventsExportGet
     *
     * Export delivery events log information to the specified file format.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ExportLink
     */
    public function reportsEventsExportGet($statuses = null, $from = null, $to = null, $channel_name = null, $file_format = 'Csv', $compression_format = 'None', $file_name = null)
    {
        list($response) = $this->reportsEventsExportGetWithHttpInfo($statuses, $from, $to, $channel_name, $file_format, $compression_format, $file_name);
        return $response;
    }

    /**
     * Operation reportsEventsExportGetWithHttpInfo
     *
     * Export delivery events log information to the specified file format.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ExportLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsEventsExportGetWithHttpInfo($statuses = null, $from = null, $to = null, $channel_name = null, $file_format = 'Csv', $compression_format = 'None', $file_name = null)
    {
        $returnType = '\Swagger\Client\Model\ExportLink';
        $request = $this->reportsEventsExportGetRequest($statuses, $from, $to, $channel_name, $file_format, $compression_format, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExportLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsEventsExportGetAsync
     *
     * Export delivery events log information to the specified file format.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEventsExportGetAsync($statuses = null, $from = null, $to = null, $channel_name = null, $file_format = 'Csv', $compression_format = 'None', $file_name = null)
    {
        return $this->reportsEventsExportGetAsyncWithHttpInfo($statuses, $from, $to, $channel_name, $file_format, $compression_format, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsEventsExportGetAsyncWithHttpInfo
     *
     * Export delivery events log information to the specified file format.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsEventsExportGetAsyncWithHttpInfo($statuses = null, $from = null, $to = null, $channel_name = null, $file_format = 'Csv', $compression_format = 'None', $file_name = null)
    {
        $returnType = '\Swagger\Client\Model\ExportLink';
        $request = $this->reportsEventsExportGetRequest($statuses, $from, $to, $channel_name, $file_format, $compression_format, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsEventsExportGet'
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (optional)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsEventsExportGetRequest($statuses = null, $from = null, $to = null, $channel_name = null, $file_format = 'Csv', $compression_format = 'None', $file_name = null)
    {

        $resourcePath = '/reports/events/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($statuses)) {
            $statuses = ObjectSerializer::serializeCollection($statuses, 'csv', true);
        }
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($channel_name !== null) {
            $queryParams['channelName'] = ObjectSerializer::toQueryValue($channel_name);
        }
        // query params
        if ($file_format !== null) {
            $queryParams['fileFormat'] = ObjectSerializer::toQueryValue($file_format);
        }
        // query params
        if ($compression_format !== null) {
            $queryParams['compressionFormat'] = ObjectSerializer::toQueryValue($compression_format);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = ObjectSerializer::toQueryValue($file_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsExportGet
     *
     * Export email log information to the specified file format.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $from Start date. (optional)
     * @param  string $to End date. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string[] $message_category ID of message category (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string $email Proper email address. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ExportLink
     */
    public function reportsExportGet($statuses, $file_format = 'Csv', $from = null, $to = null, $channel_name = null, $include_email = 'True', $include_sms = 'True', $message_category = null, $compression_format = 'None', $file_name = null, $email = null)
    {
        list($response) = $this->reportsExportGetWithHttpInfo($statuses, $file_format, $from, $to, $channel_name, $include_email, $include_sms, $message_category, $compression_format, $file_name, $email);
        return $response;
    }

    /**
     * Operation reportsExportGetWithHttpInfo
     *
     * Export email log information to the specified file format.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $from Start date. (optional)
     * @param  string $to End date. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string[] $message_category ID of message category (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string $email Proper email address. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ExportLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsExportGetWithHttpInfo($statuses, $file_format = 'Csv', $from = null, $to = null, $channel_name = null, $include_email = 'True', $include_sms = 'True', $message_category = null, $compression_format = 'None', $file_name = null, $email = null)
    {
        $returnType = '\Swagger\Client\Model\ExportLink';
        $request = $this->reportsExportGetRequest($statuses, $file_format, $from, $to, $channel_name, $include_email, $include_sms, $message_category, $compression_format, $file_name, $email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExportLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsExportGetAsync
     *
     * Export email log information to the specified file format.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $from Start date. (optional)
     * @param  string $to End date. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string[] $message_category ID of message category (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string $email Proper email address. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsExportGetAsync($statuses, $file_format = 'Csv', $from = null, $to = null, $channel_name = null, $include_email = 'True', $include_sms = 'True', $message_category = null, $compression_format = 'None', $file_name = null, $email = null)
    {
        return $this->reportsExportGetAsyncWithHttpInfo($statuses, $file_format, $from, $to, $channel_name, $include_email, $include_sms, $message_category, $compression_format, $file_name, $email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsExportGetAsyncWithHttpInfo
     *
     * Export email log information to the specified file format.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $from Start date. (optional)
     * @param  string $to End date. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string[] $message_category ID of message category (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string $email Proper email address. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsExportGetAsyncWithHttpInfo($statuses, $file_format = 'Csv', $from = null, $to = null, $channel_name = null, $include_email = 'True', $include_sms = 'True', $message_category = null, $compression_format = 'None', $file_name = null, $email = null)
    {
        $returnType = '\Swagger\Client\Model\ExportLink';
        $request = $this->reportsExportGetRequest($statuses, $file_format, $from, $to, $channel_name, $include_email, $include_sms, $message_category, $compression_format, $file_name, $email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsExportGet'
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $from Start date. (optional)
     * @param  string $to End date. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string[] $message_category ID of message category (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string $email Proper email address. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsExportGetRequest($statuses, $file_format = 'Csv', $from = null, $to = null, $channel_name = null, $include_email = 'True', $include_sms = 'True', $message_category = null, $compression_format = 'None', $file_name = null, $email = null)
    {
        // verify the required parameter 'statuses' is set
        if ($statuses === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statuses when calling reportsExportGet'
            );
        }

        $resourcePath = '/reports/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($statuses)) {
            $statuses = ObjectSerializer::serializeCollection($statuses, 'csv', true);
        }
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }
        // query params
        if ($file_format !== null) {
            $queryParams['fileFormat'] = ObjectSerializer::toQueryValue($file_format);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($channel_name !== null) {
            $queryParams['channelName'] = ObjectSerializer::toQueryValue($channel_name);
        }
        // query params
        if ($include_email !== null) {
            $queryParams['includeEmail'] = ObjectSerializer::toQueryValue($include_email);
        }
        // query params
        if ($include_sms !== null) {
            $queryParams['includeSms'] = ObjectSerializer::toQueryValue($include_sms);
        }
        // query params
        if (is_array($message_category)) {
            $message_category = ObjectSerializer::serializeCollection($message_category, 'csv', true);
        }
        if ($message_category !== null) {
            $queryParams['messageCategory'] = ObjectSerializer::toQueryValue($message_category);
        }
        // query params
        if ($compression_format !== null) {
            $queryParams['compressionFormat'] = ObjectSerializer::toQueryValue($compression_format);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = ObjectSerializer::toQueryValue($file_name);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsGet
     *
     * Returns logs filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Log
     */
    public function reportsGet($statuses, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        list($response) = $this->reportsGetWithHttpInfo($statuses, $from, $to, $channel_name, $limit, $offset, $include_email, $include_sms, $email, $ipaddress);
        return $response;
    }

    /**
     * Operation reportsGetWithHttpInfo
     *
     * Returns logs filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Log, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsGetWithHttpInfo($statuses, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        $returnType = '\Swagger\Client\Model\Log';
        $request = $this->reportsGetRequest($statuses, $from, $to, $channel_name, $limit, $offset, $include_email, $include_sms, $email, $ipaddress);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Log',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsGetAsync
     *
     * Returns logs filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetAsync($statuses, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        return $this->reportsGetAsyncWithHttpInfo($statuses, $from, $to, $channel_name, $limit, $offset, $include_email, $include_sms, $email, $ipaddress)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsGetAsyncWithHttpInfo
     *
     * Returns logs filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsGetAsyncWithHttpInfo($statuses, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        $returnType = '\Swagger\Client\Model\Log';
        $request = $this->reportsGetRequest($statuses, $from, $to, $channel_name, $limit, $offset, $include_email, $include_sms, $email, $ipaddress);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsGet'
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  bool $include_email True: Search includes emails. Otherwise, false. (optional, default to True)
     * @param  bool $include_sms True: Search includes SMS. Otherwise, false. (optional, default to True)
     * @param  string $email Proper email address. (optional)
     * @param  string $ipaddress Search for recipients that we sent through this IP address (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsGetRequest($statuses, $from = null, $to = null, $channel_name = null, $limit = '0', $offset = '0', $include_email = 'True', $include_sms = 'True', $email = null, $ipaddress = null)
    {
        // verify the required parameter 'statuses' is set
        if ($statuses === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statuses when calling reportsGet'
            );
        }

        $resourcePath = '/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($statuses)) {
            $statuses = ObjectSerializer::serializeCollection($statuses, 'csv', true);
        }
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($channel_name !== null) {
            $queryParams['channelName'] = ObjectSerializer::toQueryValue($channel_name);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($include_email !== null) {
            $queryParams['includeEmail'] = ObjectSerializer::toQueryValue($include_email);
        }
        // query params
        if ($include_sms !== null) {
            $queryParams['includeSms'] = ObjectSerializer::toQueryValue($include_sms);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email);
        }
        // query params
        if ($ipaddress !== null) {
            $queryParams['ipaddress'] = ObjectSerializer::toQueryValue($ipaddress);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsLinktrackingsExportGet
     *
     * Export detailed link tracking information to the specified file format.
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ExportLink
     */
    public function reportsLinktrackingsExportGet($from, $to, $channel_name = null, $file_format = 'Csv', $limit = '0', $offset = '0', $compression_format = 'None', $file_name = null)
    {
        list($response) = $this->reportsLinktrackingsExportGetWithHttpInfo($from, $to, $channel_name, $file_format, $limit, $offset, $compression_format, $file_name);
        return $response;
    }

    /**
     * Operation reportsLinktrackingsExportGetWithHttpInfo
     *
     * Export detailed link tracking information to the specified file format.
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ExportLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsLinktrackingsExportGetWithHttpInfo($from, $to, $channel_name = null, $file_format = 'Csv', $limit = '0', $offset = '0', $compression_format = 'None', $file_name = null)
    {
        $returnType = '\Swagger\Client\Model\ExportLink';
        $request = $this->reportsLinktrackingsExportGetRequest($from, $to, $channel_name, $file_format, $limit, $offset, $compression_format, $file_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExportLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsLinktrackingsExportGetAsync
     *
     * Export detailed link tracking information to the specified file format.
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsLinktrackingsExportGetAsync($from, $to, $channel_name = null, $file_format = 'Csv', $limit = '0', $offset = '0', $compression_format = 'None', $file_name = null)
    {
        return $this->reportsLinktrackingsExportGetAsyncWithHttpInfo($from, $to, $channel_name, $file_format, $limit, $offset, $compression_format, $file_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsLinktrackingsExportGetAsyncWithHttpInfo
     *
     * Export detailed link tracking information to the specified file format.
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsLinktrackingsExportGetAsyncWithHttpInfo($from, $to, $channel_name = null, $file_format = 'Csv', $limit = '0', $offset = '0', $compression_format = 'None', $file_name = null)
    {
        $returnType = '\Swagger\Client\Model\ExportLink';
        $request = $this->reportsLinktrackingsExportGetRequest($from, $to, $channel_name, $file_format, $limit, $offset, $compression_format, $file_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsLinktrackingsExportGet'
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsLinktrackingsExportGetRequest($from, $to, $channel_name = null, $file_format = 'Csv', $limit = '0', $offset = '0', $compression_format = 'None', $file_name = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling reportsLinktrackingsExportGet'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling reportsLinktrackingsExportGet'
            );
        }

        $resourcePath = '/reports/linktrackings/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($channel_name !== null) {
            $queryParams['channelName'] = ObjectSerializer::toQueryValue($channel_name);
        }
        // query params
        if ($file_format !== null) {
            $queryParams['fileFormat'] = ObjectSerializer::toQueryValue($file_format);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($compression_format !== null) {
            $queryParams['compressionFormat'] = ObjectSerializer::toQueryValue($compression_format);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = ObjectSerializer::toQueryValue($file_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsNotificationsGet
     *
     * Returns notification logs filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $notification_type  (optional, default to All)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Log
     */
    public function reportsNotificationsGet($statuses, $from = null, $to = null, $limit = '0', $offset = '0', $notification_type = 'All')
    {
        list($response) = $this->reportsNotificationsGetWithHttpInfo($statuses, $from, $to, $limit, $offset, $notification_type);
        return $response;
    }

    /**
     * Operation reportsNotificationsGetWithHttpInfo
     *
     * Returns notification logs filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $notification_type  (optional, default to All)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Log, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsNotificationsGetWithHttpInfo($statuses, $from = null, $to = null, $limit = '0', $offset = '0', $notification_type = 'All')
    {
        $returnType = '\Swagger\Client\Model\Log';
        $request = $this->reportsNotificationsGetRequest($statuses, $from, $to, $limit, $offset, $notification_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Log',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsNotificationsGetAsync
     *
     * Returns notification logs filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $notification_type  (optional, default to All)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsNotificationsGetAsync($statuses, $from = null, $to = null, $limit = '0', $offset = '0', $notification_type = 'All')
    {
        return $this->reportsNotificationsGetAsyncWithHttpInfo($statuses, $from, $to, $limit, $offset, $notification_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsNotificationsGetAsyncWithHttpInfo
     *
     * Returns notification logs filtered by specified parameters.
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $notification_type  (optional, default to All)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsNotificationsGetAsyncWithHttpInfo($statuses, $from = null, $to = null, $limit = '0', $offset = '0', $notification_type = 'All')
    {
        $returnType = '\Swagger\Client\Model\Log';
        $request = $this->reportsNotificationsGetRequest($statuses, $from, $to, $limit, $offset, $notification_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsNotificationsGet'
     *
     * @param  string[] $statuses List of comma separated message statuses: 0 for all, 1 for ReadyToSend, 2 for InProgress, 4 for Bounced, 5 for Sent, 6 for Opened, 7 for Clicked, 8 for Unsubscribed, 9 for Abuse Report (required)
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     * @param  string $notification_type  (optional, default to All)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsNotificationsGetRequest($statuses, $from = null, $to = null, $limit = '0', $offset = '0', $notification_type = 'All')
    {
        // verify the required parameter 'statuses' is set
        if ($statuses === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statuses when calling reportsNotificationsGet'
            );
        }

        $resourcePath = '/reports/notifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($statuses)) {
            $statuses = ObjectSerializer::serializeCollection($statuses, 'csv', true);
        }
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($notification_type !== null) {
            $queryParams['notificationType'] = ObjectSerializer::toQueryValue($notification_type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsPaymentsHistoryGet
     *
     * Lists all payments
     *
     * @param  int $limit Maximum of loaded items. (required)
     * @param  int $offset How many items should be loaded ahead. (required)
     * @param  string $from_date Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to_date Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Payment[]
     */
    public function reportsPaymentsHistoryGet($limit, $offset, $from_date, $to_date)
    {
        list($response) = $this->reportsPaymentsHistoryGetWithHttpInfo($limit, $offset, $from_date, $to_date);
        return $response;
    }

    /**
     * Operation reportsPaymentsHistoryGetWithHttpInfo
     *
     * Lists all payments
     *
     * @param  int $limit Maximum of loaded items. (required)
     * @param  int $offset How many items should be loaded ahead. (required)
     * @param  string $from_date Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to_date Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsPaymentsHistoryGetWithHttpInfo($limit, $offset, $from_date, $to_date)
    {
        $returnType = '\Swagger\Client\Model\Payment[]';
        $request = $this->reportsPaymentsHistoryGetRequest($limit, $offset, $from_date, $to_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsPaymentsHistoryGetAsync
     *
     * Lists all payments
     *
     * @param  int $limit Maximum of loaded items. (required)
     * @param  int $offset How many items should be loaded ahead. (required)
     * @param  string $from_date Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to_date Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsPaymentsHistoryGetAsync($limit, $offset, $from_date, $to_date)
    {
        return $this->reportsPaymentsHistoryGetAsyncWithHttpInfo($limit, $offset, $from_date, $to_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsPaymentsHistoryGetAsyncWithHttpInfo
     *
     * Lists all payments
     *
     * @param  int $limit Maximum of loaded items. (required)
     * @param  int $offset How many items should be loaded ahead. (required)
     * @param  string $from_date Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to_date Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsPaymentsHistoryGetAsyncWithHttpInfo($limit, $offset, $from_date, $to_date)
    {
        $returnType = '\Swagger\Client\Model\Payment[]';
        $request = $this->reportsPaymentsHistoryGetRequest($limit, $offset, $from_date, $to_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsPaymentsHistoryGet'
     *
     * @param  int $limit Maximum of loaded items. (required)
     * @param  int $offset How many items should be loaded ahead. (required)
     * @param  string $from_date Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to_date Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsPaymentsHistoryGetRequest($limit, $offset, $from_date, $to_date)
    {
        // verify the required parameter 'limit' is set
        if ($limit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling reportsPaymentsHistoryGet'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling reportsPaymentsHistoryGet'
            );
        }
        // verify the required parameter 'from_date' is set
        if ($from_date === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling reportsPaymentsHistoryGet'
            );
        }
        // verify the required parameter 'to_date' is set
        if ($to_date === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling reportsPaymentsHistoryGet'
            );
        }

        $resourcePath = '/reports/payments/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsReferralsGet
     *
     * Shows information about your referral details
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Referral
     */
    public function reportsReferralsGet()
    {
        list($response) = $this->reportsReferralsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation reportsReferralsGetWithHttpInfo
     *
     * Shows information about your referral details
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Referral, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsReferralsGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Referral';
        $request = $this->reportsReferralsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Referral',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsReferralsGetAsync
     *
     * Shows information about your referral details
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsReferralsGetAsync()
    {
        return $this->reportsReferralsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsReferralsGetAsyncWithHttpInfo
     *
     * Shows information about your referral details
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsReferralsGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Referral';
        $request = $this->reportsReferralsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsReferralsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsReferralsGetRequest()
    {

        $resourcePath = '/reports/referrals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsReferralsPayoutHistoryGet
     *
     * Lists all referral payout history
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Payment[]
     */
    public function reportsReferralsPayoutHistoryGet()
    {
        list($response) = $this->reportsReferralsPayoutHistoryGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation reportsReferralsPayoutHistoryGetWithHttpInfo
     *
     * Lists all referral payout history
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsReferralsPayoutHistoryGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Payment[]';
        $request = $this->reportsReferralsPayoutHistoryGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsReferralsPayoutHistoryGetAsync
     *
     * Lists all referral payout history
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsReferralsPayoutHistoryGetAsync()
    {
        return $this->reportsReferralsPayoutHistoryGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsReferralsPayoutHistoryGetAsyncWithHttpInfo
     *
     * Lists all referral payout history
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsReferralsPayoutHistoryGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Payment[]';
        $request = $this->reportsReferralsPayoutHistoryGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsReferralsPayoutHistoryGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsReferralsPayoutHistoryGetRequest()
    {

        $resourcePath = '/reports/referrals/payout/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsReputationHistoryGet
     *
     * Shows latest changes in your sending reputation
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ReputationHistory[]
     */
    public function reportsReputationHistoryGet($limit = '20', $offset = '0')
    {
        list($response) = $this->reportsReputationHistoryGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation reportsReputationHistoryGetWithHttpInfo
     *
     * Shows latest changes in your sending reputation
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ReputationHistory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsReputationHistoryGetWithHttpInfo($limit = '20', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ReputationHistory[]';
        $request = $this->reportsReputationHistoryGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ReputationHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsReputationHistoryGetAsync
     *
     * Shows latest changes in your sending reputation
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsReputationHistoryGetAsync($limit = '20', $offset = '0')
    {
        return $this->reportsReputationHistoryGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsReputationHistoryGetAsyncWithHttpInfo
     *
     * Shows latest changes in your sending reputation
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsReputationHistoryGetAsyncWithHttpInfo($limit = '20', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ReputationHistory[]';
        $request = $this->reportsReputationHistoryGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsReputationHistoryGet'
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsReputationHistoryGetRequest($limit = '20', $offset = '0')
    {

        $resourcePath = '/reports/reputation/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsSpamchecksHistoryGet
     *
     * Returns detailed spam check.
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SpamCheck[]
     */
    public function reportsSpamchecksHistoryGet($limit = '20', $offset = '0')
    {
        list($response) = $this->reportsSpamchecksHistoryGetWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation reportsSpamchecksHistoryGetWithHttpInfo
     *
     * Returns detailed spam check.
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SpamCheck[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSpamchecksHistoryGetWithHttpInfo($limit = '20', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\SpamCheck[]';
        $request = $this->reportsSpamchecksHistoryGetRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SpamCheck[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsSpamchecksHistoryGetAsync
     *
     * Returns detailed spam check.
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsSpamchecksHistoryGetAsync($limit = '20', $offset = '0')
    {
        return $this->reportsSpamchecksHistoryGetAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsSpamchecksHistoryGetAsyncWithHttpInfo
     *
     * Returns detailed spam check.
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsSpamchecksHistoryGetAsyncWithHttpInfo($limit = '20', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\SpamCheck[]';
        $request = $this->reportsSpamchecksHistoryGetRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsSpamchecksHistoryGet'
     *
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsSpamchecksHistoryGetRequest($limit = '20', $offset = '0')
    {

        $resourcePath = '/reports/spamchecks/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsSummaryGet
     *
     * Loads summary information about activity in chosen date range.
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $interval &#39;Hourly&#39; for detailed information, &#39;summary&#39; for daily overview (optional, default to Summary)
     * @param  string $transaction_id ID number of transaction (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LogSummary
     */
    public function reportsSummaryGet($from, $to, $channel_name = null, $interval = 'Summary', $transaction_id = null)
    {
        list($response) = $this->reportsSummaryGetWithHttpInfo($from, $to, $channel_name, $interval, $transaction_id);
        return $response;
    }

    /**
     * Operation reportsSummaryGetWithHttpInfo
     *
     * Loads summary information about activity in chosen date range.
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $interval &#39;Hourly&#39; for detailed information, &#39;summary&#39; for daily overview (optional, default to Summary)
     * @param  string $transaction_id ID number of transaction (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LogSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsSummaryGetWithHttpInfo($from, $to, $channel_name = null, $interval = 'Summary', $transaction_id = null)
    {
        $returnType = '\Swagger\Client\Model\LogSummary';
        $request = $this->reportsSummaryGetRequest($from, $to, $channel_name, $interval, $transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LogSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsSummaryGetAsync
     *
     * Loads summary information about activity in chosen date range.
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $interval &#39;Hourly&#39; for detailed information, &#39;summary&#39; for daily overview (optional, default to Summary)
     * @param  string $transaction_id ID number of transaction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsSummaryGetAsync($from, $to, $channel_name = null, $interval = 'Summary', $transaction_id = null)
    {
        return $this->reportsSummaryGetAsyncWithHttpInfo($from, $to, $channel_name, $interval, $transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsSummaryGetAsyncWithHttpInfo
     *
     * Loads summary information about activity in chosen date range.
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $interval &#39;Hourly&#39; for detailed information, &#39;summary&#39; for daily overview (optional, default to Summary)
     * @param  string $transaction_id ID number of transaction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsSummaryGetAsyncWithHttpInfo($from, $to, $channel_name = null, $interval = 'Summary', $transaction_id = null)
    {
        $returnType = '\Swagger\Client\Model\LogSummary';
        $request = $this->reportsSummaryGetRequest($from, $to, $channel_name, $interval, $transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsSummaryGet'
     *
     * @param  string $from Starting date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $to Ending date for search in YYYY-MM-DDThh:mm:ss format. (required)
     * @param  string $channel_name Name of selected channel. (optional)
     * @param  string $interval &#39;Hourly&#39; for detailed information, &#39;summary&#39; for daily overview (optional, default to Summary)
     * @param  string $transaction_id ID number of transaction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsSummaryGetRequest($from, $to, $channel_name = null, $interval = 'Summary', $transaction_id = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling reportsSummaryGet'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling reportsSummaryGet'
            );
        }

        $resourcePath = '/reports/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($channel_name !== null) {
            $queryParams['channelName'] = ObjectSerializer::toQueryValue($channel_name);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval);
        }
        // query params
        if ($transaction_id !== null) {
            $queryParams['transactionID'] = ObjectSerializer::toQueryValue($transaction_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
