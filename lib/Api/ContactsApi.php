<?php
/**
 * ContactsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ContactsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation contactsDelete
     *
     * Permanantly deletes the contacts provided.  You can provide either a qualified rule or a list of emails (comma separated string).
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function contactsDelete($rule = null, $emails = null, $list_names = null)
    {
        $this->contactsDeleteWithHttpInfo($rule, $emails, $list_names);
    }

    /**
     * Operation contactsDeleteWithHttpInfo
     *
     * Permanantly deletes the contacts provided.  You can provide either a qualified rule or a list of emails (comma separated string).
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function contactsDeleteWithHttpInfo($rule = null, $emails = null, $list_names = null)
    {
        $returnType = '';
        $request = $this->contactsDeleteRequest($rule, $emails, $list_names);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation contactsDeleteAsync
     *
     * Permanantly deletes the contacts provided.  You can provide either a qualified rule or a list of emails (comma separated string).
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsDeleteAsync($rule = null, $emails = null, $list_names = null)
    {
        return $this->contactsDeleteAsyncWithHttpInfo($rule, $emails, $list_names)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contactsDeleteAsyncWithHttpInfo
     *
     * Permanantly deletes the contacts provided.  You can provide either a qualified rule or a list of emails (comma separated string).
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsDeleteAsyncWithHttpInfo($rule = null, $emails = null, $list_names = null)
    {
        $returnType = '';
        $request = $this->contactsDeleteRequest($rule, $emails, $list_names);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contactsDelete'
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function contactsDeleteRequest($rule = null, $emails = null, $list_names = null)
    {

        $resourcePath = '/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rule !== null) {
            $queryParams['rule'] = ObjectSerializer::toQueryValue($rule);
        }
        // query params
        if (is_array($emails)) {
            $emails = ObjectSerializer::serializeCollection($emails, 'csv', true);
        }
        if ($emails !== null) {
            $queryParams['emails'] = ObjectSerializer::toQueryValue($emails);
        }
        // query params
        if (is_array($list_names)) {
            $list_names = ObjectSerializer::serializeCollection($list_names, 'csv', true);
        }
        if ($list_names !== null) {
            $queryParams['listNames'] = ObjectSerializer::toQueryValue($list_names);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contactsEmailGet
     *
     * Load detailed contact information
     *
     * @param  string $email Proper email address. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Contact
     */
    public function contactsEmailGet($email)
    {
        list($response) = $this->contactsEmailGetWithHttpInfo($email);
        return $response;
    }

    /**
     * Operation contactsEmailGetWithHttpInfo
     *
     * Load detailed contact information
     *
     * @param  string $email Proper email address. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Contact, HTTP status code, HTTP response headers (array of strings)
     */
    public function contactsEmailGetWithHttpInfo($email)
    {
        $returnType = '\Swagger\Client\Model\Contact';
        $request = $this->contactsEmailGetRequest($email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Contact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contactsEmailGetAsync
     *
     * Load detailed contact information
     *
     * @param  string $email Proper email address. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsEmailGetAsync($email)
    {
        return $this->contactsEmailGetAsyncWithHttpInfo($email)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contactsEmailGetAsyncWithHttpInfo
     *
     * Load detailed contact information
     *
     * @param  string $email Proper email address. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsEmailGetAsyncWithHttpInfo($email)
    {
        $returnType = '\Swagger\Client\Model\Contact';
        $request = $this->contactsEmailGetRequest($email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contactsEmailGet'
     *
     * @param  string $email Proper email address. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function contactsEmailGetRequest($email)
    {
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling contactsEmailGet'
            );
        }

        $resourcePath = '/contacts/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contactsEmailHistoryGet
     *
     * Shows detailed history of chosen Contact.
     *
     * @param  string $email Proper email address. (required)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ContactHistory[]
     */
    public function contactsEmailHistoryGet($email, $limit = '0', $offset = '0')
    {
        list($response) = $this->contactsEmailHistoryGetWithHttpInfo($email, $limit, $offset);
        return $response;
    }

    /**
     * Operation contactsEmailHistoryGetWithHttpInfo
     *
     * Shows detailed history of chosen Contact.
     *
     * @param  string $email Proper email address. (required)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ContactHistory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function contactsEmailHistoryGetWithHttpInfo($email, $limit = '0', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ContactHistory[]';
        $request = $this->contactsEmailHistoryGetRequest($email, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ContactHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contactsEmailHistoryGetAsync
     *
     * Shows detailed history of chosen Contact.
     *
     * @param  string $email Proper email address. (required)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsEmailHistoryGetAsync($email, $limit = '0', $offset = '0')
    {
        return $this->contactsEmailHistoryGetAsyncWithHttpInfo($email, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contactsEmailHistoryGetAsyncWithHttpInfo
     *
     * Shows detailed history of chosen Contact.
     *
     * @param  string $email Proper email address. (required)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsEmailHistoryGetAsyncWithHttpInfo($email, $limit = '0', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ContactHistory[]';
        $request = $this->contactsEmailHistoryGetRequest($email, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contactsEmailHistoryGet'
     *
     * @param  string $email Proper email address. (required)
     * @param  int $limit Maximum of loaded items. (optional, default to 0)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function contactsEmailHistoryGetRequest($email, $limit = '0', $offset = '0')
    {
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling contactsEmailHistoryGet'
            );
        }

        $resourcePath = '/contacts/{email}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }

        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contactsEmailPut
     *
     * Update selected contact. Omitted contact's fields will be reset by default (see the clearRestOfFields parameter)
     *
     * @param  string $email Proper email address. (required)
     * @param  \Swagger\Client\Model\ContactUpdatePayload $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Contact
     */
    public function contactsEmailPut($email, $body)
    {
        list($response) = $this->contactsEmailPutWithHttpInfo($email, $body);
        return $response;
    }

    /**
     * Operation contactsEmailPutWithHttpInfo
     *
     * Update selected contact. Omitted contact's fields will be reset by default (see the clearRestOfFields parameter)
     *
     * @param  string $email Proper email address. (required)
     * @param  \Swagger\Client\Model\ContactUpdatePayload $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Contact, HTTP status code, HTTP response headers (array of strings)
     */
    public function contactsEmailPutWithHttpInfo($email, $body)
    {
        $returnType = '\Swagger\Client\Model\Contact';
        $request = $this->contactsEmailPutRequest($email, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Contact',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contactsEmailPutAsync
     *
     * Update selected contact. Omitted contact's fields will be reset by default (see the clearRestOfFields parameter)
     *
     * @param  string $email Proper email address. (required)
     * @param  \Swagger\Client\Model\ContactUpdatePayload $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsEmailPutAsync($email, $body)
    {
        return $this->contactsEmailPutAsyncWithHttpInfo($email, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contactsEmailPutAsyncWithHttpInfo
     *
     * Update selected contact. Omitted contact's fields will be reset by default (see the clearRestOfFields parameter)
     *
     * @param  string $email Proper email address. (required)
     * @param  \Swagger\Client\Model\ContactUpdatePayload $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsEmailPutAsyncWithHttpInfo($email, $body)
    {
        $returnType = '\Swagger\Client\Model\Contact';
        $request = $this->contactsEmailPutRequest($email, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contactsEmailPut'
     *
     * @param  string $email Proper email address. (required)
     * @param  \Swagger\Client\Model\ContactUpdatePayload $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function contactsEmailPutRequest($email, $body)
    {
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling contactsEmailPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling contactsEmailPut'
            );
        }

        $resourcePath = '/contacts/{email}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($email !== null) {
            $resourcePath = str_replace(
                '{' . 'email' . '}',
                ObjectSerializer::toPathValue($email),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contactsGet
     *
     * List of all contacts. If you have not specified RULE, all Contacts will be listed.
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Contact[]
     */
    public function contactsGet($rule = null, $limit = '20', $offset = '0')
    {
        list($response) = $this->contactsGetWithHttpInfo($rule, $limit, $offset);
        return $response;
    }

    /**
     * Operation contactsGetWithHttpInfo
     *
     * List of all contacts. If you have not specified RULE, all Contacts will be listed.
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Contact[], HTTP status code, HTTP response headers (array of strings)
     */
    public function contactsGetWithHttpInfo($rule = null, $limit = '20', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\Contact[]';
        $request = $this->contactsGetRequest($rule, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Contact[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contactsGetAsync
     *
     * List of all contacts. If you have not specified RULE, all Contacts will be listed.
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsGetAsync($rule = null, $limit = '20', $offset = '0')
    {
        return $this->contactsGetAsyncWithHttpInfo($rule, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contactsGetAsyncWithHttpInfo
     *
     * List of all contacts. If you have not specified RULE, all Contacts will be listed.
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsGetAsyncWithHttpInfo($rule = null, $limit = '20', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\Contact[]';
        $request = $this->contactsGetRequest($rule, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contactsGet'
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  int $limit Maximum of loaded items. (optional, default to 20)
     * @param  int $offset How many items should be loaded ahead. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function contactsGetRequest($rule = null, $limit = '20', $offset = '0')
    {

        $resourcePath = '/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rule !== null) {
            $queryParams['rule'] = ObjectSerializer::toQueryValue($rule);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contactsPost
     *
     * Add new Contact to one of your Lists.
     *
     * @param  \Swagger\Client\Model\QuickAddPayload $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Contact[]
     */
    public function contactsPost($body)
    {
        list($response) = $this->contactsPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation contactsPostWithHttpInfo
     *
     * Add new Contact to one of your Lists.
     *
     * @param  \Swagger\Client\Model\QuickAddPayload $body  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Contact[], HTTP status code, HTTP response headers (array of strings)
     */
    public function contactsPostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\Contact[]';
        $request = $this->contactsPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Contact[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contactsPostAsync
     *
     * Add new Contact to one of your Lists.
     *
     * @param  \Swagger\Client\Model\QuickAddPayload $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsPostAsync($body)
    {
        return $this->contactsPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contactsPostAsyncWithHttpInfo
     *
     * Add new Contact to one of your Lists.
     *
     * @param  \Swagger\Client\Model\QuickAddPayload $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsPostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\Contact[]';
        $request = $this->contactsPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contactsPost'
     *
     * @param  \Swagger\Client\Model\QuickAddPayload $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function contactsPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling contactsPost'
            );
        }

        $resourcePath = '/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contactsStatsGet
     *
     * Returns number of Contacts, RULE specifies contact Status.
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ContactStats
     */
    public function contactsStatsGet($rule = null, $list_names = null)
    {
        list($response) = $this->contactsStatsGetWithHttpInfo($rule, $list_names);
        return $response;
    }

    /**
     * Operation contactsStatsGetWithHttpInfo
     *
     * Returns number of Contacts, RULE specifies contact Status.
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ContactStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function contactsStatsGetWithHttpInfo($rule = null, $list_names = null)
    {
        $returnType = '\Swagger\Client\Model\ContactStats';
        $request = $this->contactsStatsGetRequest($rule, $list_names);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ContactStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contactsStatsGetAsync
     *
     * Returns number of Contacts, RULE specifies contact Status.
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsStatsGetAsync($rule = null, $list_names = null)
    {
        return $this->contactsStatsGetAsyncWithHttpInfo($rule, $list_names)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contactsStatsGetAsyncWithHttpInfo
     *
     * Returns number of Contacts, RULE specifies contact Status.
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsStatsGetAsyncWithHttpInfo($rule = null, $list_names = null)
    {
        $returnType = '\Swagger\Client\Model\ContactStats';
        $request = $this->contactsStatsGetRequest($rule, $list_names);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contactsStatsGet'
     *
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function contactsStatsGetRequest($rule = null, $list_names = null)
    {

        $resourcePath = '/contacts/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rule !== null) {
            $queryParams['rule'] = ObjectSerializer::toQueryValue($rule);
        }
        // query params
        if (is_array($list_names)) {
            $list_names = ObjectSerializer::serializeCollection($list_names, 'csv', true);
        }
        if ($list_names !== null) {
            $queryParams['listNames'] = ObjectSerializer::toQueryValue($list_names);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contactsTasksExportGet
     *
     * Export selected Contacts to file.
     *
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ExportLink
     */
    public function contactsTasksExportGet($file_format = 'Csv', $rule = null, $emails = null, $compression_format = 'None', $file_name = null, $list_names = null)
    {
        list($response) = $this->contactsTasksExportGetWithHttpInfo($file_format, $rule, $emails, $compression_format, $file_name, $list_names);
        return $response;
    }

    /**
     * Operation contactsTasksExportGetWithHttpInfo
     *
     * Export selected Contacts to file.
     *
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ExportLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function contactsTasksExportGetWithHttpInfo($file_format = 'Csv', $rule = null, $emails = null, $compression_format = 'None', $file_name = null, $list_names = null)
    {
        $returnType = '\Swagger\Client\Model\ExportLink';
        $request = $this->contactsTasksExportGetRequest($file_format, $rule, $emails, $compression_format, $file_name, $list_names);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExportLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contactsTasksExportGetAsync
     *
     * Export selected Contacts to file.
     *
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsTasksExportGetAsync($file_format = 'Csv', $rule = null, $emails = null, $compression_format = 'None', $file_name = null, $list_names = null)
    {
        return $this->contactsTasksExportGetAsyncWithHttpInfo($file_format, $rule, $emails, $compression_format, $file_name, $list_names)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contactsTasksExportGetAsyncWithHttpInfo
     *
     * Export selected Contacts to file.
     *
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsTasksExportGetAsyncWithHttpInfo($file_format = 'Csv', $rule = null, $emails = null, $compression_format = 'None', $file_name = null, $list_names = null)
    {
        $returnType = '\Swagger\Client\Model\ExportLink';
        $request = $this->contactsTasksExportGetRequest($file_format, $rule, $emails, $compression_format, $file_name, $list_names);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contactsTasksExportGet'
     *
     * @param  string $file_format Format of the exported file (optional, default to Csv)
     * @param  string $rule Query used for filtering. (optional)
     * @param  string[] $emails Comma delimited list of contact emails (optional)
     * @param  string $compression_format FileResponse compression format. None or Zip. (optional, default to None)
     * @param  string $file_name Name of your file. (optional)
     * @param  string[] $list_names  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function contactsTasksExportGetRequest($file_format = 'Csv', $rule = null, $emails = null, $compression_format = 'None', $file_name = null, $list_names = null)
    {

        $resourcePath = '/contacts/tasks/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_format !== null) {
            $queryParams['fileFormat'] = ObjectSerializer::toQueryValue($file_format);
        }
        // query params
        if ($rule !== null) {
            $queryParams['rule'] = ObjectSerializer::toQueryValue($rule);
        }
        // query params
        if (is_array($emails)) {
            $emails = ObjectSerializer::serializeCollection($emails, 'csv', true);
        }
        if ($emails !== null) {
            $queryParams['emails'] = ObjectSerializer::toQueryValue($emails);
        }
        // query params
        if ($compression_format !== null) {
            $queryParams['compressionFormat'] = ObjectSerializer::toQueryValue($compression_format);
        }
        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = ObjectSerializer::toQueryValue($file_name);
        }
        // query params
        if (is_array($list_names)) {
            $list_names = ObjectSerializer::serializeCollection($list_names, 'csv', true);
        }
        if ($list_names !== null) {
            $queryParams['listNames'] = ObjectSerializer::toQueryValue($list_names);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contactsTasksImportPost
     *
     * Upload contacts from a file.
     *
     * @param  \SplFileObject $file  (required)
     * @param  bool $allow_unsubscribe True: Allow unsubscribing from this list. Otherwise, false (optional, default to False)
     * @param  string $list_name Name of your list. (optional)
     * @param  string $status Name of status: Active, Engaged, Inactive, Abuse, Bounced, Unsubscribed. (optional, default to Active)
     * @param  string $consent_date Date of consent to send this contact(s) your email. If not provided current date is used for consent. (optional)
     * @param  string $consent_ip IP address of consent to send this contact(s) your email. If not provided your current public IP address is used for consent. (optional)
     * @param  string $consent_tracking  (optional, default to Unknown)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function contactsTasksImportPost($file, $allow_unsubscribe = 'False', $list_name = null, $status = 'Active', $consent_date = null, $consent_ip = null, $consent_tracking = 'Unknown')
    {
        $this->contactsTasksImportPostWithHttpInfo($file, $allow_unsubscribe, $list_name, $status, $consent_date, $consent_ip, $consent_tracking);
    }

    /**
     * Operation contactsTasksImportPostWithHttpInfo
     *
     * Upload contacts from a file.
     *
     * @param  \SplFileObject $file  (required)
     * @param  bool $allow_unsubscribe True: Allow unsubscribing from this list. Otherwise, false (optional, default to False)
     * @param  string $list_name Name of your list. (optional)
     * @param  string $status Name of status: Active, Engaged, Inactive, Abuse, Bounced, Unsubscribed. (optional, default to Active)
     * @param  string $consent_date Date of consent to send this contact(s) your email. If not provided current date is used for consent. (optional)
     * @param  string $consent_ip IP address of consent to send this contact(s) your email. If not provided your current public IP address is used for consent. (optional)
     * @param  string $consent_tracking  (optional, default to Unknown)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function contactsTasksImportPostWithHttpInfo($file, $allow_unsubscribe = 'False', $list_name = null, $status = 'Active', $consent_date = null, $consent_ip = null, $consent_tracking = 'Unknown')
    {
        $returnType = '';
        $request = $this->contactsTasksImportPostRequest($file, $allow_unsubscribe, $list_name, $status, $consent_date, $consent_ip, $consent_tracking);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation contactsTasksImportPostAsync
     *
     * Upload contacts from a file.
     *
     * @param  \SplFileObject $file  (required)
     * @param  bool $allow_unsubscribe True: Allow unsubscribing from this list. Otherwise, false (optional, default to False)
     * @param  string $list_name Name of your list. (optional)
     * @param  string $status Name of status: Active, Engaged, Inactive, Abuse, Bounced, Unsubscribed. (optional, default to Active)
     * @param  string $consent_date Date of consent to send this contact(s) your email. If not provided current date is used for consent. (optional)
     * @param  string $consent_ip IP address of consent to send this contact(s) your email. If not provided your current public IP address is used for consent. (optional)
     * @param  string $consent_tracking  (optional, default to Unknown)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsTasksImportPostAsync($file, $allow_unsubscribe = 'False', $list_name = null, $status = 'Active', $consent_date = null, $consent_ip = null, $consent_tracking = 'Unknown')
    {
        return $this->contactsTasksImportPostAsyncWithHttpInfo($file, $allow_unsubscribe, $list_name, $status, $consent_date, $consent_ip, $consent_tracking)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contactsTasksImportPostAsyncWithHttpInfo
     *
     * Upload contacts from a file.
     *
     * @param  \SplFileObject $file  (required)
     * @param  bool $allow_unsubscribe True: Allow unsubscribing from this list. Otherwise, false (optional, default to False)
     * @param  string $list_name Name of your list. (optional)
     * @param  string $status Name of status: Active, Engaged, Inactive, Abuse, Bounced, Unsubscribed. (optional, default to Active)
     * @param  string $consent_date Date of consent to send this contact(s) your email. If not provided current date is used for consent. (optional)
     * @param  string $consent_ip IP address of consent to send this contact(s) your email. If not provided your current public IP address is used for consent. (optional)
     * @param  string $consent_tracking  (optional, default to Unknown)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contactsTasksImportPostAsyncWithHttpInfo($file, $allow_unsubscribe = 'False', $list_name = null, $status = 'Active', $consent_date = null, $consent_ip = null, $consent_tracking = 'Unknown')
    {
        $returnType = '';
        $request = $this->contactsTasksImportPostRequest($file, $allow_unsubscribe, $list_name, $status, $consent_date, $consent_ip, $consent_tracking);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contactsTasksImportPost'
     *
     * @param  \SplFileObject $file  (required)
     * @param  bool $allow_unsubscribe True: Allow unsubscribing from this list. Otherwise, false (optional, default to False)
     * @param  string $list_name Name of your list. (optional)
     * @param  string $status Name of status: Active, Engaged, Inactive, Abuse, Bounced, Unsubscribed. (optional, default to Active)
     * @param  string $consent_date Date of consent to send this contact(s) your email. If not provided current date is used for consent. (optional)
     * @param  string $consent_ip IP address of consent to send this contact(s) your email. If not provided your current public IP address is used for consent. (optional)
     * @param  string $consent_tracking  (optional, default to Unknown)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function contactsTasksImportPostRequest($file, $allow_unsubscribe = 'False', $list_name = null, $status = 'Active', $consent_date = null, $consent_ip = null, $consent_tracking = 'Unknown')
    {
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling contactsTasksImportPost'
            );
        }

        $resourcePath = '/contacts/tasks/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($allow_unsubscribe !== null) {
            $queryParams['allowUnsubscribe'] = ObjectSerializer::toQueryValue($allow_unsubscribe);
        }
        // query params
        if ($list_name !== null) {
            $queryParams['listName'] = ObjectSerializer::toQueryValue($list_name);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($consent_date !== null) {
            $queryParams['consentDate'] = ObjectSerializer::toQueryValue($consent_date);
        }
        // query params
        if ($consent_ip !== null) {
            $queryParams['consentIP'] = ObjectSerializer::toQueryValue($consent_ip);
        }
        // query params
        if ($consent_tracking !== null) {
            $queryParams['consentTracking'] = ObjectSerializer::toQueryValue($consent_tracking);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
