<?php
/**
 * EmailsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * EmailsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation emailsMergePost
     *
     * Send bulk merge email
     *
     * @param  \Swagger\Client\Model\EmailMergeMessage $body Content of message, HTML encoded (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EmailSend
     */
    public function emailsMergePost($body)
    {
        list($response) = $this->emailsMergePostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation emailsMergePostWithHttpInfo
     *
     * Send bulk merge email
     *
     * @param  \Swagger\Client\Model\EmailMergeMessage $body Content of message, HTML encoded (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EmailSend, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailsMergePostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\EmailSend';
        $request = $this->emailsMergePostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EmailSend',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailsMergePostAsync
     *
     * Send bulk merge email
     *
     * @param  \Swagger\Client\Model\EmailMergeMessage $body Content of message, HTML encoded (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsMergePostAsync($body)
    {
        return $this->emailsMergePostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailsMergePostAsyncWithHttpInfo
     *
     * Send bulk merge email
     *
     * @param  \Swagger\Client\Model\EmailMergeMessage $body Content of message, HTML encoded (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsMergePostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\EmailSend';
        $request = $this->emailsMergePostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailsMergePost'
     *
     * @param  \Swagger\Client\Model\EmailMergeMessage $body Content of message, HTML encoded (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailsMergePostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling emailsMergePost'
            );
        }

        $resourcePath = '/emails/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailsMsgidViewGet
     *
     * View email
     *
     * @param  string $msgid Message identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Email
     */
    public function emailsMsgidViewGet($msgid)
    {
        list($response) = $this->emailsMsgidViewGetWithHttpInfo($msgid);
        return $response;
    }

    /**
     * Operation emailsMsgidViewGetWithHttpInfo
     *
     * View email
     *
     * @param  string $msgid Message identifier (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Email, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailsMsgidViewGetWithHttpInfo($msgid)
    {
        $returnType = '\Swagger\Client\Model\Email';
        $request = $this->emailsMsgidViewGetRequest($msgid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Email',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailsMsgidViewGetAsync
     *
     * View email
     *
     * @param  string $msgid Message identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsMsgidViewGetAsync($msgid)
    {
        return $this->emailsMsgidViewGetAsyncWithHttpInfo($msgid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailsMsgidViewGetAsyncWithHttpInfo
     *
     * View email
     *
     * @param  string $msgid Message identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsMsgidViewGetAsyncWithHttpInfo($msgid)
    {
        $returnType = '\Swagger\Client\Model\Email';
        $request = $this->emailsMsgidViewGetRequest($msgid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailsMsgidViewGet'
     *
     * @param  string $msgid Message identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailsMsgidViewGetRequest($msgid)
    {
        // verify the required parameter 'msgid' is set
        if ($msgid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msgid when calling emailsMsgidViewGet'
            );
        }

        $resourcePath = '/emails/{msgid}/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($msgid !== null) {
            $resourcePath = str_replace(
                '{' . 'msgid' . '}',
                ObjectSerializer::toPathValue($msgid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailsTransactionalPost
     *
     * Send transactional message (recipients will be known to each other)
     *
     * @param  \Swagger\Client\Model\EmailTransactionalMessage $body Content of message, HTML encoded (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EmailSend
     */
    public function emailsTransactionalPost($body)
    {
        list($response) = $this->emailsTransactionalPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation emailsTransactionalPostWithHttpInfo
     *
     * Send transactional message (recipients will be known to each other)
     *
     * @param  \Swagger\Client\Model\EmailTransactionalMessage $body Content of message, HTML encoded (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EmailSend, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailsTransactionalPostWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\EmailSend';
        $request = $this->emailsTransactionalPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EmailSend',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailsTransactionalPostAsync
     *
     * Send transactional message (recipients will be known to each other)
     *
     * @param  \Swagger\Client\Model\EmailTransactionalMessage $body Content of message, HTML encoded (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsTransactionalPostAsync($body)
    {
        return $this->emailsTransactionalPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailsTransactionalPostAsyncWithHttpInfo
     *
     * Send transactional message (recipients will be known to each other)
     *
     * @param  \Swagger\Client\Model\EmailTransactionalMessage $body Content of message, HTML encoded (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsTransactionalPostAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\EmailSend';
        $request = $this->emailsTransactionalPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailsTransactionalPost'
     *
     * @param  \Swagger\Client\Model\EmailTransactionalMessage $body Content of message, HTML encoded (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailsTransactionalPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling emailsTransactionalPost'
            );
        }

        $resourcePath = '/emails/transactional';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailsTransactionidCancelPost
     *
     * Cancels emails that are waiting to be sent.
     *
     * @param  string $transactionid ID number of transaction (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function emailsTransactionidCancelPost($transactionid)
    {
        $this->emailsTransactionidCancelPostWithHttpInfo($transactionid);
    }

    /**
     * Operation emailsTransactionidCancelPostWithHttpInfo
     *
     * Cancels emails that are waiting to be sent.
     *
     * @param  string $transactionid ID number of transaction (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailsTransactionidCancelPostWithHttpInfo($transactionid)
    {
        $returnType = '';
        $request = $this->emailsTransactionidCancelPostRequest($transactionid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emailsTransactionidCancelPostAsync
     *
     * Cancels emails that are waiting to be sent.
     *
     * @param  string $transactionid ID number of transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsTransactionidCancelPostAsync($transactionid)
    {
        return $this->emailsTransactionidCancelPostAsyncWithHttpInfo($transactionid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailsTransactionidCancelPostAsyncWithHttpInfo
     *
     * Cancels emails that are waiting to be sent.
     *
     * @param  string $transactionid ID number of transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsTransactionidCancelPostAsyncWithHttpInfo($transactionid)
    {
        $returnType = '';
        $request = $this->emailsTransactionidCancelPostRequest($transactionid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailsTransactionidCancelPost'
     *
     * @param  string $transactionid ID number of transaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailsTransactionidCancelPostRequest($transactionid)
    {
        // verify the required parameter 'transactionid' is set
        if ($transactionid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transactionid when calling emailsTransactionidCancelPost'
            );
        }

        $resourcePath = '/emails/{transactionid}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($transactionid !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionid' . '}',
                ObjectSerializer::toPathValue($transactionid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailsTransactionidStatusGet
     *
     * Get email batch status
     *
     * @param  string $transactionid Transaction identifier (required)
     * @param  bool $show_failed Include Bounced email addresses. (optional, default to False)
     * @param  bool $show_sent Include Sent email addresses. (optional, default to False)
     * @param  bool $show_delivered Include all delivered email addresses. (optional, default to False)
     * @param  bool $show_pending Include Ready to send email addresses. (optional, default to False)
     * @param  bool $show_opened Include Opened email addresses. (optional, default to False)
     * @param  bool $show_clicked Include Clicked email addresses. (optional, default to False)
     * @param  bool $show_abuse Include Reported as abuse email addresses. (optional, default to False)
     * @param  bool $show_unsubscribed Include Unsubscribed email addresses. (optional, default to False)
     * @param  bool $show_errors Include error messages for bounced emails. (optional, default to False)
     * @param  bool $show_message_i_ds Include all MessageIDs for this transaction (optional, default to False)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EmailJobStatus
     */
    public function emailsTransactionidStatusGet($transactionid, $show_failed = 'False', $show_sent = 'False', $show_delivered = 'False', $show_pending = 'False', $show_opened = 'False', $show_clicked = 'False', $show_abuse = 'False', $show_unsubscribed = 'False', $show_errors = 'False', $show_message_i_ds = 'False')
    {
        list($response) = $this->emailsTransactionidStatusGetWithHttpInfo($transactionid, $show_failed, $show_sent, $show_delivered, $show_pending, $show_opened, $show_clicked, $show_abuse, $show_unsubscribed, $show_errors, $show_message_i_ds);
        return $response;
    }

    /**
     * Operation emailsTransactionidStatusGetWithHttpInfo
     *
     * Get email batch status
     *
     * @param  string $transactionid Transaction identifier (required)
     * @param  bool $show_failed Include Bounced email addresses. (optional, default to False)
     * @param  bool $show_sent Include Sent email addresses. (optional, default to False)
     * @param  bool $show_delivered Include all delivered email addresses. (optional, default to False)
     * @param  bool $show_pending Include Ready to send email addresses. (optional, default to False)
     * @param  bool $show_opened Include Opened email addresses. (optional, default to False)
     * @param  bool $show_clicked Include Clicked email addresses. (optional, default to False)
     * @param  bool $show_abuse Include Reported as abuse email addresses. (optional, default to False)
     * @param  bool $show_unsubscribed Include Unsubscribed email addresses. (optional, default to False)
     * @param  bool $show_errors Include error messages for bounced emails. (optional, default to False)
     * @param  bool $show_message_i_ds Include all MessageIDs for this transaction (optional, default to False)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EmailJobStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailsTransactionidStatusGetWithHttpInfo($transactionid, $show_failed = 'False', $show_sent = 'False', $show_delivered = 'False', $show_pending = 'False', $show_opened = 'False', $show_clicked = 'False', $show_abuse = 'False', $show_unsubscribed = 'False', $show_errors = 'False', $show_message_i_ds = 'False')
    {
        $returnType = '\Swagger\Client\Model\EmailJobStatus';
        $request = $this->emailsTransactionidStatusGetRequest($transactionid, $show_failed, $show_sent, $show_delivered, $show_pending, $show_opened, $show_clicked, $show_abuse, $show_unsubscribed, $show_errors, $show_message_i_ds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EmailJobStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailsTransactionidStatusGetAsync
     *
     * Get email batch status
     *
     * @param  string $transactionid Transaction identifier (required)
     * @param  bool $show_failed Include Bounced email addresses. (optional, default to False)
     * @param  bool $show_sent Include Sent email addresses. (optional, default to False)
     * @param  bool $show_delivered Include all delivered email addresses. (optional, default to False)
     * @param  bool $show_pending Include Ready to send email addresses. (optional, default to False)
     * @param  bool $show_opened Include Opened email addresses. (optional, default to False)
     * @param  bool $show_clicked Include Clicked email addresses. (optional, default to False)
     * @param  bool $show_abuse Include Reported as abuse email addresses. (optional, default to False)
     * @param  bool $show_unsubscribed Include Unsubscribed email addresses. (optional, default to False)
     * @param  bool $show_errors Include error messages for bounced emails. (optional, default to False)
     * @param  bool $show_message_i_ds Include all MessageIDs for this transaction (optional, default to False)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsTransactionidStatusGetAsync($transactionid, $show_failed = 'False', $show_sent = 'False', $show_delivered = 'False', $show_pending = 'False', $show_opened = 'False', $show_clicked = 'False', $show_abuse = 'False', $show_unsubscribed = 'False', $show_errors = 'False', $show_message_i_ds = 'False')
    {
        return $this->emailsTransactionidStatusGetAsyncWithHttpInfo($transactionid, $show_failed, $show_sent, $show_delivered, $show_pending, $show_opened, $show_clicked, $show_abuse, $show_unsubscribed, $show_errors, $show_message_i_ds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailsTransactionidStatusGetAsyncWithHttpInfo
     *
     * Get email batch status
     *
     * @param  string $transactionid Transaction identifier (required)
     * @param  bool $show_failed Include Bounced email addresses. (optional, default to False)
     * @param  bool $show_sent Include Sent email addresses. (optional, default to False)
     * @param  bool $show_delivered Include all delivered email addresses. (optional, default to False)
     * @param  bool $show_pending Include Ready to send email addresses. (optional, default to False)
     * @param  bool $show_opened Include Opened email addresses. (optional, default to False)
     * @param  bool $show_clicked Include Clicked email addresses. (optional, default to False)
     * @param  bool $show_abuse Include Reported as abuse email addresses. (optional, default to False)
     * @param  bool $show_unsubscribed Include Unsubscribed email addresses. (optional, default to False)
     * @param  bool $show_errors Include error messages for bounced emails. (optional, default to False)
     * @param  bool $show_message_i_ds Include all MessageIDs for this transaction (optional, default to False)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailsTransactionidStatusGetAsyncWithHttpInfo($transactionid, $show_failed = 'False', $show_sent = 'False', $show_delivered = 'False', $show_pending = 'False', $show_opened = 'False', $show_clicked = 'False', $show_abuse = 'False', $show_unsubscribed = 'False', $show_errors = 'False', $show_message_i_ds = 'False')
    {
        $returnType = '\Swagger\Client\Model\EmailJobStatus';
        $request = $this->emailsTransactionidStatusGetRequest($transactionid, $show_failed, $show_sent, $show_delivered, $show_pending, $show_opened, $show_clicked, $show_abuse, $show_unsubscribed, $show_errors, $show_message_i_ds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailsTransactionidStatusGet'
     *
     * @param  string $transactionid Transaction identifier (required)
     * @param  bool $show_failed Include Bounced email addresses. (optional, default to False)
     * @param  bool $show_sent Include Sent email addresses. (optional, default to False)
     * @param  bool $show_delivered Include all delivered email addresses. (optional, default to False)
     * @param  bool $show_pending Include Ready to send email addresses. (optional, default to False)
     * @param  bool $show_opened Include Opened email addresses. (optional, default to False)
     * @param  bool $show_clicked Include Clicked email addresses. (optional, default to False)
     * @param  bool $show_abuse Include Reported as abuse email addresses. (optional, default to False)
     * @param  bool $show_unsubscribed Include Unsubscribed email addresses. (optional, default to False)
     * @param  bool $show_errors Include error messages for bounced emails. (optional, default to False)
     * @param  bool $show_message_i_ds Include all MessageIDs for this transaction (optional, default to False)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailsTransactionidStatusGetRequest($transactionid, $show_failed = 'False', $show_sent = 'False', $show_delivered = 'False', $show_pending = 'False', $show_opened = 'False', $show_clicked = 'False', $show_abuse = 'False', $show_unsubscribed = 'False', $show_errors = 'False', $show_message_i_ds = 'False')
    {
        // verify the required parameter 'transactionid' is set
        if ($transactionid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transactionid when calling emailsTransactionidStatusGet'
            );
        }

        $resourcePath = '/emails/{transactionid}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($show_failed !== null) {
            $queryParams['showFailed'] = ObjectSerializer::toQueryValue($show_failed);
        }
        // query params
        if ($show_sent !== null) {
            $queryParams['showSent'] = ObjectSerializer::toQueryValue($show_sent);
        }
        // query params
        if ($show_delivered !== null) {
            $queryParams['showDelivered'] = ObjectSerializer::toQueryValue($show_delivered);
        }
        // query params
        if ($show_pending !== null) {
            $queryParams['showPending'] = ObjectSerializer::toQueryValue($show_pending);
        }
        // query params
        if ($show_opened !== null) {
            $queryParams['showOpened'] = ObjectSerializer::toQueryValue($show_opened);
        }
        // query params
        if ($show_clicked !== null) {
            $queryParams['showClicked'] = ObjectSerializer::toQueryValue($show_clicked);
        }
        // query params
        if ($show_abuse !== null) {
            $queryParams['showAbuse'] = ObjectSerializer::toQueryValue($show_abuse);
        }
        // query params
        if ($show_unsubscribed !== null) {
            $queryParams['showUnsubscribed'] = ObjectSerializer::toQueryValue($show_unsubscribed);
        }
        // query params
        if ($show_errors !== null) {
            $queryParams['showErrors'] = ObjectSerializer::toQueryValue($show_errors);
        }
        // query params
        if ($show_message_i_ds !== null) {
            $queryParams['showMessageIDs'] = ObjectSerializer::toQueryValue($show_message_i_ds);
        }

        // path params
        if ($transactionid !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionid' . '}',
                ObjectSerializer::toPathValue($transactionid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-ElasticEmail-ApiKey');
        if ($apiKey !== null) {
            $headers['X-ElasticEmail-ApiKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
