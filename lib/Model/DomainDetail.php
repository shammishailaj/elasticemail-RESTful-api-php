<?php
/**
 * DomainDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DomainDetail Class Doc Comment
 *
 * @category Class
 * @description Domain data, with information about domain records.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'domain' => 'string',
        'default_domain' => 'bool',
        'spf' => 'bool',
        'dkim' => 'bool',
        'mx' => 'bool',
        'dmarc' => 'bool',
        'is_rewrite_domain_valid' => 'bool',
        'verify' => 'bool',
        'type' => 'string',
        'tracking_status' => 'string',
        'certificate_status' => 'string',
        'certificate_validation_error' => 'string',
        'tracking_type_user_request' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'domain' => 'string',
        'default_domain' => 'boolean',
        'spf' => 'boolean',
        'dkim' => 'boolean',
        'mx' => 'boolean',
        'dmarc' => 'boolean',
        'is_rewrite_domain_valid' => 'boolean',
        'verify' => 'boolean',
        'type' => null,
        'tracking_status' => null,
        'certificate_status' => null,
        'certificate_validation_error' => 'string',
        'tracking_type_user_request' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'Domain',
        'default_domain' => 'DefaultDomain',
        'spf' => 'Spf',
        'dkim' => 'Dkim',
        'mx' => 'MX',
        'dmarc' => 'DMARC',
        'is_rewrite_domain_valid' => 'IsRewriteDomainValid',
        'verify' => 'Verify',
        'type' => 'Type',
        'tracking_status' => 'TrackingStatus',
        'certificate_status' => 'CertificateStatus',
        'certificate_validation_error' => 'CertificateValidationError',
        'tracking_type_user_request' => 'TrackingTypeUserRequest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'default_domain' => 'setDefaultDomain',
        'spf' => 'setSpf',
        'dkim' => 'setDkim',
        'mx' => 'setMx',
        'dmarc' => 'setDmarc',
        'is_rewrite_domain_valid' => 'setIsRewriteDomainValid',
        'verify' => 'setVerify',
        'type' => 'setType',
        'tracking_status' => 'setTrackingStatus',
        'certificate_status' => 'setCertificateStatus',
        'certificate_validation_error' => 'setCertificateValidationError',
        'tracking_type_user_request' => 'setTrackingTypeUserRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'default_domain' => 'getDefaultDomain',
        'spf' => 'getSpf',
        'dkim' => 'getDkim',
        'mx' => 'getMx',
        'dmarc' => 'getDmarc',
        'is_rewrite_domain_valid' => 'getIsRewriteDomainValid',
        'verify' => 'getVerify',
        'type' => 'getType',
        'tracking_status' => 'getTrackingStatus',
        'certificate_status' => 'getCertificateStatus',
        'certificate_validation_error' => 'getCertificateValidationError',
        'tracking_type_user_request' => 'getTrackingTypeUserRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_NONE = 'None';
    const TYPE_DELETE = 'Delete';
    const TYPE_HTTP = 'Http';
    const TYPE_EXTERNAL_HTTPS = 'ExternalHttps';
    const TYPE_INTERNAL_CERT_HTTPS = 'InternalCertHttps';
    const TYPE_LETS_ENCRYPT_CERT = 'LetsEncryptCert';
    const TRACKING_STATUS_VALIDATED = 'Validated';
    const TRACKING_STATUS_NOT_VALIDATED = 'NotValidated';
    const TRACKING_STATUS_INVALID = 'Invalid';
    const TRACKING_STATUS_BROKEN = 'Broken';
    const CERTIFICATE_STATUS_ERROR_OCCURED = 'ErrorOccured';
    const CERTIFICATE_STATUS_CERT_NOT_SET = 'CertNotSet';
    const CERTIFICATE_STATUS_VALID = 'Valid';
    const CERTIFICATE_STATUS_NOT_VALID = 'NotValid';
    const TRACKING_TYPE_USER_REQUEST_NONE = 'None';
    const TRACKING_TYPE_USER_REQUEST_DELETE = 'Delete';
    const TRACKING_TYPE_USER_REQUEST_HTTP = 'Http';
    const TRACKING_TYPE_USER_REQUEST_EXTERNAL_HTTPS = 'ExternalHttps';
    const TRACKING_TYPE_USER_REQUEST_INTERNAL_CERT_HTTPS = 'InternalCertHttps';
    const TRACKING_TYPE_USER_REQUEST_LETS_ENCRYPT_CERT = 'LetsEncryptCert';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NONE,
            self::TYPE_DELETE,
            self::TYPE_HTTP,
            self::TYPE_EXTERNAL_HTTPS,
            self::TYPE_INTERNAL_CERT_HTTPS,
            self::TYPE_LETS_ENCRYPT_CERT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrackingStatusAllowableValues()
    {
        return [
            self::TRACKING_STATUS_VALIDATED,
            self::TRACKING_STATUS_NOT_VALIDATED,
            self::TRACKING_STATUS_INVALID,
            self::TRACKING_STATUS_BROKEN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCertificateStatusAllowableValues()
    {
        return [
            self::CERTIFICATE_STATUS_ERROR_OCCURED,
            self::CERTIFICATE_STATUS_CERT_NOT_SET,
            self::CERTIFICATE_STATUS_VALID,
            self::CERTIFICATE_STATUS_NOT_VALID,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrackingTypeUserRequestAllowableValues()
    {
        return [
            self::TRACKING_TYPE_USER_REQUEST_NONE,
            self::TRACKING_TYPE_USER_REQUEST_DELETE,
            self::TRACKING_TYPE_USER_REQUEST_HTTP,
            self::TRACKING_TYPE_USER_REQUEST_EXTERNAL_HTTPS,
            self::TRACKING_TYPE_USER_REQUEST_INTERNAL_CERT_HTTPS,
            self::TRACKING_TYPE_USER_REQUEST_LETS_ENCRYPT_CERT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['default_domain'] = isset($data['default_domain']) ? $data['default_domain'] : null;
        $this->container['spf'] = isset($data['spf']) ? $data['spf'] : null;
        $this->container['dkim'] = isset($data['dkim']) ? $data['dkim'] : null;
        $this->container['mx'] = isset($data['mx']) ? $data['mx'] : null;
        $this->container['dmarc'] = isset($data['dmarc']) ? $data['dmarc'] : null;
        $this->container['is_rewrite_domain_valid'] = isset($data['is_rewrite_domain_valid']) ? $data['is_rewrite_domain_valid'] : null;
        $this->container['verify'] = isset($data['verify']) ? $data['verify'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['tracking_status'] = isset($data['tracking_status']) ? $data['tracking_status'] : null;
        $this->container['certificate_status'] = isset($data['certificate_status']) ? $data['certificate_status'] : null;
        $this->container['certificate_validation_error'] = isset($data['certificate_validation_error']) ? $data['certificate_validation_error'] : null;
        $this->container['tracking_type_user_request'] = isset($data['tracking_type_user_request']) ? $data['tracking_type_user_request'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['default_domain'] === null) {
            $invalidProperties[] = "'default_domain' can't be null";
        }
        if ($this->container['spf'] === null) {
            $invalidProperties[] = "'spf' can't be null";
        }
        if ($this->container['dkim'] === null) {
            $invalidProperties[] = "'dkim' can't be null";
        }
        if ($this->container['mx'] === null) {
            $invalidProperties[] = "'mx' can't be null";
        }
        if ($this->container['dmarc'] === null) {
            $invalidProperties[] = "'dmarc' can't be null";
        }
        if ($this->container['is_rewrite_domain_valid'] === null) {
            $invalidProperties[] = "'is_rewrite_domain_valid' can't be null";
        }
        if ($this->container['verify'] === null) {
            $invalidProperties[] = "'verify' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tracking_status'] === null) {
            $invalidProperties[] = "'tracking_status' can't be null";
        }
        $allowedValues = $this->getTrackingStatusAllowableValues();
        if (!in_array($this->container['tracking_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tracking_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['certificate_status'] === null) {
            $invalidProperties[] = "'certificate_status' can't be null";
        }
        $allowedValues = $this->getCertificateStatusAllowableValues();
        if (!in_array($this->container['certificate_status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'certificate_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['certificate_validation_error'] === null) {
            $invalidProperties[] = "'certificate_validation_error' can't be null";
        }
        $allowedValues = $this->getTrackingTypeUserRequestAllowableValues();
        if (!in_array($this->container['tracking_type_user_request'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tracking_type_user_request', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['domain'] === null) {
            return false;
        }
        if ($this->container['default_domain'] === null) {
            return false;
        }
        if ($this->container['spf'] === null) {
            return false;
        }
        if ($this->container['dkim'] === null) {
            return false;
        }
        if ($this->container['mx'] === null) {
            return false;
        }
        if ($this->container['dmarc'] === null) {
            return false;
        }
        if ($this->container['is_rewrite_domain_valid'] === null) {
            return false;
        }
        if ($this->container['verify'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        if ($this->container['tracking_status'] === null) {
            return false;
        }
        $allowedValues = $this->getTrackingStatusAllowableValues();
        if (!in_array($this->container['tracking_status'], $allowedValues)) {
            return false;
        }
        if ($this->container['certificate_status'] === null) {
            return false;
        }
        $allowedValues = $this->getCertificateStatusAllowableValues();
        if (!in_array($this->container['certificate_status'], $allowedValues)) {
            return false;
        }
        if ($this->container['certificate_validation_error'] === null) {
            return false;
        }
        $allowedValues = $this->getTrackingTypeUserRequestAllowableValues();
        if (!in_array($this->container['tracking_type_user_request'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain Name of selected domain.
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets default_domain
     *
     * @return bool
     */
    public function getDefaultDomain()
    {
        return $this->container['default_domain'];
    }

    /**
     * Sets default_domain
     *
     * @param bool $default_domain True, if domain is used as default. Otherwise, false,
     *
     * @return $this
     */
    public function setDefaultDomain($default_domain)
    {
        $this->container['default_domain'] = $default_domain;

        return $this;
    }

    /**
     * Gets spf
     *
     * @return bool
     */
    public function getSpf()
    {
        return $this->container['spf'];
    }

    /**
     * Sets spf
     *
     * @param bool $spf True, if SPF record is verified
     *
     * @return $this
     */
    public function setSpf($spf)
    {
        $this->container['spf'] = $spf;

        return $this;
    }

    /**
     * Gets dkim
     *
     * @return bool
     */
    public function getDkim()
    {
        return $this->container['dkim'];
    }

    /**
     * Sets dkim
     *
     * @param bool $dkim True, if DKIM record is verified
     *
     * @return $this
     */
    public function setDkim($dkim)
    {
        $this->container['dkim'] = $dkim;

        return $this;
    }

    /**
     * Gets mx
     *
     * @return bool
     */
    public function getMx()
    {
        return $this->container['mx'];
    }

    /**
     * Sets mx
     *
     * @param bool $mx True, if MX record is verified
     *
     * @return $this
     */
    public function setMx($mx)
    {
        $this->container['mx'] = $mx;

        return $this;
    }

    /**
     * Gets dmarc
     *
     * @return bool
     */
    public function getDmarc()
    {
        return $this->container['dmarc'];
    }

    /**
     * Sets dmarc
     *
     * @param bool $dmarc dmarc
     *
     * @return $this
     */
    public function setDmarc($dmarc)
    {
        $this->container['dmarc'] = $dmarc;

        return $this;
    }

    /**
     * Gets is_rewrite_domain_valid
     *
     * @return bool
     */
    public function getIsRewriteDomainValid()
    {
        return $this->container['is_rewrite_domain_valid'];
    }

    /**
     * Sets is_rewrite_domain_valid
     *
     * @param bool $is_rewrite_domain_valid True, if tracking CNAME record is verified
     *
     * @return $this
     */
    public function setIsRewriteDomainValid($is_rewrite_domain_valid)
    {
        $this->container['is_rewrite_domain_valid'] = $is_rewrite_domain_valid;

        return $this;
    }

    /**
     * Gets verify
     *
     * @return bool
     */
    public function getVerify()
    {
        return $this->container['verify'];
    }

    /**
     * Sets verify
     *
     * @param bool $verify True, if verification is available
     *
     * @return $this
     */
    public function setVerify($verify)
    {
        $this->container['verify'] = $verify;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets tracking_status
     *
     * @return string
     */
    public function getTrackingStatus()
    {
        return $this->container['tracking_status'];
    }

    /**
     * Sets tracking_status
     *
     * @param string $tracking_status 0 - Validated successfully, 1 - NotValidated , 2 - Invalid, 3 - Broken (tracking was frequnetly verfied in given period and still is invalid). For statuses: 0, 1, 3 tracking will be verified in normal periods. For status 2 tracking will be verified in high frequent periods.
     *
     * @return $this
     */
    public function setTrackingStatus($tracking_status)
    {
        $allowedValues = $this->getTrackingStatusAllowableValues();
        if (!in_array($tracking_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tracking_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tracking_status'] = $tracking_status;

        return $this;
    }

    /**
     * Gets certificate_status
     *
     * @return string
     */
    public function getCertificateStatus()
    {
        return $this->container['certificate_status'];
    }

    /**
     * Sets certificate_status
     *
     * @param string $certificate_status certificate_status
     *
     * @return $this
     */
    public function setCertificateStatus($certificate_status)
    {
        $allowedValues = $this->getCertificateStatusAllowableValues();
        if (!in_array($certificate_status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'certificate_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['certificate_status'] = $certificate_status;

        return $this;
    }

    /**
     * Gets certificate_validation_error
     *
     * @return string
     */
    public function getCertificateValidationError()
    {
        return $this->container['certificate_validation_error'];
    }

    /**
     * Sets certificate_validation_error
     *
     * @param string $certificate_validation_error certificate_validation_error
     *
     * @return $this
     */
    public function setCertificateValidationError($certificate_validation_error)
    {
        $this->container['certificate_validation_error'] = $certificate_validation_error;

        return $this;
    }

    /**
     * Gets tracking_type_user_request
     *
     * @return string
     */
    public function getTrackingTypeUserRequest()
    {
        return $this->container['tracking_type_user_request'];
    }

    /**
     * Sets tracking_type_user_request
     *
     * @param string $tracking_type_user_request tracking_type_user_request
     *
     * @return $this
     */
    public function setTrackingTypeUserRequest($tracking_type_user_request)
    {
        $allowedValues = $this->getTrackingTypeUserRequestAllowableValues();
        if (!is_null($tracking_type_user_request) && !in_array($tracking_type_user_request, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tracking_type_user_request', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tracking_type_user_request'] = $tracking_type_user_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


