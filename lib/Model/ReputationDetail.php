<?php
/**
 * ReputationDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReputationDetail Class Doc Comment
 *
 * @category Class
 * @description Detailed sending reputation of your account.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReputationDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReputationDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'impact' => '\Swagger\Client\Model\ReputationImpact',
        'abuse_percent' => 'double',
        'unknown_users_percent' => 'double',
        'opened_percent' => 'double',
        'clicked_percent' => 'double',
        'average_spam_score' => 'double',
        'failed_spam_percent' => 'double',
        'rep_emails_sent' => 'double',
        'average_reputation' => 'double',
        'price_level_reputation' => 'double',
        'next_price_level_reputation' => 'double',
        'price_level' => 'string',
        'tracking_domain_valid' => 'bool',
        'sender_domain_valid' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'impact' => null,
        'abuse_percent' => 'double',
        'unknown_users_percent' => 'double',
        'opened_percent' => 'double',
        'clicked_percent' => 'double',
        'average_spam_score' => 'double',
        'failed_spam_percent' => 'double',
        'rep_emails_sent' => 'double',
        'average_reputation' => 'double',
        'price_level_reputation' => 'double',
        'next_price_level_reputation' => 'double',
        'price_level' => 'string',
        'tracking_domain_valid' => 'boolean',
        'sender_domain_valid' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'impact' => 'Impact',
        'abuse_percent' => 'AbusePercent',
        'unknown_users_percent' => 'UnknownUsersPercent',
        'opened_percent' => 'OpenedPercent',
        'clicked_percent' => 'ClickedPercent',
        'average_spam_score' => 'AverageSpamScore',
        'failed_spam_percent' => 'FailedSpamPercent',
        'rep_emails_sent' => 'RepEmailsSent',
        'average_reputation' => 'AverageReputation',
        'price_level_reputation' => 'PriceLevelReputation',
        'next_price_level_reputation' => 'NextPriceLevelReputation',
        'price_level' => 'PriceLevel',
        'tracking_domain_valid' => 'TrackingDomainValid',
        'sender_domain_valid' => 'SenderDomainValid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'impact' => 'setImpact',
        'abuse_percent' => 'setAbusePercent',
        'unknown_users_percent' => 'setUnknownUsersPercent',
        'opened_percent' => 'setOpenedPercent',
        'clicked_percent' => 'setClickedPercent',
        'average_spam_score' => 'setAverageSpamScore',
        'failed_spam_percent' => 'setFailedSpamPercent',
        'rep_emails_sent' => 'setRepEmailsSent',
        'average_reputation' => 'setAverageReputation',
        'price_level_reputation' => 'setPriceLevelReputation',
        'next_price_level_reputation' => 'setNextPriceLevelReputation',
        'price_level' => 'setPriceLevel',
        'tracking_domain_valid' => 'setTrackingDomainValid',
        'sender_domain_valid' => 'setSenderDomainValid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'impact' => 'getImpact',
        'abuse_percent' => 'getAbusePercent',
        'unknown_users_percent' => 'getUnknownUsersPercent',
        'opened_percent' => 'getOpenedPercent',
        'clicked_percent' => 'getClickedPercent',
        'average_spam_score' => 'getAverageSpamScore',
        'failed_spam_percent' => 'getFailedSpamPercent',
        'rep_emails_sent' => 'getRepEmailsSent',
        'average_reputation' => 'getAverageReputation',
        'price_level_reputation' => 'getPriceLevelReputation',
        'next_price_level_reputation' => 'getNextPriceLevelReputation',
        'price_level' => 'getPriceLevel',
        'tracking_domain_valid' => 'getTrackingDomainValid',
        'sender_domain_valid' => 'getSenderDomainValid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['impact'] = isset($data['impact']) ? $data['impact'] : null;
        $this->container['abuse_percent'] = isset($data['abuse_percent']) ? $data['abuse_percent'] : null;
        $this->container['unknown_users_percent'] = isset($data['unknown_users_percent']) ? $data['unknown_users_percent'] : null;
        $this->container['opened_percent'] = isset($data['opened_percent']) ? $data['opened_percent'] : null;
        $this->container['clicked_percent'] = isset($data['clicked_percent']) ? $data['clicked_percent'] : null;
        $this->container['average_spam_score'] = isset($data['average_spam_score']) ? $data['average_spam_score'] : null;
        $this->container['failed_spam_percent'] = isset($data['failed_spam_percent']) ? $data['failed_spam_percent'] : null;
        $this->container['rep_emails_sent'] = isset($data['rep_emails_sent']) ? $data['rep_emails_sent'] : null;
        $this->container['average_reputation'] = isset($data['average_reputation']) ? $data['average_reputation'] : null;
        $this->container['price_level_reputation'] = isset($data['price_level_reputation']) ? $data['price_level_reputation'] : null;
        $this->container['next_price_level_reputation'] = isset($data['next_price_level_reputation']) ? $data['next_price_level_reputation'] : null;
        $this->container['price_level'] = isset($data['price_level']) ? $data['price_level'] : null;
        $this->container['tracking_domain_valid'] = isset($data['tracking_domain_valid']) ? $data['tracking_domain_valid'] : null;
        $this->container['sender_domain_valid'] = isset($data['sender_domain_valid']) ? $data['sender_domain_valid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['impact'] === null) {
            $invalidProperties[] = "'impact' can't be null";
        }
        if ($this->container['abuse_percent'] === null) {
            $invalidProperties[] = "'abuse_percent' can't be null";
        }
        if ($this->container['unknown_users_percent'] === null) {
            $invalidProperties[] = "'unknown_users_percent' can't be null";
        }
        if ($this->container['opened_percent'] === null) {
            $invalidProperties[] = "'opened_percent' can't be null";
        }
        if ($this->container['clicked_percent'] === null) {
            $invalidProperties[] = "'clicked_percent' can't be null";
        }
        if ($this->container['average_spam_score'] === null) {
            $invalidProperties[] = "'average_spam_score' can't be null";
        }
        if ($this->container['failed_spam_percent'] === null) {
            $invalidProperties[] = "'failed_spam_percent' can't be null";
        }
        if ($this->container['rep_emails_sent'] === null) {
            $invalidProperties[] = "'rep_emails_sent' can't be null";
        }
        if ($this->container['average_reputation'] === null) {
            $invalidProperties[] = "'average_reputation' can't be null";
        }
        if ($this->container['price_level_reputation'] === null) {
            $invalidProperties[] = "'price_level_reputation' can't be null";
        }
        if ($this->container['next_price_level_reputation'] === null) {
            $invalidProperties[] = "'next_price_level_reputation' can't be null";
        }
        if ($this->container['price_level'] === null) {
            $invalidProperties[] = "'price_level' can't be null";
        }
        if ($this->container['tracking_domain_valid'] === null) {
            $invalidProperties[] = "'tracking_domain_valid' can't be null";
        }
        if ($this->container['sender_domain_valid'] === null) {
            $invalidProperties[] = "'sender_domain_valid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['impact'] === null) {
            return false;
        }
        if ($this->container['abuse_percent'] === null) {
            return false;
        }
        if ($this->container['unknown_users_percent'] === null) {
            return false;
        }
        if ($this->container['opened_percent'] === null) {
            return false;
        }
        if ($this->container['clicked_percent'] === null) {
            return false;
        }
        if ($this->container['average_spam_score'] === null) {
            return false;
        }
        if ($this->container['failed_spam_percent'] === null) {
            return false;
        }
        if ($this->container['rep_emails_sent'] === null) {
            return false;
        }
        if ($this->container['average_reputation'] === null) {
            return false;
        }
        if ($this->container['price_level_reputation'] === null) {
            return false;
        }
        if ($this->container['next_price_level_reputation'] === null) {
            return false;
        }
        if ($this->container['price_level'] === null) {
            return false;
        }
        if ($this->container['tracking_domain_valid'] === null) {
            return false;
        }
        if ($this->container['sender_domain_valid'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets impact
     *
     * @return \Swagger\Client\Model\ReputationImpact
     */
    public function getImpact()
    {
        return $this->container['impact'];
    }

    /**
     * Sets impact
     *
     * @param \Swagger\Client\Model\ReputationImpact $impact impact
     *
     * @return $this
     */
    public function setImpact($impact)
    {
        $this->container['impact'] = $impact;

        return $this;
    }

    /**
     * Gets abuse_percent
     *
     * @return double
     */
    public function getAbusePercent()
    {
        return $this->container['abuse_percent'];
    }

    /**
     * Sets abuse_percent
     *
     * @param double $abuse_percent Percent of Complaining users - those, who do not want to receive email from you.
     *
     * @return $this
     */
    public function setAbusePercent($abuse_percent)
    {
        $this->container['abuse_percent'] = $abuse_percent;

        return $this;
    }

    /**
     * Gets unknown_users_percent
     *
     * @return double
     */
    public function getUnknownUsersPercent()
    {
        return $this->container['unknown_users_percent'];
    }

    /**
     * Sets unknown_users_percent
     *
     * @param double $unknown_users_percent Percent of Unknown users - users that couldn't be found
     *
     * @return $this
     */
    public function setUnknownUsersPercent($unknown_users_percent)
    {
        $this->container['unknown_users_percent'] = $unknown_users_percent;

        return $this;
    }

    /**
     * Gets opened_percent
     *
     * @return double
     */
    public function getOpenedPercent()
    {
        return $this->container['opened_percent'];
    }

    /**
     * Sets opened_percent
     *
     * @param double $opened_percent opened_percent
     *
     * @return $this
     */
    public function setOpenedPercent($opened_percent)
    {
        $this->container['opened_percent'] = $opened_percent;

        return $this;
    }

    /**
     * Gets clicked_percent
     *
     * @return double
     */
    public function getClickedPercent()
    {
        return $this->container['clicked_percent'];
    }

    /**
     * Sets clicked_percent
     *
     * @param double $clicked_percent clicked_percent
     *
     * @return $this
     */
    public function setClickedPercent($clicked_percent)
    {
        $this->container['clicked_percent'] = $clicked_percent;

        return $this;
    }

    /**
     * Gets average_spam_score
     *
     * @return double
     */
    public function getAverageSpamScore()
    {
        return $this->container['average_spam_score'];
    }

    /**
     * Sets average_spam_score
     *
     * @param double $average_spam_score Penalty from messages marked as spam.
     *
     * @return $this
     */
    public function setAverageSpamScore($average_spam_score)
    {
        $this->container['average_spam_score'] = $average_spam_score;

        return $this;
    }

    /**
     * Gets failed_spam_percent
     *
     * @return double
     */
    public function getFailedSpamPercent()
    {
        return $this->container['failed_spam_percent'];
    }

    /**
     * Sets failed_spam_percent
     *
     * @param double $failed_spam_percent Percent of Bounced users
     *
     * @return $this
     */
    public function setFailedSpamPercent($failed_spam_percent)
    {
        $this->container['failed_spam_percent'] = $failed_spam_percent;

        return $this;
    }

    /**
     * Gets rep_emails_sent
     *
     * @return double
     */
    public function getRepEmailsSent()
    {
        return $this->container['rep_emails_sent'];
    }

    /**
     * Sets rep_emails_sent
     *
     * @param double $rep_emails_sent Points from quantity of your emails.
     *
     * @return $this
     */
    public function setRepEmailsSent($rep_emails_sent)
    {
        $this->container['rep_emails_sent'] = $rep_emails_sent;

        return $this;
    }

    /**
     * Gets average_reputation
     *
     * @return double
     */
    public function getAverageReputation()
    {
        return $this->container['average_reputation'];
    }

    /**
     * Sets average_reputation
     *
     * @param double $average_reputation Average reputation.
     *
     * @return $this
     */
    public function setAverageReputation($average_reputation)
    {
        $this->container['average_reputation'] = $average_reputation;

        return $this;
    }

    /**
     * Gets price_level_reputation
     *
     * @return double
     */
    public function getPriceLevelReputation()
    {
        return $this->container['price_level_reputation'];
    }

    /**
     * Sets price_level_reputation
     *
     * @param double $price_level_reputation Actual price level.
     *
     * @return $this
     */
    public function setPriceLevelReputation($price_level_reputation)
    {
        $this->container['price_level_reputation'] = $price_level_reputation;

        return $this;
    }

    /**
     * Gets next_price_level_reputation
     *
     * @return double
     */
    public function getNextPriceLevelReputation()
    {
        return $this->container['next_price_level_reputation'];
    }

    /**
     * Sets next_price_level_reputation
     *
     * @param double $next_price_level_reputation Reputation needed to change pricing.
     *
     * @return $this
     */
    public function setNextPriceLevelReputation($next_price_level_reputation)
    {
        $this->container['next_price_level_reputation'] = $next_price_level_reputation;

        return $this;
    }

    /**
     * Gets price_level
     *
     * @return string
     */
    public function getPriceLevel()
    {
        return $this->container['price_level'];
    }

    /**
     * Sets price_level
     *
     * @param string $price_level Amount of emails sent from this account
     *
     * @return $this
     */
    public function setPriceLevel($price_level)
    {
        $this->container['price_level'] = $price_level;

        return $this;
    }

    /**
     * Gets tracking_domain_valid
     *
     * @return bool
     */
    public function getTrackingDomainValid()
    {
        return $this->container['tracking_domain_valid'];
    }

    /**
     * Sets tracking_domain_valid
     *
     * @param bool $tracking_domain_valid True, if tracking domain is correctly configured. Otherwise, false.
     *
     * @return $this
     */
    public function setTrackingDomainValid($tracking_domain_valid)
    {
        $this->container['tracking_domain_valid'] = $tracking_domain_valid;

        return $this;
    }

    /**
     * Gets sender_domain_valid
     *
     * @return bool
     */
    public function getSenderDomainValid()
    {
        return $this->container['sender_domain_valid'];
    }

    /**
     * Sets sender_domain_valid
     *
     * @param bool $sender_domain_valid True, if sending domain is correctly configured. Otherwise, false.
     *
     * @return $this
     */
    public function setSenderDomainValid($sender_domain_valid)
    {
        $this->container['sender_domain_valid'] = $sender_domain_valid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


