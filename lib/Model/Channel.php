<?php
/**
 * Channel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Channel Class Doc Comment
 *
 * @category Class
 * @description SMTP and HTTP API channel for grouping email delivery
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Channel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Channel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'date_added' => '\DateTime',
        'last_activity' => '\DateTime',
        'job_count' => 'int',
        'clicked_count' => 'int',
        'opened_count' => 'int',
        'recipient_count' => 'int',
        'sent_count' => 'int',
        'failed_count' => 'int',
        'unsubscribed_count' => 'int',
        'failed_abuse' => 'int',
        'cost' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => 'string',
        'date_added' => 'date-time',
        'last_activity' => 'date-time',
        'job_count' => 'int32',
        'clicked_count' => 'int32',
        'opened_count' => 'int32',
        'recipient_count' => 'int32',
        'sent_count' => 'int32',
        'failed_count' => 'int32',
        'unsubscribed_count' => 'int32',
        'failed_abuse' => 'int32',
        'cost' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'date_added' => 'DateAdded',
        'last_activity' => 'LastActivity',
        'job_count' => 'JobCount',
        'clicked_count' => 'ClickedCount',
        'opened_count' => 'OpenedCount',
        'recipient_count' => 'RecipientCount',
        'sent_count' => 'SentCount',
        'failed_count' => 'FailedCount',
        'unsubscribed_count' => 'UnsubscribedCount',
        'failed_abuse' => 'FailedAbuse',
        'cost' => 'Cost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'date_added' => 'setDateAdded',
        'last_activity' => 'setLastActivity',
        'job_count' => 'setJobCount',
        'clicked_count' => 'setClickedCount',
        'opened_count' => 'setOpenedCount',
        'recipient_count' => 'setRecipientCount',
        'sent_count' => 'setSentCount',
        'failed_count' => 'setFailedCount',
        'unsubscribed_count' => 'setUnsubscribedCount',
        'failed_abuse' => 'setFailedAbuse',
        'cost' => 'setCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'date_added' => 'getDateAdded',
        'last_activity' => 'getLastActivity',
        'job_count' => 'getJobCount',
        'clicked_count' => 'getClickedCount',
        'opened_count' => 'getOpenedCount',
        'recipient_count' => 'getRecipientCount',
        'sent_count' => 'getSentCount',
        'failed_count' => 'getFailedCount',
        'unsubscribed_count' => 'getUnsubscribedCount',
        'failed_abuse' => 'getFailedAbuse',
        'cost' => 'getCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['date_added'] = isset($data['date_added']) ? $data['date_added'] : null;
        $this->container['last_activity'] = isset($data['last_activity']) ? $data['last_activity'] : null;
        $this->container['job_count'] = isset($data['job_count']) ? $data['job_count'] : null;
        $this->container['clicked_count'] = isset($data['clicked_count']) ? $data['clicked_count'] : null;
        $this->container['opened_count'] = isset($data['opened_count']) ? $data['opened_count'] : null;
        $this->container['recipient_count'] = isset($data['recipient_count']) ? $data['recipient_count'] : null;
        $this->container['sent_count'] = isset($data['sent_count']) ? $data['sent_count'] : null;
        $this->container['failed_count'] = isset($data['failed_count']) ? $data['failed_count'] : null;
        $this->container['unsubscribed_count'] = isset($data['unsubscribed_count']) ? $data['unsubscribed_count'] : null;
        $this->container['failed_abuse'] = isset($data['failed_abuse']) ? $data['failed_abuse'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['date_added'] === null) {
            $invalidProperties[] = "'date_added' can't be null";
        }
        if ($this->container['job_count'] === null) {
            $invalidProperties[] = "'job_count' can't be null";
        }
        if ($this->container['clicked_count'] === null) {
            $invalidProperties[] = "'clicked_count' can't be null";
        }
        if ($this->container['opened_count'] === null) {
            $invalidProperties[] = "'opened_count' can't be null";
        }
        if ($this->container['recipient_count'] === null) {
            $invalidProperties[] = "'recipient_count' can't be null";
        }
        if ($this->container['sent_count'] === null) {
            $invalidProperties[] = "'sent_count' can't be null";
        }
        if ($this->container['failed_count'] === null) {
            $invalidProperties[] = "'failed_count' can't be null";
        }
        if ($this->container['unsubscribed_count'] === null) {
            $invalidProperties[] = "'unsubscribed_count' can't be null";
        }
        if ($this->container['failed_abuse'] === null) {
            $invalidProperties[] = "'failed_abuse' can't be null";
        }
        if ($this->container['cost'] === null) {
            $invalidProperties[] = "'cost' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['date_added'] === null) {
            return false;
        }
        if ($this->container['job_count'] === null) {
            return false;
        }
        if ($this->container['clicked_count'] === null) {
            return false;
        }
        if ($this->container['opened_count'] === null) {
            return false;
        }
        if ($this->container['recipient_count'] === null) {
            return false;
        }
        if ($this->container['sent_count'] === null) {
            return false;
        }
        if ($this->container['failed_count'] === null) {
            return false;
        }
        if ($this->container['unsubscribed_count'] === null) {
            return false;
        }
        if ($this->container['failed_abuse'] === null) {
            return false;
        }
        if ($this->container['cost'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Descriptive name of the channel.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets date_added
     *
     * @return \DateTime
     */
    public function getDateAdded()
    {
        return $this->container['date_added'];
    }

    /**
     * Sets date_added
     *
     * @param \DateTime $date_added The date the channel was added to your account.
     *
     * @return $this
     */
    public function setDateAdded($date_added)
    {
        $this->container['date_added'] = $date_added;

        return $this;
    }

    /**
     * Gets last_activity
     *
     * @return \DateTime
     */
    public function getLastActivity()
    {
        return $this->container['last_activity'];
    }

    /**
     * Sets last_activity
     *
     * @param \DateTime $last_activity The date the channel was last sent through.
     *
     * @return $this
     */
    public function setLastActivity($last_activity)
    {
        $this->container['last_activity'] = $last_activity;

        return $this;
    }

    /**
     * Gets job_count
     *
     * @return int
     */
    public function getJobCount()
    {
        return $this->container['job_count'];
    }

    /**
     * Sets job_count
     *
     * @param int $job_count The number of email jobs this channel has been used with.
     *
     * @return $this
     */
    public function setJobCount($job_count)
    {
        $this->container['job_count'] = $job_count;

        return $this;
    }

    /**
     * Gets clicked_count
     *
     * @return int
     */
    public function getClickedCount()
    {
        return $this->container['clicked_count'];
    }

    /**
     * Sets clicked_count
     *
     * @param int $clicked_count The number of emails that have been clicked within this channel.
     *
     * @return $this
     */
    public function setClickedCount($clicked_count)
    {
        $this->container['clicked_count'] = $clicked_count;

        return $this;
    }

    /**
     * Gets opened_count
     *
     * @return int
     */
    public function getOpenedCount()
    {
        return $this->container['opened_count'];
    }

    /**
     * Sets opened_count
     *
     * @param int $opened_count The number of emails that have been opened within this channel.
     *
     * @return $this
     */
    public function setOpenedCount($opened_count)
    {
        $this->container['opened_count'] = $opened_count;

        return $this;
    }

    /**
     * Gets recipient_count
     *
     * @return int
     */
    public function getRecipientCount()
    {
        return $this->container['recipient_count'];
    }

    /**
     * Sets recipient_count
     *
     * @param int $recipient_count The number of emails attempted to be sent within this channel.
     *
     * @return $this
     */
    public function setRecipientCount($recipient_count)
    {
        $this->container['recipient_count'] = $recipient_count;

        return $this;
    }

    /**
     * Gets sent_count
     *
     * @return int
     */
    public function getSentCount()
    {
        return $this->container['sent_count'];
    }

    /**
     * Sets sent_count
     *
     * @param int $sent_count The number of emails that have been sent within this channel.
     *
     * @return $this
     */
    public function setSentCount($sent_count)
    {
        $this->container['sent_count'] = $sent_count;

        return $this;
    }

    /**
     * Gets failed_count
     *
     * @return int
     */
    public function getFailedCount()
    {
        return $this->container['failed_count'];
    }

    /**
     * Sets failed_count
     *
     * @param int $failed_count The number of emails that have been bounced within this channel.
     *
     * @return $this
     */
    public function setFailedCount($failed_count)
    {
        $this->container['failed_count'] = $failed_count;

        return $this;
    }

    /**
     * Gets unsubscribed_count
     *
     * @return int
     */
    public function getUnsubscribedCount()
    {
        return $this->container['unsubscribed_count'];
    }

    /**
     * Sets unsubscribed_count
     *
     * @param int $unsubscribed_count The number of emails that have been unsubscribed within this channel.
     *
     * @return $this
     */
    public function setUnsubscribedCount($unsubscribed_count)
    {
        $this->container['unsubscribed_count'] = $unsubscribed_count;

        return $this;
    }

    /**
     * Gets failed_abuse
     *
     * @return int
     */
    public function getFailedAbuse()
    {
        return $this->container['failed_abuse'];
    }

    /**
     * Sets failed_abuse
     *
     * @param int $failed_abuse The number of emails that have been marked as abuse or complaint within this channel.
     *
     * @return $this
     */
    public function setFailedAbuse($failed_abuse)
    {
        $this->container['failed_abuse'] = $failed_abuse;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float $cost The total cost for emails/attachments within this channel.
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


