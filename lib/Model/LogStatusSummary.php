<?php
/**
 * LogStatusSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LogStatusSummary Class Doc Comment
 *
 * @category Class
 * @description Summary of log status, based on specified date range.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LogStatusSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LogStatusSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from' => 'string',
        'to' => 'string',
        'duration' => 'double',
        'recipients' => 'int',
        'email_total' => 'int',
        'sms_total' => 'int',
        'delivered' => 'int',
        'bounced' => 'int',
        'in_progress' => 'int',
        'opened' => 'int',
        'clicked' => 'int',
        'unsubscribed' => 'int',
        'complaints' => 'int',
        'inbound' => 'int',
        'manual_cancel' => 'int',
        'not_delivered' => 'int',
        'template_channel' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from' => 'string',
        'to' => 'string',
        'duration' => 'double',
        'recipients' => 'int64',
        'email_total' => 'int64',
        'sms_total' => 'int64',
        'delivered' => 'int64',
        'bounced' => 'int64',
        'in_progress' => 'int64',
        'opened' => 'int64',
        'clicked' => 'int64',
        'unsubscribed' => 'int64',
        'complaints' => 'int64',
        'inbound' => 'int64',
        'manual_cancel' => 'int64',
        'not_delivered' => 'int64',
        'template_channel' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'From',
        'to' => 'To',
        'duration' => 'Duration',
        'recipients' => 'Recipients',
        'email_total' => 'EmailTotal',
        'sms_total' => 'SmsTotal',
        'delivered' => 'Delivered',
        'bounced' => 'Bounced',
        'in_progress' => 'InProgress',
        'opened' => 'Opened',
        'clicked' => 'Clicked',
        'unsubscribed' => 'Unsubscribed',
        'complaints' => 'Complaints',
        'inbound' => 'Inbound',
        'manual_cancel' => 'ManualCancel',
        'not_delivered' => 'NotDelivered',
        'template_channel' => 'TemplateChannel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
        'to' => 'setTo',
        'duration' => 'setDuration',
        'recipients' => 'setRecipients',
        'email_total' => 'setEmailTotal',
        'sms_total' => 'setSmsTotal',
        'delivered' => 'setDelivered',
        'bounced' => 'setBounced',
        'in_progress' => 'setInProgress',
        'opened' => 'setOpened',
        'clicked' => 'setClicked',
        'unsubscribed' => 'setUnsubscribed',
        'complaints' => 'setComplaints',
        'inbound' => 'setInbound',
        'manual_cancel' => 'setManualCancel',
        'not_delivered' => 'setNotDelivered',
        'template_channel' => 'setTemplateChannel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
        'to' => 'getTo',
        'duration' => 'getDuration',
        'recipients' => 'getRecipients',
        'email_total' => 'getEmailTotal',
        'sms_total' => 'getSmsTotal',
        'delivered' => 'getDelivered',
        'bounced' => 'getBounced',
        'in_progress' => 'getInProgress',
        'opened' => 'getOpened',
        'clicked' => 'getClicked',
        'unsubscribed' => 'getUnsubscribed',
        'complaints' => 'getComplaints',
        'inbound' => 'getInbound',
        'manual_cancel' => 'getManualCancel',
        'not_delivered' => 'getNotDelivered',
        'template_channel' => 'getTemplateChannel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['email_total'] = isset($data['email_total']) ? $data['email_total'] : null;
        $this->container['sms_total'] = isset($data['sms_total']) ? $data['sms_total'] : null;
        $this->container['delivered'] = isset($data['delivered']) ? $data['delivered'] : null;
        $this->container['bounced'] = isset($data['bounced']) ? $data['bounced'] : null;
        $this->container['in_progress'] = isset($data['in_progress']) ? $data['in_progress'] : null;
        $this->container['opened'] = isset($data['opened']) ? $data['opened'] : null;
        $this->container['clicked'] = isset($data['clicked']) ? $data['clicked'] : null;
        $this->container['unsubscribed'] = isset($data['unsubscribed']) ? $data['unsubscribed'] : null;
        $this->container['complaints'] = isset($data['complaints']) ? $data['complaints'] : null;
        $this->container['inbound'] = isset($data['inbound']) ? $data['inbound'] : null;
        $this->container['manual_cancel'] = isset($data['manual_cancel']) ? $data['manual_cancel'] : null;
        $this->container['not_delivered'] = isset($data['not_delivered']) ? $data['not_delivered'] : null;
        $this->container['template_channel'] = isset($data['template_channel']) ? $data['template_channel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['recipients'] === null) {
            $invalidProperties[] = "'recipients' can't be null";
        }
        if ($this->container['email_total'] === null) {
            $invalidProperties[] = "'email_total' can't be null";
        }
        if ($this->container['sms_total'] === null) {
            $invalidProperties[] = "'sms_total' can't be null";
        }
        if ($this->container['delivered'] === null) {
            $invalidProperties[] = "'delivered' can't be null";
        }
        if ($this->container['bounced'] === null) {
            $invalidProperties[] = "'bounced' can't be null";
        }
        if ($this->container['in_progress'] === null) {
            $invalidProperties[] = "'in_progress' can't be null";
        }
        if ($this->container['opened'] === null) {
            $invalidProperties[] = "'opened' can't be null";
        }
        if ($this->container['clicked'] === null) {
            $invalidProperties[] = "'clicked' can't be null";
        }
        if ($this->container['unsubscribed'] === null) {
            $invalidProperties[] = "'unsubscribed' can't be null";
        }
        if ($this->container['complaints'] === null) {
            $invalidProperties[] = "'complaints' can't be null";
        }
        if ($this->container['inbound'] === null) {
            $invalidProperties[] = "'inbound' can't be null";
        }
        if ($this->container['manual_cancel'] === null) {
            $invalidProperties[] = "'manual_cancel' can't be null";
        }
        if ($this->container['not_delivered'] === null) {
            $invalidProperties[] = "'not_delivered' can't be null";
        }
        if ($this->container['template_channel'] === null) {
            $invalidProperties[] = "'template_channel' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['from'] === null) {
            return false;
        }
        if ($this->container['to'] === null) {
            return false;
        }
        if ($this->container['duration'] === null) {
            return false;
        }
        if ($this->container['recipients'] === null) {
            return false;
        }
        if ($this->container['email_total'] === null) {
            return false;
        }
        if ($this->container['sms_total'] === null) {
            return false;
        }
        if ($this->container['delivered'] === null) {
            return false;
        }
        if ($this->container['bounced'] === null) {
            return false;
        }
        if ($this->container['in_progress'] === null) {
            return false;
        }
        if ($this->container['opened'] === null) {
            return false;
        }
        if ($this->container['clicked'] === null) {
            return false;
        }
        if ($this->container['unsubscribed'] === null) {
            return false;
        }
        if ($this->container['complaints'] === null) {
            return false;
        }
        if ($this->container['inbound'] === null) {
            return false;
        }
        if ($this->container['manual_cancel'] === null) {
            return false;
        }
        if ($this->container['not_delivered'] === null) {
            return false;
        }
        if ($this->container['template_channel'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from Starting date for search in YYYY-MM-DDThh:mm:ss format.
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to Ending date for search in YYYY-MM-DDThh:mm:ss format.
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return double
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param double $duration Overall duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return int
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param int $recipients Number of recipients
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets email_total
     *
     * @return int
     */
    public function getEmailTotal()
    {
        return $this->container['email_total'];
    }

    /**
     * Sets email_total
     *
     * @param int $email_total Number of emails
     *
     * @return $this
     */
    public function setEmailTotal($email_total)
    {
        $this->container['email_total'] = $email_total;

        return $this;
    }

    /**
     * Gets sms_total
     *
     * @return int
     */
    public function getSmsTotal()
    {
        return $this->container['sms_total'];
    }

    /**
     * Sets sms_total
     *
     * @param int $sms_total Number of SMS
     *
     * @return $this
     */
    public function setSmsTotal($sms_total)
    {
        $this->container['sms_total'] = $sms_total;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return int
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param int $delivered Number of delivered messages
     *
     * @return $this
     */
    public function setDelivered($delivered)
    {
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets bounced
     *
     * @return int
     */
    public function getBounced()
    {
        return $this->container['bounced'];
    }

    /**
     * Sets bounced
     *
     * @param int $bounced Number of bounced messages
     *
     * @return $this
     */
    public function setBounced($bounced)
    {
        $this->container['bounced'] = $bounced;

        return $this;
    }

    /**
     * Gets in_progress
     *
     * @return int
     */
    public function getInProgress()
    {
        return $this->container['in_progress'];
    }

    /**
     * Sets in_progress
     *
     * @param int $in_progress Number of messages in progress
     *
     * @return $this
     */
    public function setInProgress($in_progress)
    {
        $this->container['in_progress'] = $in_progress;

        return $this;
    }

    /**
     * Gets opened
     *
     * @return int
     */
    public function getOpened()
    {
        return $this->container['opened'];
    }

    /**
     * Sets opened
     *
     * @param int $opened Number of opened messages
     *
     * @return $this
     */
    public function setOpened($opened)
    {
        $this->container['opened'] = $opened;

        return $this;
    }

    /**
     * Gets clicked
     *
     * @return int
     */
    public function getClicked()
    {
        return $this->container['clicked'];
    }

    /**
     * Sets clicked
     *
     * @param int $clicked Number of clicked messages
     *
     * @return $this
     */
    public function setClicked($clicked)
    {
        $this->container['clicked'] = $clicked;

        return $this;
    }

    /**
     * Gets unsubscribed
     *
     * @return int
     */
    public function getUnsubscribed()
    {
        return $this->container['unsubscribed'];
    }

    /**
     * Sets unsubscribed
     *
     * @param int $unsubscribed Number of unsubscribed messages
     *
     * @return $this
     */
    public function setUnsubscribed($unsubscribed)
    {
        $this->container['unsubscribed'] = $unsubscribed;

        return $this;
    }

    /**
     * Gets complaints
     *
     * @return int
     */
    public function getComplaints()
    {
        return $this->container['complaints'];
    }

    /**
     * Sets complaints
     *
     * @param int $complaints Number of complaint messages
     *
     * @return $this
     */
    public function setComplaints($complaints)
    {
        $this->container['complaints'] = $complaints;

        return $this;
    }

    /**
     * Gets inbound
     *
     * @return int
     */
    public function getInbound()
    {
        return $this->container['inbound'];
    }

    /**
     * Sets inbound
     *
     * @param int $inbound Number of inbound messages
     *
     * @return $this
     */
    public function setInbound($inbound)
    {
        $this->container['inbound'] = $inbound;

        return $this;
    }

    /**
     * Gets manual_cancel
     *
     * @return int
     */
    public function getManualCancel()
    {
        return $this->container['manual_cancel'];
    }

    /**
     * Sets manual_cancel
     *
     * @param int $manual_cancel Number of manually cancelled messages
     *
     * @return $this
     */
    public function setManualCancel($manual_cancel)
    {
        $this->container['manual_cancel'] = $manual_cancel;

        return $this;
    }

    /**
     * Gets not_delivered
     *
     * @return int
     */
    public function getNotDelivered()
    {
        return $this->container['not_delivered'];
    }

    /**
     * Sets not_delivered
     *
     * @param int $not_delivered Number of messages flagged with 'Not Delivered'
     *
     * @return $this
     */
    public function setNotDelivered($not_delivered)
    {
        $this->container['not_delivered'] = $not_delivered;

        return $this;
    }

    /**
     * Gets template_channel
     *
     * @return bool
     */
    public function getTemplateChannel()
    {
        return $this->container['template_channel'];
    }

    /**
     * Sets template_channel
     *
     * @param bool $template_channel ID number of template used
     *
     * @return $this
     */
    public function setTemplateChannel($template_channel)
    {
        $this->container['template_channel'] = $template_channel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


