<?php
/**
 * InboundOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InboundOptions Class Doc Comment
 *
 * @category Class
 * @description Lists inbound options of your account.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InboundOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InboundOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hub_callback_url' => 'string',
        'inbound_domain' => 'string',
        'inbound_contacts_only' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hub_callback_url' => 'string',
        'inbound_domain' => 'string',
        'inbound_contacts_only' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hub_callback_url' => 'HubCallbackUrl',
        'inbound_domain' => 'InboundDomain',
        'inbound_contacts_only' => 'InboundContactsOnly'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hub_callback_url' => 'setHubCallbackUrl',
        'inbound_domain' => 'setInboundDomain',
        'inbound_contacts_only' => 'setInboundContactsOnly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hub_callback_url' => 'getHubCallbackUrl',
        'inbound_domain' => 'getInboundDomain',
        'inbound_contacts_only' => 'getInboundContactsOnly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hub_callback_url'] = isset($data['hub_callback_url']) ? $data['hub_callback_url'] : null;
        $this->container['inbound_domain'] = isset($data['inbound_domain']) ? $data['inbound_domain'] : null;
        $this->container['inbound_contacts_only'] = isset($data['inbound_contacts_only']) ? $data['inbound_contacts_only'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['hub_callback_url'] === null) {
            $invalidProperties[] = "'hub_callback_url' can't be null";
        }
        if ($this->container['inbound_domain'] === null) {
            $invalidProperties[] = "'inbound_domain' can't be null";
        }
        if ($this->container['inbound_contacts_only'] === null) {
            $invalidProperties[] = "'inbound_contacts_only' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['hub_callback_url'] === null) {
            return false;
        }
        if ($this->container['inbound_domain'] === null) {
            return false;
        }
        if ($this->container['inbound_contacts_only'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets hub_callback_url
     *
     * @return string
     */
    public function getHubCallbackUrl()
    {
        return $this->container['hub_callback_url'];
    }

    /**
     * Sets hub_callback_url
     *
     * @param string $hub_callback_url URL used for tracking action of inbound emails
     *
     * @return $this
     */
    public function setHubCallbackUrl($hub_callback_url)
    {
        $this->container['hub_callback_url'] = $hub_callback_url;

        return $this;
    }

    /**
     * Gets inbound_domain
     *
     * @return string
     */
    public function getInboundDomain()
    {
        return $this->container['inbound_domain'];
    }

    /**
     * Sets inbound_domain
     *
     * @param string $inbound_domain Domain you use as your inbound domain
     *
     * @return $this
     */
    public function setInboundDomain($inbound_domain)
    {
        $this->container['inbound_domain'] = $inbound_domain;

        return $this;
    }

    /**
     * Gets inbound_contacts_only
     *
     * @return bool
     */
    public function getInboundContactsOnly()
    {
        return $this->container['inbound_contacts_only'];
    }

    /**
     * Sets inbound_contacts_only
     *
     * @param bool $inbound_contacts_only True, if you want inbound email to only process contacts from your account. Otherwise, false
     *
     * @return $this
     */
    public function setInboundContactsOnly($inbound_contacts_only)
    {
        $this->container['inbound_contacts_only'] = $inbound_contacts_only;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


