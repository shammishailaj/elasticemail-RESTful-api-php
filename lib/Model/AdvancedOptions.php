<?php
/**
 * AdvancedOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AdvancedOptions Class Doc Comment
 *
 * @category Class
 * @description Lists advanced sending options of your account.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdvancedOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdvancedOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_click_tracking' => 'bool',
        'enable_link_click_tracking' => 'bool',
        'enable_template_scripting' => 'bool',
        'auto_text_format' => 'bool',
        'email_notification_for_error' => 'bool',
        'low_credit_notification' => 'bool',
        'is_sub_account' => 'bool',
        'is_owned_by_reseller' => 'bool',
        'enable_unsubscribe_header' => 'bool',
        'manage_subscriptions' => 'bool',
        'manage_subscribed_only' => 'bool',
        'transactional_on_unsubscribe' => 'bool',
        'consent_tracking_on_unsubscribe' => 'bool',
        'preview_message_id' => 'string',
        'allow_custom_headers' => 'bool',
        'bcc_email' => 'string',
        'content_transfer_encoding' => 'string',
        'email_notification' => 'string',
        'notifications_emails' => 'string',
        'unsubscribe_notification_emails' => 'string',
        'enable_ui_tooltips' => 'bool',
        'enable_contact_features' => 'bool',
        'logo_url' => 'string',
        'stale_contact_score' => 'int',
        'stale_contact_inactive_days' => 'int',
        'delivery_reason' => 'string',
        'tutorials_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable_click_tracking' => 'boolean',
        'enable_link_click_tracking' => 'boolean',
        'enable_template_scripting' => 'boolean',
        'auto_text_format' => 'boolean',
        'email_notification_for_error' => 'boolean',
        'low_credit_notification' => 'boolean',
        'is_sub_account' => 'boolean',
        'is_owned_by_reseller' => 'boolean',
        'enable_unsubscribe_header' => 'boolean',
        'manage_subscriptions' => 'boolean',
        'manage_subscribed_only' => 'boolean',
        'transactional_on_unsubscribe' => 'boolean',
        'consent_tracking_on_unsubscribe' => 'boolean',
        'preview_message_id' => 'string',
        'allow_custom_headers' => 'boolean',
        'bcc_email' => 'string',
        'content_transfer_encoding' => 'string',
        'email_notification' => 'string',
        'notifications_emails' => 'string',
        'unsubscribe_notification_emails' => 'string',
        'enable_ui_tooltips' => 'boolean',
        'enable_contact_features' => 'boolean',
        'logo_url' => 'string',
        'stale_contact_score' => 'int32',
        'stale_contact_inactive_days' => 'int32',
        'delivery_reason' => 'string',
        'tutorials_enabled' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_click_tracking' => 'EnableClickTracking',
        'enable_link_click_tracking' => 'EnableLinkClickTracking',
        'enable_template_scripting' => 'EnableTemplateScripting',
        'auto_text_format' => 'AutoTextFormat',
        'email_notification_for_error' => 'EmailNotificationForError',
        'low_credit_notification' => 'LowCreditNotification',
        'is_sub_account' => 'IsSubAccount',
        'is_owned_by_reseller' => 'IsOwnedByReseller',
        'enable_unsubscribe_header' => 'EnableUnsubscribeHeader',
        'manage_subscriptions' => 'ManageSubscriptions',
        'manage_subscribed_only' => 'ManageSubscribedOnly',
        'transactional_on_unsubscribe' => 'TransactionalOnUnsubscribe',
        'consent_tracking_on_unsubscribe' => 'ConsentTrackingOnUnsubscribe',
        'preview_message_id' => 'PreviewMessageID',
        'allow_custom_headers' => 'AllowCustomHeaders',
        'bcc_email' => 'BccEmail',
        'content_transfer_encoding' => 'ContentTransferEncoding',
        'email_notification' => 'EmailNotification',
        'notifications_emails' => 'NotificationsEmails',
        'unsubscribe_notification_emails' => 'UnsubscribeNotificationEmails',
        'enable_ui_tooltips' => 'EnableUITooltips',
        'enable_contact_features' => 'EnableContactFeatures',
        'logo_url' => 'LogoUrl',
        'stale_contact_score' => 'StaleContactScore',
        'stale_contact_inactive_days' => 'StaleContactInactiveDays',
        'delivery_reason' => 'DeliveryReason',
        'tutorials_enabled' => 'TutorialsEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_click_tracking' => 'setEnableClickTracking',
        'enable_link_click_tracking' => 'setEnableLinkClickTracking',
        'enable_template_scripting' => 'setEnableTemplateScripting',
        'auto_text_format' => 'setAutoTextFormat',
        'email_notification_for_error' => 'setEmailNotificationForError',
        'low_credit_notification' => 'setLowCreditNotification',
        'is_sub_account' => 'setIsSubAccount',
        'is_owned_by_reseller' => 'setIsOwnedByReseller',
        'enable_unsubscribe_header' => 'setEnableUnsubscribeHeader',
        'manage_subscriptions' => 'setManageSubscriptions',
        'manage_subscribed_only' => 'setManageSubscribedOnly',
        'transactional_on_unsubscribe' => 'setTransactionalOnUnsubscribe',
        'consent_tracking_on_unsubscribe' => 'setConsentTrackingOnUnsubscribe',
        'preview_message_id' => 'setPreviewMessageId',
        'allow_custom_headers' => 'setAllowCustomHeaders',
        'bcc_email' => 'setBccEmail',
        'content_transfer_encoding' => 'setContentTransferEncoding',
        'email_notification' => 'setEmailNotification',
        'notifications_emails' => 'setNotificationsEmails',
        'unsubscribe_notification_emails' => 'setUnsubscribeNotificationEmails',
        'enable_ui_tooltips' => 'setEnableUiTooltips',
        'enable_contact_features' => 'setEnableContactFeatures',
        'logo_url' => 'setLogoUrl',
        'stale_contact_score' => 'setStaleContactScore',
        'stale_contact_inactive_days' => 'setStaleContactInactiveDays',
        'delivery_reason' => 'setDeliveryReason',
        'tutorials_enabled' => 'setTutorialsEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_click_tracking' => 'getEnableClickTracking',
        'enable_link_click_tracking' => 'getEnableLinkClickTracking',
        'enable_template_scripting' => 'getEnableTemplateScripting',
        'auto_text_format' => 'getAutoTextFormat',
        'email_notification_for_error' => 'getEmailNotificationForError',
        'low_credit_notification' => 'getLowCreditNotification',
        'is_sub_account' => 'getIsSubAccount',
        'is_owned_by_reseller' => 'getIsOwnedByReseller',
        'enable_unsubscribe_header' => 'getEnableUnsubscribeHeader',
        'manage_subscriptions' => 'getManageSubscriptions',
        'manage_subscribed_only' => 'getManageSubscribedOnly',
        'transactional_on_unsubscribe' => 'getTransactionalOnUnsubscribe',
        'consent_tracking_on_unsubscribe' => 'getConsentTrackingOnUnsubscribe',
        'preview_message_id' => 'getPreviewMessageId',
        'allow_custom_headers' => 'getAllowCustomHeaders',
        'bcc_email' => 'getBccEmail',
        'content_transfer_encoding' => 'getContentTransferEncoding',
        'email_notification' => 'getEmailNotification',
        'notifications_emails' => 'getNotificationsEmails',
        'unsubscribe_notification_emails' => 'getUnsubscribeNotificationEmails',
        'enable_ui_tooltips' => 'getEnableUiTooltips',
        'enable_contact_features' => 'getEnableContactFeatures',
        'logo_url' => 'getLogoUrl',
        'stale_contact_score' => 'getStaleContactScore',
        'stale_contact_inactive_days' => 'getStaleContactInactiveDays',
        'delivery_reason' => 'getDeliveryReason',
        'tutorials_enabled' => 'getTutorialsEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_click_tracking'] = isset($data['enable_click_tracking']) ? $data['enable_click_tracking'] : null;
        $this->container['enable_link_click_tracking'] = isset($data['enable_link_click_tracking']) ? $data['enable_link_click_tracking'] : null;
        $this->container['enable_template_scripting'] = isset($data['enable_template_scripting']) ? $data['enable_template_scripting'] : null;
        $this->container['auto_text_format'] = isset($data['auto_text_format']) ? $data['auto_text_format'] : null;
        $this->container['email_notification_for_error'] = isset($data['email_notification_for_error']) ? $data['email_notification_for_error'] : null;
        $this->container['low_credit_notification'] = isset($data['low_credit_notification']) ? $data['low_credit_notification'] : null;
        $this->container['is_sub_account'] = isset($data['is_sub_account']) ? $data['is_sub_account'] : null;
        $this->container['is_owned_by_reseller'] = isset($data['is_owned_by_reseller']) ? $data['is_owned_by_reseller'] : null;
        $this->container['enable_unsubscribe_header'] = isset($data['enable_unsubscribe_header']) ? $data['enable_unsubscribe_header'] : null;
        $this->container['manage_subscriptions'] = isset($data['manage_subscriptions']) ? $data['manage_subscriptions'] : null;
        $this->container['manage_subscribed_only'] = isset($data['manage_subscribed_only']) ? $data['manage_subscribed_only'] : null;
        $this->container['transactional_on_unsubscribe'] = isset($data['transactional_on_unsubscribe']) ? $data['transactional_on_unsubscribe'] : null;
        $this->container['consent_tracking_on_unsubscribe'] = isset($data['consent_tracking_on_unsubscribe']) ? $data['consent_tracking_on_unsubscribe'] : null;
        $this->container['preview_message_id'] = isset($data['preview_message_id']) ? $data['preview_message_id'] : null;
        $this->container['allow_custom_headers'] = isset($data['allow_custom_headers']) ? $data['allow_custom_headers'] : null;
        $this->container['bcc_email'] = isset($data['bcc_email']) ? $data['bcc_email'] : null;
        $this->container['content_transfer_encoding'] = isset($data['content_transfer_encoding']) ? $data['content_transfer_encoding'] : null;
        $this->container['email_notification'] = isset($data['email_notification']) ? $data['email_notification'] : null;
        $this->container['notifications_emails'] = isset($data['notifications_emails']) ? $data['notifications_emails'] : null;
        $this->container['unsubscribe_notification_emails'] = isset($data['unsubscribe_notification_emails']) ? $data['unsubscribe_notification_emails'] : null;
        $this->container['enable_ui_tooltips'] = isset($data['enable_ui_tooltips']) ? $data['enable_ui_tooltips'] : null;
        $this->container['enable_contact_features'] = isset($data['enable_contact_features']) ? $data['enable_contact_features'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['stale_contact_score'] = isset($data['stale_contact_score']) ? $data['stale_contact_score'] : null;
        $this->container['stale_contact_inactive_days'] = isset($data['stale_contact_inactive_days']) ? $data['stale_contact_inactive_days'] : null;
        $this->container['delivery_reason'] = isset($data['delivery_reason']) ? $data['delivery_reason'] : null;
        $this->container['tutorials_enabled'] = isset($data['tutorials_enabled']) ? $data['tutorials_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['enable_click_tracking'] === null) {
            $invalidProperties[] = "'enable_click_tracking' can't be null";
        }
        if ($this->container['enable_link_click_tracking'] === null) {
            $invalidProperties[] = "'enable_link_click_tracking' can't be null";
        }
        if ($this->container['enable_template_scripting'] === null) {
            $invalidProperties[] = "'enable_template_scripting' can't be null";
        }
        if ($this->container['auto_text_format'] === null) {
            $invalidProperties[] = "'auto_text_format' can't be null";
        }
        if ($this->container['email_notification_for_error'] === null) {
            $invalidProperties[] = "'email_notification_for_error' can't be null";
        }
        if ($this->container['low_credit_notification'] === null) {
            $invalidProperties[] = "'low_credit_notification' can't be null";
        }
        if ($this->container['is_sub_account'] === null) {
            $invalidProperties[] = "'is_sub_account' can't be null";
        }
        if ($this->container['is_owned_by_reseller'] === null) {
            $invalidProperties[] = "'is_owned_by_reseller' can't be null";
        }
        if ($this->container['enable_unsubscribe_header'] === null) {
            $invalidProperties[] = "'enable_unsubscribe_header' can't be null";
        }
        if ($this->container['manage_subscriptions'] === null) {
            $invalidProperties[] = "'manage_subscriptions' can't be null";
        }
        if ($this->container['manage_subscribed_only'] === null) {
            $invalidProperties[] = "'manage_subscribed_only' can't be null";
        }
        if ($this->container['transactional_on_unsubscribe'] === null) {
            $invalidProperties[] = "'transactional_on_unsubscribe' can't be null";
        }
        if ($this->container['consent_tracking_on_unsubscribe'] === null) {
            $invalidProperties[] = "'consent_tracking_on_unsubscribe' can't be null";
        }
        if ($this->container['preview_message_id'] === null) {
            $invalidProperties[] = "'preview_message_id' can't be null";
        }
        if ($this->container['allow_custom_headers'] === null) {
            $invalidProperties[] = "'allow_custom_headers' can't be null";
        }
        if ($this->container['bcc_email'] === null) {
            $invalidProperties[] = "'bcc_email' can't be null";
        }
        if ($this->container['content_transfer_encoding'] === null) {
            $invalidProperties[] = "'content_transfer_encoding' can't be null";
        }
        if ($this->container['email_notification'] === null) {
            $invalidProperties[] = "'email_notification' can't be null";
        }
        if ($this->container['notifications_emails'] === null) {
            $invalidProperties[] = "'notifications_emails' can't be null";
        }
        if ($this->container['unsubscribe_notification_emails'] === null) {
            $invalidProperties[] = "'unsubscribe_notification_emails' can't be null";
        }
        if ($this->container['enable_ui_tooltips'] === null) {
            $invalidProperties[] = "'enable_ui_tooltips' can't be null";
        }
        if ($this->container['enable_contact_features'] === null) {
            $invalidProperties[] = "'enable_contact_features' can't be null";
        }
        if ($this->container['logo_url'] === null) {
            $invalidProperties[] = "'logo_url' can't be null";
        }
        if ($this->container['stale_contact_score'] === null) {
            $invalidProperties[] = "'stale_contact_score' can't be null";
        }
        if ($this->container['stale_contact_inactive_days'] === null) {
            $invalidProperties[] = "'stale_contact_inactive_days' can't be null";
        }
        if ($this->container['delivery_reason'] === null) {
            $invalidProperties[] = "'delivery_reason' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['enable_click_tracking'] === null) {
            return false;
        }
        if ($this->container['enable_link_click_tracking'] === null) {
            return false;
        }
        if ($this->container['enable_template_scripting'] === null) {
            return false;
        }
        if ($this->container['auto_text_format'] === null) {
            return false;
        }
        if ($this->container['email_notification_for_error'] === null) {
            return false;
        }
        if ($this->container['low_credit_notification'] === null) {
            return false;
        }
        if ($this->container['is_sub_account'] === null) {
            return false;
        }
        if ($this->container['is_owned_by_reseller'] === null) {
            return false;
        }
        if ($this->container['enable_unsubscribe_header'] === null) {
            return false;
        }
        if ($this->container['manage_subscriptions'] === null) {
            return false;
        }
        if ($this->container['manage_subscribed_only'] === null) {
            return false;
        }
        if ($this->container['transactional_on_unsubscribe'] === null) {
            return false;
        }
        if ($this->container['consent_tracking_on_unsubscribe'] === null) {
            return false;
        }
        if ($this->container['preview_message_id'] === null) {
            return false;
        }
        if ($this->container['allow_custom_headers'] === null) {
            return false;
        }
        if ($this->container['bcc_email'] === null) {
            return false;
        }
        if ($this->container['content_transfer_encoding'] === null) {
            return false;
        }
        if ($this->container['email_notification'] === null) {
            return false;
        }
        if ($this->container['notifications_emails'] === null) {
            return false;
        }
        if ($this->container['unsubscribe_notification_emails'] === null) {
            return false;
        }
        if ($this->container['enable_ui_tooltips'] === null) {
            return false;
        }
        if ($this->container['enable_contact_features'] === null) {
            return false;
        }
        if ($this->container['logo_url'] === null) {
            return false;
        }
        if ($this->container['stale_contact_score'] === null) {
            return false;
        }
        if ($this->container['stale_contact_inactive_days'] === null) {
            return false;
        }
        if ($this->container['delivery_reason'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets enable_click_tracking
     *
     * @return bool
     */
    public function getEnableClickTracking()
    {
        return $this->container['enable_click_tracking'];
    }

    /**
     * Sets enable_click_tracking
     *
     * @param bool $enable_click_tracking True, if you want to track clicks. Otherwise, false
     *
     * @return $this
     */
    public function setEnableClickTracking($enable_click_tracking)
    {
        $this->container['enable_click_tracking'] = $enable_click_tracking;

        return $this;
    }

    /**
     * Gets enable_link_click_tracking
     *
     * @return bool
     */
    public function getEnableLinkClickTracking()
    {
        return $this->container['enable_link_click_tracking'];
    }

    /**
     * Sets enable_link_click_tracking
     *
     * @param bool $enable_link_click_tracking True, if you want to track by link tracking. Otherwise, false
     *
     * @return $this
     */
    public function setEnableLinkClickTracking($enable_link_click_tracking)
    {
        $this->container['enable_link_click_tracking'] = $enable_link_click_tracking;

        return $this;
    }

    /**
     * Gets enable_template_scripting
     *
     * @return bool
     */
    public function getEnableTemplateScripting()
    {
        return $this->container['enable_template_scripting'];
    }

    /**
     * Sets enable_template_scripting
     *
     * @param bool $enable_template_scripting True, if you want to use template scripting in your emails {{}}. Otherwise, false
     *
     * @return $this
     */
    public function setEnableTemplateScripting($enable_template_scripting)
    {
        $this->container['enable_template_scripting'] = $enable_template_scripting;

        return $this;
    }

    /**
     * Gets auto_text_format
     *
     * @return bool
     */
    public function getAutoTextFormat()
    {
        return $this->container['auto_text_format'];
    }

    /**
     * Sets auto_text_format
     *
     * @param bool $auto_text_format True, if text BODY of message should be created automatically. Otherwise, false
     *
     * @return $this
     */
    public function setAutoTextFormat($auto_text_format)
    {
        $this->container['auto_text_format'] = $auto_text_format;

        return $this;
    }

    /**
     * Gets email_notification_for_error
     *
     * @return bool
     */
    public function getEmailNotificationForError()
    {
        return $this->container['email_notification_for_error'];
    }

    /**
     * Sets email_notification_for_error
     *
     * @param bool $email_notification_for_error True, if you want bounce notifications returned. Otherwise, false
     *
     * @return $this
     */
    public function setEmailNotificationForError($email_notification_for_error)
    {
        $this->container['email_notification_for_error'] = $email_notification_for_error;

        return $this;
    }

    /**
     * Gets low_credit_notification
     *
     * @return bool
     */
    public function getLowCreditNotification()
    {
        return $this->container['low_credit_notification'];
    }

    /**
     * Sets low_credit_notification
     *
     * @param bool $low_credit_notification True, if you want to receive low credit email notifications. Otherwise, false
     *
     * @return $this
     */
    public function setLowCreditNotification($low_credit_notification)
    {
        $this->container['low_credit_notification'] = $low_credit_notification;

        return $this;
    }

    /**
     * Gets is_sub_account
     *
     * @return bool
     */
    public function getIsSubAccount()
    {
        return $this->container['is_sub_account'];
    }

    /**
     * Sets is_sub_account
     *
     * @param bool $is_sub_account True, if this account is a sub-account. Otherwise, false
     *
     * @return $this
     */
    public function setIsSubAccount($is_sub_account)
    {
        $this->container['is_sub_account'] = $is_sub_account;

        return $this;
    }

    /**
     * Gets is_owned_by_reseller
     *
     * @return bool
     */
    public function getIsOwnedByReseller()
    {
        return $this->container['is_owned_by_reseller'];
    }

    /**
     * Sets is_owned_by_reseller
     *
     * @param bool $is_owned_by_reseller True, if this account resells Elastic Email. Otherwise, false.
     *
     * @return $this
     */
    public function setIsOwnedByReseller($is_owned_by_reseller)
    {
        $this->container['is_owned_by_reseller'] = $is_owned_by_reseller;

        return $this;
    }

    /**
     * Gets enable_unsubscribe_header
     *
     * @return bool
     */
    public function getEnableUnsubscribeHeader()
    {
        return $this->container['enable_unsubscribe_header'];
    }

    /**
     * Sets enable_unsubscribe_header
     *
     * @param bool $enable_unsubscribe_header True, if you want to enable list-unsubscribe header. Otherwise, false
     *
     * @return $this
     */
    public function setEnableUnsubscribeHeader($enable_unsubscribe_header)
    {
        $this->container['enable_unsubscribe_header'] = $enable_unsubscribe_header;

        return $this;
    }

    /**
     * Gets manage_subscriptions
     *
     * @return bool
     */
    public function getManageSubscriptions()
    {
        return $this->container['manage_subscriptions'];
    }

    /**
     * Sets manage_subscriptions
     *
     * @param bool $manage_subscriptions True, if you want to display your labels on your unsubscribe form. Otherwise, false
     *
     * @return $this
     */
    public function setManageSubscriptions($manage_subscriptions)
    {
        $this->container['manage_subscriptions'] = $manage_subscriptions;

        return $this;
    }

    /**
     * Gets manage_subscribed_only
     *
     * @return bool
     */
    public function getManageSubscribedOnly()
    {
        return $this->container['manage_subscribed_only'];
    }

    /**
     * Sets manage_subscribed_only
     *
     * @param bool $manage_subscribed_only True, if you want to only display labels that the contact is subscribed to on your unsubscribe form. Otherwise, false
     *
     * @return $this
     */
    public function setManageSubscribedOnly($manage_subscribed_only)
    {
        $this->container['manage_subscribed_only'] = $manage_subscribed_only;

        return $this;
    }

    /**
     * Gets transactional_on_unsubscribe
     *
     * @return bool
     */
    public function getTransactionalOnUnsubscribe()
    {
        return $this->container['transactional_on_unsubscribe'];
    }

    /**
     * Sets transactional_on_unsubscribe
     *
     * @param bool $transactional_on_unsubscribe True, if you want to display an option for the contact to opt into transactional email only on your unsubscribe form. Otherwise, false
     *
     * @return $this
     */
    public function setTransactionalOnUnsubscribe($transactional_on_unsubscribe)
    {
        $this->container['transactional_on_unsubscribe'] = $transactional_on_unsubscribe;

        return $this;
    }

    /**
     * Gets consent_tracking_on_unsubscribe
     *
     * @return bool
     */
    public function getConsentTrackingOnUnsubscribe()
    {
        return $this->container['consent_tracking_on_unsubscribe'];
    }

    /**
     * Sets consent_tracking_on_unsubscribe
     *
     * @param bool $consent_tracking_on_unsubscribe consent_tracking_on_unsubscribe
     *
     * @return $this
     */
    public function setConsentTrackingOnUnsubscribe($consent_tracking_on_unsubscribe)
    {
        $this->container['consent_tracking_on_unsubscribe'] = $consent_tracking_on_unsubscribe;

        return $this;
    }

    /**
     * Gets preview_message_id
     *
     * @return string
     */
    public function getPreviewMessageId()
    {
        return $this->container['preview_message_id'];
    }

    /**
     * Sets preview_message_id
     *
     * @param string $preview_message_id preview_message_id
     *
     * @return $this
     */
    public function setPreviewMessageId($preview_message_id)
    {
        $this->container['preview_message_id'] = $preview_message_id;

        return $this;
    }

    /**
     * Gets allow_custom_headers
     *
     * @return bool
     */
    public function getAllowCustomHeaders()
    {
        return $this->container['allow_custom_headers'];
    }

    /**
     * Sets allow_custom_headers
     *
     * @param bool $allow_custom_headers True, if you want to apply custom headers to your emails. Otherwise, false
     *
     * @return $this
     */
    public function setAllowCustomHeaders($allow_custom_headers)
    {
        $this->container['allow_custom_headers'] = $allow_custom_headers;

        return $this;
    }

    /**
     * Gets bcc_email
     *
     * @return string
     */
    public function getBccEmail()
    {
        return $this->container['bcc_email'];
    }

    /**
     * Sets bcc_email
     *
     * @param string $bcc_email Email address to send a copy of all email to.
     *
     * @return $this
     */
    public function setBccEmail($bcc_email)
    {
        $this->container['bcc_email'] = $bcc_email;

        return $this;
    }

    /**
     * Gets content_transfer_encoding
     *
     * @return string
     */
    public function getContentTransferEncoding()
    {
        return $this->container['content_transfer_encoding'];
    }

    /**
     * Sets content_transfer_encoding
     *
     * @param string $content_transfer_encoding Type of content encoding
     *
     * @return $this
     */
    public function setContentTransferEncoding($content_transfer_encoding)
    {
        $this->container['content_transfer_encoding'] = $content_transfer_encoding;

        return $this;
    }

    /**
     * Gets email_notification
     *
     * @return string
     */
    public function getEmailNotification()
    {
        return $this->container['email_notification'];
    }

    /**
     * Sets email_notification
     *
     * @param string $email_notification True, if you want to receive bounce email notifications. Otherwise, false
     *
     * @return $this
     */
    public function setEmailNotification($email_notification)
    {
        $this->container['email_notification'] = $email_notification;

        return $this;
    }

    /**
     * Gets notifications_emails
     *
     * @return string
     */
    public function getNotificationsEmails()
    {
        return $this->container['notifications_emails'];
    }

    /**
     * Sets notifications_emails
     *
     * @param string $notifications_emails Email addresses to send a copy of all notifications from our system. Separated by semicolon
     *
     * @return $this
     */
    public function setNotificationsEmails($notifications_emails)
    {
        $this->container['notifications_emails'] = $notifications_emails;

        return $this;
    }

    /**
     * Gets unsubscribe_notification_emails
     *
     * @return string
     */
    public function getUnsubscribeNotificationEmails()
    {
        return $this->container['unsubscribe_notification_emails'];
    }

    /**
     * Sets unsubscribe_notification_emails
     *
     * @param string $unsubscribe_notification_emails Emails, separated by semicolon, to which the notification about contact unsubscribing should be sent to
     *
     * @return $this
     */
    public function setUnsubscribeNotificationEmails($unsubscribe_notification_emails)
    {
        $this->container['unsubscribe_notification_emails'] = $unsubscribe_notification_emails;

        return $this;
    }

    /**
     * Gets enable_ui_tooltips
     *
     * @return bool
     */
    public function getEnableUiTooltips()
    {
        return $this->container['enable_ui_tooltips'];
    }

    /**
     * Sets enable_ui_tooltips
     *
     * @param bool $enable_ui_tooltips True, if account has tooltips active. Otherwise, false
     *
     * @return $this
     */
    public function setEnableUiTooltips($enable_ui_tooltips)
    {
        $this->container['enable_ui_tooltips'] = $enable_ui_tooltips;

        return $this;
    }

    /**
     * Gets enable_contact_features
     *
     * @return bool
     */
    public function getEnableContactFeatures()
    {
        return $this->container['enable_contact_features'];
    }

    /**
     * Sets enable_contact_features
     *
     * @param bool $enable_contact_features True, if you want to use Contact Delivery Tools.  Otherwise, false
     *
     * @return $this
     */
    public function setEnableContactFeatures($enable_contact_features)
    {
        $this->container['enable_contact_features'] = $enable_contact_features;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url URL to your logo image.
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets stale_contact_score
     *
     * @return int
     */
    public function getStaleContactScore()
    {
        return $this->container['stale_contact_score'];
    }

    /**
     * Sets stale_contact_score
     *
     * @param int $stale_contact_score (0 means this functionality is NOT enabled) Score, depending on the number of times you have sent to a recipient, at which the given recipient should be moved to the Stale status
     *
     * @return $this
     */
    public function setStaleContactScore($stale_contact_score)
    {
        $this->container['stale_contact_score'] = $stale_contact_score;

        return $this;
    }

    /**
     * Gets stale_contact_inactive_days
     *
     * @return int
     */
    public function getStaleContactInactiveDays()
    {
        return $this->container['stale_contact_inactive_days'];
    }

    /**
     * Sets stale_contact_inactive_days
     *
     * @param int $stale_contact_inactive_days (0 means this functionality is NOT enabled) Number of days of inactivity for a contact after which the given recipient should be moved to the Stale status
     *
     * @return $this
     */
    public function setStaleContactInactiveDays($stale_contact_inactive_days)
    {
        $this->container['stale_contact_inactive_days'] = $stale_contact_inactive_days;

        return $this;
    }

    /**
     * Gets delivery_reason
     *
     * @return string
     */
    public function getDeliveryReason()
    {
        return $this->container['delivery_reason'];
    }

    /**
     * Sets delivery_reason
     *
     * @param string $delivery_reason Why your clients are receiving your emails.
     *
     * @return $this
     */
    public function setDeliveryReason($delivery_reason)
    {
        $this->container['delivery_reason'] = $delivery_reason;

        return $this;
    }

    /**
     * Gets tutorials_enabled
     *
     * @return bool
     */
    public function getTutorialsEnabled()
    {
        return $this->container['tutorials_enabled'];
    }

    /**
     * Sets tutorials_enabled
     *
     * @param bool $tutorials_enabled True, if you want to enable Dashboard Tutotials
     *
     * @return $this
     */
    public function setTutorialsEnabled($tutorials_enabled)
    {
        $this->container['tutorials_enabled'] = $tutorials_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


