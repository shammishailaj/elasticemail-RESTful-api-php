<?php
/**
 * EmailJobStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmailJobStatus Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailJobStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailJobStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'status' => 'string',
        'recipients_count' => 'int',
        'failed' => '\Swagger\Client\Model\EmailJobFailedStatus[]',
        'failed_count' => 'int',
        'sent' => 'string[]',
        'sent_count' => 'int',
        'delivered' => 'string[]',
        'delivered_count' => 'int',
        'pending' => 'string[]',
        'pending_count' => 'int',
        'opened' => 'string[]',
        'opened_count' => 'int',
        'clicked' => 'string[]',
        'clicked_count' => 'int',
        'unsubscribed' => 'string[]',
        'unsubscribed_count' => 'int',
        'abuse_reports' => 'string[]',
        'abuse_reports_count' => 'int',
        'message_i_ds' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'string',
        'status' => 'string',
        'recipients_count' => 'int32',
        'failed' => null,
        'failed_count' => 'int32',
        'sent' => 'string',
        'sent_count' => 'int32',
        'delivered' => 'string',
        'delivered_count' => 'int32',
        'pending' => 'string',
        'pending_count' => 'int32',
        'opened' => 'string',
        'opened_count' => 'int32',
        'clicked' => 'string',
        'clicked_count' => 'int32',
        'unsubscribed' => 'string',
        'unsubscribed_count' => 'int32',
        'abuse_reports' => 'string',
        'abuse_reports_count' => 'int32',
        'message_i_ds' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'status' => 'Status',
        'recipients_count' => 'RecipientsCount',
        'failed' => 'Failed',
        'failed_count' => 'FailedCount',
        'sent' => 'Sent',
        'sent_count' => 'SentCount',
        'delivered' => 'Delivered',
        'delivered_count' => 'DeliveredCount',
        'pending' => 'Pending',
        'pending_count' => 'PendingCount',
        'opened' => 'Opened',
        'opened_count' => 'OpenedCount',
        'clicked' => 'Clicked',
        'clicked_count' => 'ClickedCount',
        'unsubscribed' => 'Unsubscribed',
        'unsubscribed_count' => 'UnsubscribedCount',
        'abuse_reports' => 'AbuseReports',
        'abuse_reports_count' => 'AbuseReportsCount',
        'message_i_ds' => 'MessageIDs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'recipients_count' => 'setRecipientsCount',
        'failed' => 'setFailed',
        'failed_count' => 'setFailedCount',
        'sent' => 'setSent',
        'sent_count' => 'setSentCount',
        'delivered' => 'setDelivered',
        'delivered_count' => 'setDeliveredCount',
        'pending' => 'setPending',
        'pending_count' => 'setPendingCount',
        'opened' => 'setOpened',
        'opened_count' => 'setOpenedCount',
        'clicked' => 'setClicked',
        'clicked_count' => 'setClickedCount',
        'unsubscribed' => 'setUnsubscribed',
        'unsubscribed_count' => 'setUnsubscribedCount',
        'abuse_reports' => 'setAbuseReports',
        'abuse_reports_count' => 'setAbuseReportsCount',
        'message_i_ds' => 'setMessageIDs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'recipients_count' => 'getRecipientsCount',
        'failed' => 'getFailed',
        'failed_count' => 'getFailedCount',
        'sent' => 'getSent',
        'sent_count' => 'getSentCount',
        'delivered' => 'getDelivered',
        'delivered_count' => 'getDeliveredCount',
        'pending' => 'getPending',
        'pending_count' => 'getPendingCount',
        'opened' => 'getOpened',
        'opened_count' => 'getOpenedCount',
        'clicked' => 'getClicked',
        'clicked_count' => 'getClickedCount',
        'unsubscribed' => 'getUnsubscribed',
        'unsubscribed_count' => 'getUnsubscribedCount',
        'abuse_reports' => 'getAbuseReports',
        'abuse_reports_count' => 'getAbuseReportsCount',
        'message_i_ds' => 'getMessageIDs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['recipients_count'] = isset($data['recipients_count']) ? $data['recipients_count'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['failed_count'] = isset($data['failed_count']) ? $data['failed_count'] : null;
        $this->container['sent'] = isset($data['sent']) ? $data['sent'] : null;
        $this->container['sent_count'] = isset($data['sent_count']) ? $data['sent_count'] : null;
        $this->container['delivered'] = isset($data['delivered']) ? $data['delivered'] : null;
        $this->container['delivered_count'] = isset($data['delivered_count']) ? $data['delivered_count'] : null;
        $this->container['pending'] = isset($data['pending']) ? $data['pending'] : null;
        $this->container['pending_count'] = isset($data['pending_count']) ? $data['pending_count'] : null;
        $this->container['opened'] = isset($data['opened']) ? $data['opened'] : null;
        $this->container['opened_count'] = isset($data['opened_count']) ? $data['opened_count'] : null;
        $this->container['clicked'] = isset($data['clicked']) ? $data['clicked'] : null;
        $this->container['clicked_count'] = isset($data['clicked_count']) ? $data['clicked_count'] : null;
        $this->container['unsubscribed'] = isset($data['unsubscribed']) ? $data['unsubscribed'] : null;
        $this->container['unsubscribed_count'] = isset($data['unsubscribed_count']) ? $data['unsubscribed_count'] : null;
        $this->container['abuse_reports'] = isset($data['abuse_reports']) ? $data['abuse_reports'] : null;
        $this->container['abuse_reports_count'] = isset($data['abuse_reports_count']) ? $data['abuse_reports_count'] : null;
        $this->container['message_i_ds'] = isset($data['message_i_ds']) ? $data['message_i_ds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['recipients_count'] === null) {
            $invalidProperties[] = "'recipients_count' can't be null";
        }
        if ($this->container['failed'] === null) {
            $invalidProperties[] = "'failed' can't be null";
        }
        if ($this->container['failed_count'] === null) {
            $invalidProperties[] = "'failed_count' can't be null";
        }
        if ($this->container['sent'] === null) {
            $invalidProperties[] = "'sent' can't be null";
        }
        if ($this->container['sent_count'] === null) {
            $invalidProperties[] = "'sent_count' can't be null";
        }
        if ($this->container['delivered'] === null) {
            $invalidProperties[] = "'delivered' can't be null";
        }
        if ($this->container['delivered_count'] === null) {
            $invalidProperties[] = "'delivered_count' can't be null";
        }
        if ($this->container['pending'] === null) {
            $invalidProperties[] = "'pending' can't be null";
        }
        if ($this->container['pending_count'] === null) {
            $invalidProperties[] = "'pending_count' can't be null";
        }
        if ($this->container['opened'] === null) {
            $invalidProperties[] = "'opened' can't be null";
        }
        if ($this->container['opened_count'] === null) {
            $invalidProperties[] = "'opened_count' can't be null";
        }
        if ($this->container['clicked'] === null) {
            $invalidProperties[] = "'clicked' can't be null";
        }
        if ($this->container['clicked_count'] === null) {
            $invalidProperties[] = "'clicked_count' can't be null";
        }
        if ($this->container['unsubscribed'] === null) {
            $invalidProperties[] = "'unsubscribed' can't be null";
        }
        if ($this->container['unsubscribed_count'] === null) {
            $invalidProperties[] = "'unsubscribed_count' can't be null";
        }
        if ($this->container['abuse_reports'] === null) {
            $invalidProperties[] = "'abuse_reports' can't be null";
        }
        if ($this->container['abuse_reports_count'] === null) {
            $invalidProperties[] = "'abuse_reports_count' can't be null";
        }
        if ($this->container['message_i_ds'] === null) {
            $invalidProperties[] = "'message_i_ds' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['recipients_count'] === null) {
            return false;
        }
        if ($this->container['failed'] === null) {
            return false;
        }
        if ($this->container['failed_count'] === null) {
            return false;
        }
        if ($this->container['sent'] === null) {
            return false;
        }
        if ($this->container['sent_count'] === null) {
            return false;
        }
        if ($this->container['delivered'] === null) {
            return false;
        }
        if ($this->container['delivered_count'] === null) {
            return false;
        }
        if ($this->container['pending'] === null) {
            return false;
        }
        if ($this->container['pending_count'] === null) {
            return false;
        }
        if ($this->container['opened'] === null) {
            return false;
        }
        if ($this->container['opened_count'] === null) {
            return false;
        }
        if ($this->container['clicked'] === null) {
            return false;
        }
        if ($this->container['clicked_count'] === null) {
            return false;
        }
        if ($this->container['unsubscribed'] === null) {
            return false;
        }
        if ($this->container['unsubscribed_count'] === null) {
            return false;
        }
        if ($this->container['abuse_reports'] === null) {
            return false;
        }
        if ($this->container['abuse_reports_count'] === null) {
            return false;
        }
        if ($this->container['message_i_ds'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID number of your attachment
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Name of status: submitted, complete, in_progress
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets recipients_count
     *
     * @return int
     */
    public function getRecipientsCount()
    {
        return $this->container['recipients_count'];
    }

    /**
     * Sets recipients_count
     *
     * @param int $recipients_count recipients_count
     *
     * @return $this
     */
    public function setRecipientsCount($recipients_count)
    {
        $this->container['recipients_count'] = $recipients_count;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return \Swagger\Client\Model\EmailJobFailedStatus[]
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param \Swagger\Client\Model\EmailJobFailedStatus[] $failed failed
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets failed_count
     *
     * @return int
     */
    public function getFailedCount()
    {
        return $this->container['failed_count'];
    }

    /**
     * Sets failed_count
     *
     * @param int $failed_count Total emails failed.
     *
     * @return $this
     */
    public function setFailedCount($failed_count)
    {
        $this->container['failed_count'] = $failed_count;

        return $this;
    }

    /**
     * Gets sent
     *
     * @return string[]
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     *
     * @param string[] $sent sent
     *
     * @return $this
     */
    public function setSent($sent)
    {
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets sent_count
     *
     * @return int
     */
    public function getSentCount()
    {
        return $this->container['sent_count'];
    }

    /**
     * Sets sent_count
     *
     * @param int $sent_count Total emails sent.
     *
     * @return $this
     */
    public function setSentCount($sent_count)
    {
        $this->container['sent_count'] = $sent_count;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return string[]
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param string[] $delivered Number of delivered messages
     *
     * @return $this
     */
    public function setDelivered($delivered)
    {
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets delivered_count
     *
     * @return int
     */
    public function getDeliveredCount()
    {
        return $this->container['delivered_count'];
    }

    /**
     * Sets delivered_count
     *
     * @param int $delivered_count delivered_count
     *
     * @return $this
     */
    public function setDeliveredCount($delivered_count)
    {
        $this->container['delivered_count'] = $delivered_count;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return string[]
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param string[] $pending pending
     *
     * @return $this
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets pending_count
     *
     * @return int
     */
    public function getPendingCount()
    {
        return $this->container['pending_count'];
    }

    /**
     * Sets pending_count
     *
     * @param int $pending_count pending_count
     *
     * @return $this
     */
    public function setPendingCount($pending_count)
    {
        $this->container['pending_count'] = $pending_count;

        return $this;
    }

    /**
     * Gets opened
     *
     * @return string[]
     */
    public function getOpened()
    {
        return $this->container['opened'];
    }

    /**
     * Sets opened
     *
     * @param string[] $opened Number of opened messages
     *
     * @return $this
     */
    public function setOpened($opened)
    {
        $this->container['opened'] = $opened;

        return $this;
    }

    /**
     * Gets opened_count
     *
     * @return int
     */
    public function getOpenedCount()
    {
        return $this->container['opened_count'];
    }

    /**
     * Sets opened_count
     *
     * @param int $opened_count Total emails opened.
     *
     * @return $this
     */
    public function setOpenedCount($opened_count)
    {
        $this->container['opened_count'] = $opened_count;

        return $this;
    }

    /**
     * Gets clicked
     *
     * @return string[]
     */
    public function getClicked()
    {
        return $this->container['clicked'];
    }

    /**
     * Sets clicked
     *
     * @param string[] $clicked Number of clicked messages
     *
     * @return $this
     */
    public function setClicked($clicked)
    {
        $this->container['clicked'] = $clicked;

        return $this;
    }

    /**
     * Gets clicked_count
     *
     * @return int
     */
    public function getClickedCount()
    {
        return $this->container['clicked_count'];
    }

    /**
     * Sets clicked_count
     *
     * @param int $clicked_count Total emails clicked
     *
     * @return $this
     */
    public function setClickedCount($clicked_count)
    {
        $this->container['clicked_count'] = $clicked_count;

        return $this;
    }

    /**
     * Gets unsubscribed
     *
     * @return string[]
     */
    public function getUnsubscribed()
    {
        return $this->container['unsubscribed'];
    }

    /**
     * Sets unsubscribed
     *
     * @param string[] $unsubscribed Number of unsubscribed messages
     *
     * @return $this
     */
    public function setUnsubscribed($unsubscribed)
    {
        $this->container['unsubscribed'] = $unsubscribed;

        return $this;
    }

    /**
     * Gets unsubscribed_count
     *
     * @return int
     */
    public function getUnsubscribedCount()
    {
        return $this->container['unsubscribed_count'];
    }

    /**
     * Sets unsubscribed_count
     *
     * @param int $unsubscribed_count Total emails unsubscribed
     *
     * @return $this
     */
    public function setUnsubscribedCount($unsubscribed_count)
    {
        $this->container['unsubscribed_count'] = $unsubscribed_count;

        return $this;
    }

    /**
     * Gets abuse_reports
     *
     * @return string[]
     */
    public function getAbuseReports()
    {
        return $this->container['abuse_reports'];
    }

    /**
     * Sets abuse_reports
     *
     * @param string[] $abuse_reports abuse_reports
     *
     * @return $this
     */
    public function setAbuseReports($abuse_reports)
    {
        $this->container['abuse_reports'] = $abuse_reports;

        return $this;
    }

    /**
     * Gets abuse_reports_count
     *
     * @return int
     */
    public function getAbuseReportsCount()
    {
        return $this->container['abuse_reports_count'];
    }

    /**
     * Sets abuse_reports_count
     *
     * @param int $abuse_reports_count abuse_reports_count
     *
     * @return $this
     */
    public function setAbuseReportsCount($abuse_reports_count)
    {
        $this->container['abuse_reports_count'] = $abuse_reports_count;

        return $this;
    }

    /**
     * Gets message_i_ds
     *
     * @return string[]
     */
    public function getMessageIDs()
    {
        return $this->container['message_i_ds'];
    }

    /**
     * Sets message_i_ds
     *
     * @param string[] $message_i_ds List of all MessageIDs for this job.
     *
     * @return $this
     */
    public function setMessageIDs($message_i_ds)
    {
        $this->container['message_i_ds'] = $message_i_ds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


