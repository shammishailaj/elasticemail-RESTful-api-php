<?php
/**
 * UsageData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UsageData Class Doc Comment
 *
 * @category Class
 * @description Detailed data about daily usage
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsageData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UsageData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
        'job_count' => 'int',
        'recipient_count' => 'int',
        'inbound_count' => 'int',
        'attachment_count' => 'int',
        'attachments_size' => 'int',
        'cost' => 'float',
        'private_ip_count' => 'int',
        'private_ip_cost' => 'float',
        'sms_count' => 'int',
        'sms_cost' => 'float',
        'email_credits_cost' => 'int',
        'contact_cost' => 'float',
        'contact_count' => 'int',
        'support_cost' => 'float',
        'email_cost' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date-time',
        'job_count' => 'int32',
        'recipient_count' => 'int32',
        'inbound_count' => 'int32',
        'attachment_count' => 'int32',
        'attachments_size' => 'int64',
        'cost' => 'decimal',
        'private_ip_count' => 'int32',
        'private_ip_cost' => 'decimal',
        'sms_count' => 'int32',
        'sms_cost' => 'decimal',
        'email_credits_cost' => 'int32',
        'contact_cost' => 'decimal',
        'contact_count' => 'int64',
        'support_cost' => 'decimal',
        'email_cost' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'Date',
        'job_count' => 'JobCount',
        'recipient_count' => 'RecipientCount',
        'inbound_count' => 'InboundCount',
        'attachment_count' => 'AttachmentCount',
        'attachments_size' => 'AttachmentsSize',
        'cost' => 'Cost',
        'private_ip_count' => 'PrivateIPCount',
        'private_ip_cost' => 'PrivateIPCost',
        'sms_count' => 'SmsCount',
        'sms_cost' => 'SmsCost',
        'email_credits_cost' => 'EmailCreditsCost',
        'contact_cost' => 'ContactCost',
        'contact_count' => 'ContactCount',
        'support_cost' => 'SupportCost',
        'email_cost' => 'EmailCost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'job_count' => 'setJobCount',
        'recipient_count' => 'setRecipientCount',
        'inbound_count' => 'setInboundCount',
        'attachment_count' => 'setAttachmentCount',
        'attachments_size' => 'setAttachmentsSize',
        'cost' => 'setCost',
        'private_ip_count' => 'setPrivateIpCount',
        'private_ip_cost' => 'setPrivateIpCost',
        'sms_count' => 'setSmsCount',
        'sms_cost' => 'setSmsCost',
        'email_credits_cost' => 'setEmailCreditsCost',
        'contact_cost' => 'setContactCost',
        'contact_count' => 'setContactCount',
        'support_cost' => 'setSupportCost',
        'email_cost' => 'setEmailCost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'job_count' => 'getJobCount',
        'recipient_count' => 'getRecipientCount',
        'inbound_count' => 'getInboundCount',
        'attachment_count' => 'getAttachmentCount',
        'attachments_size' => 'getAttachmentsSize',
        'cost' => 'getCost',
        'private_ip_count' => 'getPrivateIpCount',
        'private_ip_cost' => 'getPrivateIpCost',
        'sms_count' => 'getSmsCount',
        'sms_cost' => 'getSmsCost',
        'email_credits_cost' => 'getEmailCreditsCost',
        'contact_cost' => 'getContactCost',
        'contact_count' => 'getContactCount',
        'support_cost' => 'getSupportCost',
        'email_cost' => 'getEmailCost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['job_count'] = isset($data['job_count']) ? $data['job_count'] : null;
        $this->container['recipient_count'] = isset($data['recipient_count']) ? $data['recipient_count'] : null;
        $this->container['inbound_count'] = isset($data['inbound_count']) ? $data['inbound_count'] : null;
        $this->container['attachment_count'] = isset($data['attachment_count']) ? $data['attachment_count'] : null;
        $this->container['attachments_size'] = isset($data['attachments_size']) ? $data['attachments_size'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['private_ip_count'] = isset($data['private_ip_count']) ? $data['private_ip_count'] : null;
        $this->container['private_ip_cost'] = isset($data['private_ip_cost']) ? $data['private_ip_cost'] : null;
        $this->container['sms_count'] = isset($data['sms_count']) ? $data['sms_count'] : null;
        $this->container['sms_cost'] = isset($data['sms_cost']) ? $data['sms_cost'] : null;
        $this->container['email_credits_cost'] = isset($data['email_credits_cost']) ? $data['email_credits_cost'] : null;
        $this->container['contact_cost'] = isset($data['contact_cost']) ? $data['contact_cost'] : null;
        $this->container['contact_count'] = isset($data['contact_count']) ? $data['contact_count'] : null;
        $this->container['support_cost'] = isset($data['support_cost']) ? $data['support_cost'] : null;
        $this->container['email_cost'] = isset($data['email_cost']) ? $data['email_cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['job_count'] === null) {
            $invalidProperties[] = "'job_count' can't be null";
        }
        if ($this->container['recipient_count'] === null) {
            $invalidProperties[] = "'recipient_count' can't be null";
        }
        if ($this->container['inbound_count'] === null) {
            $invalidProperties[] = "'inbound_count' can't be null";
        }
        if ($this->container['attachment_count'] === null) {
            $invalidProperties[] = "'attachment_count' can't be null";
        }
        if ($this->container['attachments_size'] === null) {
            $invalidProperties[] = "'attachments_size' can't be null";
        }
        if ($this->container['cost'] === null) {
            $invalidProperties[] = "'cost' can't be null";
        }
        if ($this->container['private_ip_cost'] === null) {
            $invalidProperties[] = "'private_ip_cost' can't be null";
        }
        if ($this->container['sms_cost'] === null) {
            $invalidProperties[] = "'sms_cost' can't be null";
        }
        if ($this->container['contact_cost'] === null) {
            $invalidProperties[] = "'contact_cost' can't be null";
        }
        if ($this->container['contact_count'] === null) {
            $invalidProperties[] = "'contact_count' can't be null";
        }
        if ($this->container['support_cost'] === null) {
            $invalidProperties[] = "'support_cost' can't be null";
        }
        if ($this->container['email_cost'] === null) {
            $invalidProperties[] = "'email_cost' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['date'] === null) {
            return false;
        }
        if ($this->container['job_count'] === null) {
            return false;
        }
        if ($this->container['recipient_count'] === null) {
            return false;
        }
        if ($this->container['inbound_count'] === null) {
            return false;
        }
        if ($this->container['attachment_count'] === null) {
            return false;
        }
        if ($this->container['attachments_size'] === null) {
            return false;
        }
        if ($this->container['cost'] === null) {
            return false;
        }
        if ($this->container['private_ip_cost'] === null) {
            return false;
        }
        if ($this->container['sms_cost'] === null) {
            return false;
        }
        if ($this->container['contact_cost'] === null) {
            return false;
        }
        if ($this->container['contact_count'] === null) {
            return false;
        }
        if ($this->container['support_cost'] === null) {
            return false;
        }
        if ($this->container['email_cost'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Date in YYYY-MM-DDThh:ii:ss format
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets job_count
     *
     * @return int
     */
    public function getJobCount()
    {
        return $this->container['job_count'];
    }

    /**
     * Sets job_count
     *
     * @param int $job_count Number of finished tasks
     *
     * @return $this
     */
    public function setJobCount($job_count)
    {
        $this->container['job_count'] = $job_count;

        return $this;
    }

    /**
     * Gets recipient_count
     *
     * @return int
     */
    public function getRecipientCount()
    {
        return $this->container['recipient_count'];
    }

    /**
     * Sets recipient_count
     *
     * @param int $recipient_count Overall number of recipients
     *
     * @return $this
     */
    public function setRecipientCount($recipient_count)
    {
        $this->container['recipient_count'] = $recipient_count;

        return $this;
    }

    /**
     * Gets inbound_count
     *
     * @return int
     */
    public function getInboundCount()
    {
        return $this->container['inbound_count'];
    }

    /**
     * Sets inbound_count
     *
     * @param int $inbound_count Number of inbound emails
     *
     * @return $this
     */
    public function setInboundCount($inbound_count)
    {
        $this->container['inbound_count'] = $inbound_count;

        return $this;
    }

    /**
     * Gets attachment_count
     *
     * @return int
     */
    public function getAttachmentCount()
    {
        return $this->container['attachment_count'];
    }

    /**
     * Sets attachment_count
     *
     * @param int $attachment_count Number of attachments sent
     *
     * @return $this
     */
    public function setAttachmentCount($attachment_count)
    {
        $this->container['attachment_count'] = $attachment_count;

        return $this;
    }

    /**
     * Gets attachments_size
     *
     * @return int
     */
    public function getAttachmentsSize()
    {
        return $this->container['attachments_size'];
    }

    /**
     * Sets attachments_size
     *
     * @param int $attachments_size Size of attachments sent
     *
     * @return $this
     */
    public function setAttachmentsSize($attachments_size)
    {
        $this->container['attachments_size'] = $attachments_size;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float $cost Calculated cost of sending
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets private_ip_count
     *
     * @return int
     */
    public function getPrivateIpCount()
    {
        return $this->container['private_ip_count'];
    }

    /**
     * Sets private_ip_count
     *
     * @param int $private_ip_count Number of pricate IPs
     *
     * @return $this
     */
    public function setPrivateIpCount($private_ip_count)
    {
        $this->container['private_ip_count'] = $private_ip_count;

        return $this;
    }

    /**
     * Gets private_ip_cost
     *
     * @return float
     */
    public function getPrivateIpCost()
    {
        return $this->container['private_ip_cost'];
    }

    /**
     * Sets private_ip_cost
     *
     * @param float $private_ip_cost private_ip_cost
     *
     * @return $this
     */
    public function setPrivateIpCost($private_ip_cost)
    {
        $this->container['private_ip_cost'] = $private_ip_cost;

        return $this;
    }

    /**
     * Gets sms_count
     *
     * @return int
     */
    public function getSmsCount()
    {
        return $this->container['sms_count'];
    }

    /**
     * Sets sms_count
     *
     * @param int $sms_count Number of SMS
     *
     * @return $this
     */
    public function setSmsCount($sms_count)
    {
        $this->container['sms_count'] = $sms_count;

        return $this;
    }

    /**
     * Gets sms_cost
     *
     * @return float
     */
    public function getSmsCost()
    {
        return $this->container['sms_cost'];
    }

    /**
     * Sets sms_cost
     *
     * @param float $sms_cost Overall cost of SMS
     *
     * @return $this
     */
    public function setSmsCost($sms_cost)
    {
        $this->container['sms_cost'] = $sms_cost;

        return $this;
    }

    /**
     * Gets email_credits_cost
     *
     * @return int
     */
    public function getEmailCreditsCost()
    {
        return $this->container['email_credits_cost'];
    }

    /**
     * Sets email_credits_cost
     *
     * @param int $email_credits_cost Cost of email credits
     *
     * @return $this
     */
    public function setEmailCreditsCost($email_credits_cost)
    {
        $this->container['email_credits_cost'] = $email_credits_cost;

        return $this;
    }

    /**
     * Gets contact_cost
     *
     * @return float
     */
    public function getContactCost()
    {
        return $this->container['contact_cost'];
    }

    /**
     * Sets contact_cost
     *
     * @param float $contact_cost Daily cost of Contact Delivery Tools
     *
     * @return $this
     */
    public function setContactCost($contact_cost)
    {
        $this->container['contact_cost'] = $contact_cost;

        return $this;
    }

    /**
     * Gets contact_count
     *
     * @return int
     */
    public function getContactCount()
    {
        return $this->container['contact_count'];
    }

    /**
     * Sets contact_count
     *
     * @param int $contact_count Number of contacts
     *
     * @return $this
     */
    public function setContactCount($contact_count)
    {
        $this->container['contact_count'] = $contact_count;

        return $this;
    }

    /**
     * Gets support_cost
     *
     * @return float
     */
    public function getSupportCost()
    {
        return $this->container['support_cost'];
    }

    /**
     * Sets support_cost
     *
     * @param float $support_cost support_cost
     *
     * @return $this
     */
    public function setSupportCost($support_cost)
    {
        $this->container['support_cost'] = $support_cost;

        return $this;
    }

    /**
     * Gets email_cost
     *
     * @return float
     */
    public function getEmailCost()
    {
        return $this->container['email_cost'];
    }

    /**
     * Sets email_cost
     *
     * @param float $email_cost email_cost
     *
     * @return $this
     */
    public function setEmailCost($email_cost)
    {
        $this->container['email_cost'] = $email_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


