<?php
/**
 * AccountOverview
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountOverview Class Doc Comment
 *
 * @category Class
 * @description Basic overview of your account
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountOverview implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_emails_sent' => 'int',
        'credit' => 'float',
        'cost_per_thousand' => 'float',
        'in_progress_count' => 'int',
        'blocked_contacts_count' => 'int',
        'reputation' => 'double',
        'contact_count' => 'int',
        'campaign_count' => 'int',
        'template_count' => 'int',
        'sub_account_count' => 'int',
        'referral_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_emails_sent' => 'int64',
        'credit' => 'decimal',
        'cost_per_thousand' => 'decimal',
        'in_progress_count' => 'int64',
        'blocked_contacts_count' => 'int64',
        'reputation' => 'double',
        'contact_count' => 'int64',
        'campaign_count' => 'int64',
        'template_count' => 'int64',
        'sub_account_count' => 'int64',
        'referral_count' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_emails_sent' => 'TotalEmailsSent',
        'credit' => 'Credit',
        'cost_per_thousand' => 'CostPerThousand',
        'in_progress_count' => 'InProgressCount',
        'blocked_contacts_count' => 'BlockedContactsCount',
        'reputation' => 'Reputation',
        'contact_count' => 'ContactCount',
        'campaign_count' => 'CampaignCount',
        'template_count' => 'TemplateCount',
        'sub_account_count' => 'SubAccountCount',
        'referral_count' => 'ReferralCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_emails_sent' => 'setTotalEmailsSent',
        'credit' => 'setCredit',
        'cost_per_thousand' => 'setCostPerThousand',
        'in_progress_count' => 'setInProgressCount',
        'blocked_contacts_count' => 'setBlockedContactsCount',
        'reputation' => 'setReputation',
        'contact_count' => 'setContactCount',
        'campaign_count' => 'setCampaignCount',
        'template_count' => 'setTemplateCount',
        'sub_account_count' => 'setSubAccountCount',
        'referral_count' => 'setReferralCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_emails_sent' => 'getTotalEmailsSent',
        'credit' => 'getCredit',
        'cost_per_thousand' => 'getCostPerThousand',
        'in_progress_count' => 'getInProgressCount',
        'blocked_contacts_count' => 'getBlockedContactsCount',
        'reputation' => 'getReputation',
        'contact_count' => 'getContactCount',
        'campaign_count' => 'getCampaignCount',
        'template_count' => 'getTemplateCount',
        'sub_account_count' => 'getSubAccountCount',
        'referral_count' => 'getReferralCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_emails_sent'] = isset($data['total_emails_sent']) ? $data['total_emails_sent'] : null;
        $this->container['credit'] = isset($data['credit']) ? $data['credit'] : null;
        $this->container['cost_per_thousand'] = isset($data['cost_per_thousand']) ? $data['cost_per_thousand'] : null;
        $this->container['in_progress_count'] = isset($data['in_progress_count']) ? $data['in_progress_count'] : null;
        $this->container['blocked_contacts_count'] = isset($data['blocked_contacts_count']) ? $data['blocked_contacts_count'] : null;
        $this->container['reputation'] = isset($data['reputation']) ? $data['reputation'] : null;
        $this->container['contact_count'] = isset($data['contact_count']) ? $data['contact_count'] : null;
        $this->container['campaign_count'] = isset($data['campaign_count']) ? $data['campaign_count'] : null;
        $this->container['template_count'] = isset($data['template_count']) ? $data['template_count'] : null;
        $this->container['sub_account_count'] = isset($data['sub_account_count']) ? $data['sub_account_count'] : null;
        $this->container['referral_count'] = isset($data['referral_count']) ? $data['referral_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['total_emails_sent'] === null) {
            $invalidProperties[] = "'total_emails_sent' can't be null";
        }
        if ($this->container['credit'] === null) {
            $invalidProperties[] = "'credit' can't be null";
        }
        if ($this->container['cost_per_thousand'] === null) {
            $invalidProperties[] = "'cost_per_thousand' can't be null";
        }
        if ($this->container['in_progress_count'] === null) {
            $invalidProperties[] = "'in_progress_count' can't be null";
        }
        if ($this->container['blocked_contacts_count'] === null) {
            $invalidProperties[] = "'blocked_contacts_count' can't be null";
        }
        if ($this->container['reputation'] === null) {
            $invalidProperties[] = "'reputation' can't be null";
        }
        if ($this->container['contact_count'] === null) {
            $invalidProperties[] = "'contact_count' can't be null";
        }
        if ($this->container['campaign_count'] === null) {
            $invalidProperties[] = "'campaign_count' can't be null";
        }
        if ($this->container['template_count'] === null) {
            $invalidProperties[] = "'template_count' can't be null";
        }
        if ($this->container['sub_account_count'] === null) {
            $invalidProperties[] = "'sub_account_count' can't be null";
        }
        if ($this->container['referral_count'] === null) {
            $invalidProperties[] = "'referral_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['total_emails_sent'] === null) {
            return false;
        }
        if ($this->container['credit'] === null) {
            return false;
        }
        if ($this->container['cost_per_thousand'] === null) {
            return false;
        }
        if ($this->container['in_progress_count'] === null) {
            return false;
        }
        if ($this->container['blocked_contacts_count'] === null) {
            return false;
        }
        if ($this->container['reputation'] === null) {
            return false;
        }
        if ($this->container['contact_count'] === null) {
            return false;
        }
        if ($this->container['campaign_count'] === null) {
            return false;
        }
        if ($this->container['template_count'] === null) {
            return false;
        }
        if ($this->container['sub_account_count'] === null) {
            return false;
        }
        if ($this->container['referral_count'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets total_emails_sent
     *
     * @return int
     */
    public function getTotalEmailsSent()
    {
        return $this->container['total_emails_sent'];
    }

    /**
     * Sets total_emails_sent
     *
     * @param int $total_emails_sent Amount of emails sent from this account
     *
     * @return $this
     */
    public function setTotalEmailsSent($total_emails_sent)
    {
        $this->container['total_emails_sent'] = $total_emails_sent;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return float
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param float $credit Amount of emails sent from this account
     *
     * @return $this
     */
    public function setCredit($credit)
    {
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets cost_per_thousand
     *
     * @return float
     */
    public function getCostPerThousand()
    {
        return $this->container['cost_per_thousand'];
    }

    /**
     * Sets cost_per_thousand
     *
     * @param float $cost_per_thousand Cost of 1000 emails
     *
     * @return $this
     */
    public function setCostPerThousand($cost_per_thousand)
    {
        $this->container['cost_per_thousand'] = $cost_per_thousand;

        return $this;
    }

    /**
     * Gets in_progress_count
     *
     * @return int
     */
    public function getInProgressCount()
    {
        return $this->container['in_progress_count'];
    }

    /**
     * Sets in_progress_count
     *
     * @param int $in_progress_count Number of messages in progress
     *
     * @return $this
     */
    public function setInProgressCount($in_progress_count)
    {
        $this->container['in_progress_count'] = $in_progress_count;

        return $this;
    }

    /**
     * Gets blocked_contacts_count
     *
     * @return int
     */
    public function getBlockedContactsCount()
    {
        return $this->container['blocked_contacts_count'];
    }

    /**
     * Sets blocked_contacts_count
     *
     * @param int $blocked_contacts_count Number of contacts currently with blocked status of Unsubscribed, Complaint, Bounced or InActive
     *
     * @return $this
     */
    public function setBlockedContactsCount($blocked_contacts_count)
    {
        $this->container['blocked_contacts_count'] = $blocked_contacts_count;

        return $this;
    }

    /**
     * Gets reputation
     *
     * @return double
     */
    public function getReputation()
    {
        return $this->container['reputation'];
    }

    /**
     * Sets reputation
     *
     * @param double $reputation Numeric reputation
     *
     * @return $this
     */
    public function setReputation($reputation)
    {
        $this->container['reputation'] = $reputation;

        return $this;
    }

    /**
     * Gets contact_count
     *
     * @return int
     */
    public function getContactCount()
    {
        return $this->container['contact_count'];
    }

    /**
     * Sets contact_count
     *
     * @param int $contact_count Number of contacts
     *
     * @return $this
     */
    public function setContactCount($contact_count)
    {
        $this->container['contact_count'] = $contact_count;

        return $this;
    }

    /**
     * Gets campaign_count
     *
     * @return int
     */
    public function getCampaignCount()
    {
        return $this->container['campaign_count'];
    }

    /**
     * Sets campaign_count
     *
     * @param int $campaign_count Number of created campaigns
     *
     * @return $this
     */
    public function setCampaignCount($campaign_count)
    {
        $this->container['campaign_count'] = $campaign_count;

        return $this;
    }

    /**
     * Gets template_count
     *
     * @return int
     */
    public function getTemplateCount()
    {
        return $this->container['template_count'];
    }

    /**
     * Sets template_count
     *
     * @param int $template_count Number of available templates
     *
     * @return $this
     */
    public function setTemplateCount($template_count)
    {
        $this->container['template_count'] = $template_count;

        return $this;
    }

    /**
     * Gets sub_account_count
     *
     * @return int
     */
    public function getSubAccountCount()
    {
        return $this->container['sub_account_count'];
    }

    /**
     * Sets sub_account_count
     *
     * @param int $sub_account_count Number of created subaccounts
     *
     * @return $this
     */
    public function setSubAccountCount($sub_account_count)
    {
        $this->container['sub_account_count'] = $sub_account_count;

        return $this;
    }

    /**
     * Gets referral_count
     *
     * @return int
     */
    public function getReferralCount()
    {
        return $this->container['referral_count'];
    }

    /**
     * Sets referral_count
     *
     * @param int $referral_count Number of active referrals
     *
     * @return $this
     */
    public function setReferralCount($referral_count)
    {
        $this->container['referral_count'] = $referral_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


