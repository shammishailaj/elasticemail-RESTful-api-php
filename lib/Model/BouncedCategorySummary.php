<?php
/**
 * BouncedCategorySummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BouncedCategorySummary Class Doc Comment
 *
 * @category Class
 * @description Summary of bounced categories, based on specified date range.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BouncedCategorySummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BouncedCategorySummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'spam' => 'int',
        'black_listed' => 'int',
        'no_mailbox' => 'int',
        'grey_listed' => 'int',
        'throttled' => 'int',
        'timeout' => 'int',
        'connection_problem' => 'int',
        'spf_problem' => 'int',
        'account_problem' => 'int',
        'dns_problem' => 'int',
        'whitelisting_problem' => 'int',
        'code_error' => 'int',
        'not_delivered' => 'int',
        'manual_cancel' => 'int',
        'connection_terminated' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'spam' => 'int64',
        'black_listed' => 'int64',
        'no_mailbox' => 'int64',
        'grey_listed' => 'int64',
        'throttled' => 'int64',
        'timeout' => 'int64',
        'connection_problem' => 'int64',
        'spf_problem' => 'int64',
        'account_problem' => 'int64',
        'dns_problem' => 'int64',
        'whitelisting_problem' => 'int64',
        'code_error' => 'int64',
        'not_delivered' => 'int64',
        'manual_cancel' => 'int64',
        'connection_terminated' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'spam' => 'Spam',
        'black_listed' => 'BlackListed',
        'no_mailbox' => 'NoMailbox',
        'grey_listed' => 'GreyListed',
        'throttled' => 'Throttled',
        'timeout' => 'Timeout',
        'connection_problem' => 'ConnectionProblem',
        'spf_problem' => 'SpfProblem',
        'account_problem' => 'AccountProblem',
        'dns_problem' => 'DnsProblem',
        'whitelisting_problem' => 'WhitelistingProblem',
        'code_error' => 'CodeError',
        'not_delivered' => 'NotDelivered',
        'manual_cancel' => 'ManualCancel',
        'connection_terminated' => 'ConnectionTerminated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'spam' => 'setSpam',
        'black_listed' => 'setBlackListed',
        'no_mailbox' => 'setNoMailbox',
        'grey_listed' => 'setGreyListed',
        'throttled' => 'setThrottled',
        'timeout' => 'setTimeout',
        'connection_problem' => 'setConnectionProblem',
        'spf_problem' => 'setSpfProblem',
        'account_problem' => 'setAccountProblem',
        'dns_problem' => 'setDnsProblem',
        'whitelisting_problem' => 'setWhitelistingProblem',
        'code_error' => 'setCodeError',
        'not_delivered' => 'setNotDelivered',
        'manual_cancel' => 'setManualCancel',
        'connection_terminated' => 'setConnectionTerminated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'spam' => 'getSpam',
        'black_listed' => 'getBlackListed',
        'no_mailbox' => 'getNoMailbox',
        'grey_listed' => 'getGreyListed',
        'throttled' => 'getThrottled',
        'timeout' => 'getTimeout',
        'connection_problem' => 'getConnectionProblem',
        'spf_problem' => 'getSpfProblem',
        'account_problem' => 'getAccountProblem',
        'dns_problem' => 'getDnsProblem',
        'whitelisting_problem' => 'getWhitelistingProblem',
        'code_error' => 'getCodeError',
        'not_delivered' => 'getNotDelivered',
        'manual_cancel' => 'getManualCancel',
        'connection_terminated' => 'getConnectionTerminated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['spam'] = isset($data['spam']) ? $data['spam'] : null;
        $this->container['black_listed'] = isset($data['black_listed']) ? $data['black_listed'] : null;
        $this->container['no_mailbox'] = isset($data['no_mailbox']) ? $data['no_mailbox'] : null;
        $this->container['grey_listed'] = isset($data['grey_listed']) ? $data['grey_listed'] : null;
        $this->container['throttled'] = isset($data['throttled']) ? $data['throttled'] : null;
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : null;
        $this->container['connection_problem'] = isset($data['connection_problem']) ? $data['connection_problem'] : null;
        $this->container['spf_problem'] = isset($data['spf_problem']) ? $data['spf_problem'] : null;
        $this->container['account_problem'] = isset($data['account_problem']) ? $data['account_problem'] : null;
        $this->container['dns_problem'] = isset($data['dns_problem']) ? $data['dns_problem'] : null;
        $this->container['whitelisting_problem'] = isset($data['whitelisting_problem']) ? $data['whitelisting_problem'] : null;
        $this->container['code_error'] = isset($data['code_error']) ? $data['code_error'] : null;
        $this->container['not_delivered'] = isset($data['not_delivered']) ? $data['not_delivered'] : null;
        $this->container['manual_cancel'] = isset($data['manual_cancel']) ? $data['manual_cancel'] : null;
        $this->container['connection_terminated'] = isset($data['connection_terminated']) ? $data['connection_terminated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['spam'] === null) {
            $invalidProperties[] = "'spam' can't be null";
        }
        if ($this->container['black_listed'] === null) {
            $invalidProperties[] = "'black_listed' can't be null";
        }
        if ($this->container['no_mailbox'] === null) {
            $invalidProperties[] = "'no_mailbox' can't be null";
        }
        if ($this->container['grey_listed'] === null) {
            $invalidProperties[] = "'grey_listed' can't be null";
        }
        if ($this->container['throttled'] === null) {
            $invalidProperties[] = "'throttled' can't be null";
        }
        if ($this->container['timeout'] === null) {
            $invalidProperties[] = "'timeout' can't be null";
        }
        if ($this->container['connection_problem'] === null) {
            $invalidProperties[] = "'connection_problem' can't be null";
        }
        if ($this->container['spf_problem'] === null) {
            $invalidProperties[] = "'spf_problem' can't be null";
        }
        if ($this->container['account_problem'] === null) {
            $invalidProperties[] = "'account_problem' can't be null";
        }
        if ($this->container['dns_problem'] === null) {
            $invalidProperties[] = "'dns_problem' can't be null";
        }
        if ($this->container['whitelisting_problem'] === null) {
            $invalidProperties[] = "'whitelisting_problem' can't be null";
        }
        if ($this->container['code_error'] === null) {
            $invalidProperties[] = "'code_error' can't be null";
        }
        if ($this->container['not_delivered'] === null) {
            $invalidProperties[] = "'not_delivered' can't be null";
        }
        if ($this->container['manual_cancel'] === null) {
            $invalidProperties[] = "'manual_cancel' can't be null";
        }
        if ($this->container['connection_terminated'] === null) {
            $invalidProperties[] = "'connection_terminated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['spam'] === null) {
            return false;
        }
        if ($this->container['black_listed'] === null) {
            return false;
        }
        if ($this->container['no_mailbox'] === null) {
            return false;
        }
        if ($this->container['grey_listed'] === null) {
            return false;
        }
        if ($this->container['throttled'] === null) {
            return false;
        }
        if ($this->container['timeout'] === null) {
            return false;
        }
        if ($this->container['connection_problem'] === null) {
            return false;
        }
        if ($this->container['spf_problem'] === null) {
            return false;
        }
        if ($this->container['account_problem'] === null) {
            return false;
        }
        if ($this->container['dns_problem'] === null) {
            return false;
        }
        if ($this->container['whitelisting_problem'] === null) {
            return false;
        }
        if ($this->container['code_error'] === null) {
            return false;
        }
        if ($this->container['not_delivered'] === null) {
            return false;
        }
        if ($this->container['manual_cancel'] === null) {
            return false;
        }
        if ($this->container['connection_terminated'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets spam
     *
     * @return int
     */
    public function getSpam()
    {
        return $this->container['spam'];
    }

    /**
     * Sets spam
     *
     * @param int $spam Number of messages marked as SPAM
     *
     * @return $this
     */
    public function setSpam($spam)
    {
        $this->container['spam'] = $spam;

        return $this;
    }

    /**
     * Gets black_listed
     *
     * @return int
     */
    public function getBlackListed()
    {
        return $this->container['black_listed'];
    }

    /**
     * Sets black_listed
     *
     * @param int $black_listed Number of blacklisted messages
     *
     * @return $this
     */
    public function setBlackListed($black_listed)
    {
        $this->container['black_listed'] = $black_listed;

        return $this;
    }

    /**
     * Gets no_mailbox
     *
     * @return int
     */
    public function getNoMailbox()
    {
        return $this->container['no_mailbox'];
    }

    /**
     * Sets no_mailbox
     *
     * @param int $no_mailbox Number of messages flagged with 'No Mailbox'
     *
     * @return $this
     */
    public function setNoMailbox($no_mailbox)
    {
        $this->container['no_mailbox'] = $no_mailbox;

        return $this;
    }

    /**
     * Gets grey_listed
     *
     * @return int
     */
    public function getGreyListed()
    {
        return $this->container['grey_listed'];
    }

    /**
     * Sets grey_listed
     *
     * @param int $grey_listed Number of messages flagged with 'Grey Listed'
     *
     * @return $this
     */
    public function setGreyListed($grey_listed)
    {
        $this->container['grey_listed'] = $grey_listed;

        return $this;
    }

    /**
     * Gets throttled
     *
     * @return int
     */
    public function getThrottled()
    {
        return $this->container['throttled'];
    }

    /**
     * Sets throttled
     *
     * @param int $throttled Number of messages flagged with 'Throttled'
     *
     * @return $this
     */
    public function setThrottled($throttled)
    {
        $this->container['throttled'] = $throttled;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return int
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int $timeout Number of messages flagged with 'Timeout'
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets connection_problem
     *
     * @return int
     */
    public function getConnectionProblem()
    {
        return $this->container['connection_problem'];
    }

    /**
     * Sets connection_problem
     *
     * @param int $connection_problem Number of messages flagged with 'Connection Problem'
     *
     * @return $this
     */
    public function setConnectionProblem($connection_problem)
    {
        $this->container['connection_problem'] = $connection_problem;

        return $this;
    }

    /**
     * Gets spf_problem
     *
     * @return int
     */
    public function getSpfProblem()
    {
        return $this->container['spf_problem'];
    }

    /**
     * Sets spf_problem
     *
     * @param int $spf_problem Number of messages flagged with 'SPF Problem'
     *
     * @return $this
     */
    public function setSpfProblem($spf_problem)
    {
        $this->container['spf_problem'] = $spf_problem;

        return $this;
    }

    /**
     * Gets account_problem
     *
     * @return int
     */
    public function getAccountProblem()
    {
        return $this->container['account_problem'];
    }

    /**
     * Sets account_problem
     *
     * @param int $account_problem Number of messages flagged with 'Account Problem'
     *
     * @return $this
     */
    public function setAccountProblem($account_problem)
    {
        $this->container['account_problem'] = $account_problem;

        return $this;
    }

    /**
     * Gets dns_problem
     *
     * @return int
     */
    public function getDnsProblem()
    {
        return $this->container['dns_problem'];
    }

    /**
     * Sets dns_problem
     *
     * @param int $dns_problem Number of messages flagged with 'DNS Problem'
     *
     * @return $this
     */
    public function setDnsProblem($dns_problem)
    {
        $this->container['dns_problem'] = $dns_problem;

        return $this;
    }

    /**
     * Gets whitelisting_problem
     *
     * @return int
     */
    public function getWhitelistingProblem()
    {
        return $this->container['whitelisting_problem'];
    }

    /**
     * Sets whitelisting_problem
     *
     * @param int $whitelisting_problem Number of messages flagged with 'WhiteListing Problem'
     *
     * @return $this
     */
    public function setWhitelistingProblem($whitelisting_problem)
    {
        $this->container['whitelisting_problem'] = $whitelisting_problem;

        return $this;
    }

    /**
     * Gets code_error
     *
     * @return int
     */
    public function getCodeError()
    {
        return $this->container['code_error'];
    }

    /**
     * Sets code_error
     *
     * @param int $code_error Number of messages flagged with 'Code Error'
     *
     * @return $this
     */
    public function setCodeError($code_error)
    {
        $this->container['code_error'] = $code_error;

        return $this;
    }

    /**
     * Gets not_delivered
     *
     * @return int
     */
    public function getNotDelivered()
    {
        return $this->container['not_delivered'];
    }

    /**
     * Sets not_delivered
     *
     * @param int $not_delivered Number of messages flagged with 'Not Delivered'
     *
     * @return $this
     */
    public function setNotDelivered($not_delivered)
    {
        $this->container['not_delivered'] = $not_delivered;

        return $this;
    }

    /**
     * Gets manual_cancel
     *
     * @return int
     */
    public function getManualCancel()
    {
        return $this->container['manual_cancel'];
    }

    /**
     * Sets manual_cancel
     *
     * @param int $manual_cancel Number of manually cancelled messages
     *
     * @return $this
     */
    public function setManualCancel($manual_cancel)
    {
        $this->container['manual_cancel'] = $manual_cancel;

        return $this;
    }

    /**
     * Gets connection_terminated
     *
     * @return int
     */
    public function getConnectionTerminated()
    {
        return $this->container['connection_terminated'];
    }

    /**
     * Sets connection_terminated
     *
     * @param int $connection_terminated Number of messages flagged with 'Connection terminated'
     *
     * @return $this
     */
    public function setConnectionTerminated($connection_terminated)
    {
        $this->container['connection_terminated'] = $connection_terminated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


