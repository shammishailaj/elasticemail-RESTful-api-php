<?php
/**
 * AccountCore
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountCore Class Doc Comment
 *
 * @category Class
 * @description Detailed information about your account
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountCore implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountCore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'public_account_id' => 'string',
        'api_key' => 'string',
        'is_sub' => 'bool',
        'is_user' => 'bool',
        'status_number' => 'int',
        'status_formatted' => 'string',
        'payment_form_url' => 'string',
        'enable_private_branding' => 'bool',
        'support_link' => 'string',
        'private_branding_url' => 'string',
        'affiliate_link' => 'string',
        'monthly_emails_sent' => 'int',
        'email_credits' => 'int',
        'price_per_email' => 'float',
        'account_payment_url' => 'string',
        'smtp' => 'string',
        'smtp_alternative' => 'string',
        'auto_credit_status' => 'string',
        'auto_credit_level' => 'float',
        'auto_credit_amount' => 'float',
        'daily_send_limit' => 'int',
        'date_created' => '\DateTime',
        'link_tracking' => 'bool',
        'content_transfer_encoding' => 'string',
        'needs_sms_verification' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'public_account_id' => 'string',
        'api_key' => 'string',
        'is_sub' => 'boolean',
        'is_user' => 'boolean',
        'status_number' => 'int32',
        'status_formatted' => 'string',
        'payment_form_url' => 'string',
        'enable_private_branding' => 'boolean',
        'support_link' => 'string',
        'private_branding_url' => 'string',
        'affiliate_link' => 'string',
        'monthly_emails_sent' => 'int64',
        'email_credits' => 'int32',
        'price_per_email' => 'decimal',
        'account_payment_url' => 'string',
        'smtp' => 'string',
        'smtp_alternative' => 'string',
        'auto_credit_status' => 'string',
        'auto_credit_level' => 'decimal',
        'auto_credit_amount' => 'decimal',
        'daily_send_limit' => 'int32',
        'date_created' => 'date-time',
        'link_tracking' => 'boolean',
        'content_transfer_encoding' => 'string',
        'needs_sms_verification' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'public_account_id' => 'PublicAccountID',
        'api_key' => 'ApiKey',
        'is_sub' => 'IsSub',
        'is_user' => 'IsUser',
        'status_number' => 'StatusNumber',
        'status_formatted' => 'StatusFormatted',
        'payment_form_url' => 'PaymentFormUrl',
        'enable_private_branding' => 'EnablePrivateBranding',
        'support_link' => 'SupportLink',
        'private_branding_url' => 'PrivateBrandingUrl',
        'affiliate_link' => 'AffiliateLink',
        'monthly_emails_sent' => 'MonthlyEmailsSent',
        'email_credits' => 'EmailCredits',
        'price_per_email' => 'PricePerEmail',
        'account_payment_url' => 'AccountPaymentUrl',
        'smtp' => 'Smtp',
        'smtp_alternative' => 'SmtpAlternative',
        'auto_credit_status' => 'AutoCreditStatus',
        'auto_credit_level' => 'AutoCreditLevel',
        'auto_credit_amount' => 'AutoCreditAmount',
        'daily_send_limit' => 'DailySendLimit',
        'date_created' => 'DateCreated',
        'link_tracking' => 'LinkTracking',
        'content_transfer_encoding' => 'ContentTransferEncoding',
        'needs_sms_verification' => 'NeedsSMSVerification'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'public_account_id' => 'setPublicAccountId',
        'api_key' => 'setApiKey',
        'is_sub' => 'setIsSub',
        'is_user' => 'setIsUser',
        'status_number' => 'setStatusNumber',
        'status_formatted' => 'setStatusFormatted',
        'payment_form_url' => 'setPaymentFormUrl',
        'enable_private_branding' => 'setEnablePrivateBranding',
        'support_link' => 'setSupportLink',
        'private_branding_url' => 'setPrivateBrandingUrl',
        'affiliate_link' => 'setAffiliateLink',
        'monthly_emails_sent' => 'setMonthlyEmailsSent',
        'email_credits' => 'setEmailCredits',
        'price_per_email' => 'setPricePerEmail',
        'account_payment_url' => 'setAccountPaymentUrl',
        'smtp' => 'setSmtp',
        'smtp_alternative' => 'setSmtpAlternative',
        'auto_credit_status' => 'setAutoCreditStatus',
        'auto_credit_level' => 'setAutoCreditLevel',
        'auto_credit_amount' => 'setAutoCreditAmount',
        'daily_send_limit' => 'setDailySendLimit',
        'date_created' => 'setDateCreated',
        'link_tracking' => 'setLinkTracking',
        'content_transfer_encoding' => 'setContentTransferEncoding',
        'needs_sms_verification' => 'setNeedsSmsVerification'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'public_account_id' => 'getPublicAccountId',
        'api_key' => 'getApiKey',
        'is_sub' => 'getIsSub',
        'is_user' => 'getIsUser',
        'status_number' => 'getStatusNumber',
        'status_formatted' => 'getStatusFormatted',
        'payment_form_url' => 'getPaymentFormUrl',
        'enable_private_branding' => 'getEnablePrivateBranding',
        'support_link' => 'getSupportLink',
        'private_branding_url' => 'getPrivateBrandingUrl',
        'affiliate_link' => 'getAffiliateLink',
        'monthly_emails_sent' => 'getMonthlyEmailsSent',
        'email_credits' => 'getEmailCredits',
        'price_per_email' => 'getPricePerEmail',
        'account_payment_url' => 'getAccountPaymentUrl',
        'smtp' => 'getSmtp',
        'smtp_alternative' => 'getSmtpAlternative',
        'auto_credit_status' => 'getAutoCreditStatus',
        'auto_credit_level' => 'getAutoCreditLevel',
        'auto_credit_amount' => 'getAutoCreditAmount',
        'daily_send_limit' => 'getDailySendLimit',
        'date_created' => 'getDateCreated',
        'link_tracking' => 'getLinkTracking',
        'content_transfer_encoding' => 'getContentTransferEncoding',
        'needs_sms_verification' => 'getNeedsSmsVerification'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['public_account_id'] = isset($data['public_account_id']) ? $data['public_account_id'] : null;
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['is_sub'] = isset($data['is_sub']) ? $data['is_sub'] : null;
        $this->container['is_user'] = isset($data['is_user']) ? $data['is_user'] : null;
        $this->container['status_number'] = isset($data['status_number']) ? $data['status_number'] : null;
        $this->container['status_formatted'] = isset($data['status_formatted']) ? $data['status_formatted'] : null;
        $this->container['payment_form_url'] = isset($data['payment_form_url']) ? $data['payment_form_url'] : null;
        $this->container['enable_private_branding'] = isset($data['enable_private_branding']) ? $data['enable_private_branding'] : null;
        $this->container['support_link'] = isset($data['support_link']) ? $data['support_link'] : null;
        $this->container['private_branding_url'] = isset($data['private_branding_url']) ? $data['private_branding_url'] : null;
        $this->container['affiliate_link'] = isset($data['affiliate_link']) ? $data['affiliate_link'] : null;
        $this->container['monthly_emails_sent'] = isset($data['monthly_emails_sent']) ? $data['monthly_emails_sent'] : null;
        $this->container['email_credits'] = isset($data['email_credits']) ? $data['email_credits'] : null;
        $this->container['price_per_email'] = isset($data['price_per_email']) ? $data['price_per_email'] : null;
        $this->container['account_payment_url'] = isset($data['account_payment_url']) ? $data['account_payment_url'] : null;
        $this->container['smtp'] = isset($data['smtp']) ? $data['smtp'] : null;
        $this->container['smtp_alternative'] = isset($data['smtp_alternative']) ? $data['smtp_alternative'] : null;
        $this->container['auto_credit_status'] = isset($data['auto_credit_status']) ? $data['auto_credit_status'] : null;
        $this->container['auto_credit_level'] = isset($data['auto_credit_level']) ? $data['auto_credit_level'] : null;
        $this->container['auto_credit_amount'] = isset($data['auto_credit_amount']) ? $data['auto_credit_amount'] : null;
        $this->container['daily_send_limit'] = isset($data['daily_send_limit']) ? $data['daily_send_limit'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['link_tracking'] = isset($data['link_tracking']) ? $data['link_tracking'] : null;
        $this->container['content_transfer_encoding'] = isset($data['content_transfer_encoding']) ? $data['content_transfer_encoding'] : null;
        $this->container['needs_sms_verification'] = isset($data['needs_sms_verification']) ? $data['needs_sms_verification'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['public_account_id'] === null) {
            $invalidProperties[] = "'public_account_id' can't be null";
        }
        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ($this->container['is_sub'] === null) {
            $invalidProperties[] = "'is_sub' can't be null";
        }
        if ($this->container['is_user'] === null) {
            $invalidProperties[] = "'is_user' can't be null";
        }
        if ($this->container['status_number'] === null) {
            $invalidProperties[] = "'status_number' can't be null";
        }
        if ($this->container['status_formatted'] === null) {
            $invalidProperties[] = "'status_formatted' can't be null";
        }
        if ($this->container['payment_form_url'] === null) {
            $invalidProperties[] = "'payment_form_url' can't be null";
        }
        if ($this->container['enable_private_branding'] === null) {
            $invalidProperties[] = "'enable_private_branding' can't be null";
        }
        if ($this->container['support_link'] === null) {
            $invalidProperties[] = "'support_link' can't be null";
        }
        if ($this->container['private_branding_url'] === null) {
            $invalidProperties[] = "'private_branding_url' can't be null";
        }
        if ($this->container['affiliate_link'] === null) {
            $invalidProperties[] = "'affiliate_link' can't be null";
        }
        if ($this->container['email_credits'] === null) {
            $invalidProperties[] = "'email_credits' can't be null";
        }
        if ($this->container['price_per_email'] === null) {
            $invalidProperties[] = "'price_per_email' can't be null";
        }
        if ($this->container['account_payment_url'] === null) {
            $invalidProperties[] = "'account_payment_url' can't be null";
        }
        if ($this->container['smtp'] === null) {
            $invalidProperties[] = "'smtp' can't be null";
        }
        if ($this->container['smtp_alternative'] === null) {
            $invalidProperties[] = "'smtp_alternative' can't be null";
        }
        if ($this->container['auto_credit_status'] === null) {
            $invalidProperties[] = "'auto_credit_status' can't be null";
        }
        if ($this->container['auto_credit_level'] === null) {
            $invalidProperties[] = "'auto_credit_level' can't be null";
        }
        if ($this->container['auto_credit_amount'] === null) {
            $invalidProperties[] = "'auto_credit_amount' can't be null";
        }
        if ($this->container['daily_send_limit'] === null) {
            $invalidProperties[] = "'daily_send_limit' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['link_tracking'] === null) {
            $invalidProperties[] = "'link_tracking' can't be null";
        }
        if ($this->container['content_transfer_encoding'] === null) {
            $invalidProperties[] = "'content_transfer_encoding' can't be null";
        }
        if ($this->container['needs_sms_verification'] === null) {
            $invalidProperties[] = "'needs_sms_verification' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['public_account_id'] === null) {
            return false;
        }
        if ($this->container['api_key'] === null) {
            return false;
        }
        if ($this->container['is_sub'] === null) {
            return false;
        }
        if ($this->container['is_user'] === null) {
            return false;
        }
        if ($this->container['status_number'] === null) {
            return false;
        }
        if ($this->container['status_formatted'] === null) {
            return false;
        }
        if ($this->container['payment_form_url'] === null) {
            return false;
        }
        if ($this->container['enable_private_branding'] === null) {
            return false;
        }
        if ($this->container['support_link'] === null) {
            return false;
        }
        if ($this->container['private_branding_url'] === null) {
            return false;
        }
        if ($this->container['affiliate_link'] === null) {
            return false;
        }
        if ($this->container['email_credits'] === null) {
            return false;
        }
        if ($this->container['price_per_email'] === null) {
            return false;
        }
        if ($this->container['account_payment_url'] === null) {
            return false;
        }
        if ($this->container['smtp'] === null) {
            return false;
        }
        if ($this->container['smtp_alternative'] === null) {
            return false;
        }
        if ($this->container['auto_credit_status'] === null) {
            return false;
        }
        if ($this->container['auto_credit_level'] === null) {
            return false;
        }
        if ($this->container['auto_credit_amount'] === null) {
            return false;
        }
        if ($this->container['daily_send_limit'] === null) {
            return false;
        }
        if ($this->container['date_created'] === null) {
            return false;
        }
        if ($this->container['link_tracking'] === null) {
            return false;
        }
        if ($this->container['content_transfer_encoding'] === null) {
            return false;
        }
        if ($this->container['needs_sms_verification'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets public_account_id
     *
     * @return string
     */
    public function getPublicAccountId()
    {
        return $this->container['public_account_id'];
    }

    /**
     * Sets public_account_id
     *
     * @param string $public_account_id Public key for limited access to your account such as contact/add so you can use it safely on public websites.
     *
     * @return $this
     */
    public function setPublicAccountId($public_account_id)
    {
        $this->container['public_account_id'] = $public_account_id;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key ApiKey that gives you access to our SMTP and HTTP API's.
     *
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets is_sub
     *
     * @return bool
     */
    public function getIsSub()
    {
        return $this->container['is_sub'];
    }

    /**
     * Sets is_sub
     *
     * @param bool $is_sub True, if account is a subaccount. Otherwise, false
     *
     * @return $this
     */
    public function setIsSub($is_sub)
    {
        $this->container['is_sub'] = $is_sub;

        return $this;
    }

    /**
     * Gets is_user
     *
     * @return bool
     */
    public function getIsUser()
    {
        return $this->container['is_user'];
    }

    /**
     * Sets is_user
     *
     * @param bool $is_user is_user
     *
     * @return $this
     */
    public function setIsUser($is_user)
    {
        $this->container['is_user'] = $is_user;

        return $this;
    }

    /**
     * Gets status_number
     *
     * @return int
     */
    public function getStatusNumber()
    {
        return $this->container['status_number'];
    }

    /**
     * Sets status_number
     *
     * @param int $status_number Number of status: 1 - Active
     *
     * @return $this
     */
    public function setStatusNumber($status_number)
    {
        $this->container['status_number'] = $status_number;

        return $this;
    }

    /**
     * Gets status_formatted
     *
     * @return string
     */
    public function getStatusFormatted()
    {
        return $this->container['status_formatted'];
    }

    /**
     * Sets status_formatted
     *
     * @param string $status_formatted Account status: Active
     *
     * @return $this
     */
    public function setStatusFormatted($status_formatted)
    {
        $this->container['status_formatted'] = $status_formatted;

        return $this;
    }

    /**
     * Gets payment_form_url
     *
     * @return string
     */
    public function getPaymentFormUrl()
    {
        return $this->container['payment_form_url'];
    }

    /**
     * Sets payment_form_url
     *
     * @param string $payment_form_url URL form for payments.
     *
     * @return $this
     */
    public function setPaymentFormUrl($payment_form_url)
    {
        $this->container['payment_form_url'] = $payment_form_url;

        return $this;
    }

    /**
     * Gets enable_private_branding
     *
     * @return bool
     */
    public function getEnablePrivateBranding()
    {
        return $this->container['enable_private_branding'];
    }

    /**
     * Sets enable_private_branding
     *
     * @param bool $enable_private_branding True: Turn on or off ability to send mails under your brand. Otherwise, false
     *
     * @return $this
     */
    public function setEnablePrivateBranding($enable_private_branding)
    {
        $this->container['enable_private_branding'] = $enable_private_branding;

        return $this;
    }

    /**
     * Gets support_link
     *
     * @return string
     */
    public function getSupportLink()
    {
        return $this->container['support_link'];
    }

    /**
     * Sets support_link
     *
     * @param string $support_link Address to your support.
     *
     * @return $this
     */
    public function setSupportLink($support_link)
    {
        $this->container['support_link'] = $support_link;

        return $this;
    }

    /**
     * Gets private_branding_url
     *
     * @return string
     */
    public function getPrivateBrandingUrl()
    {
        return $this->container['private_branding_url'];
    }

    /**
     * Sets private_branding_url
     *
     * @param string $private_branding_url Subdomain for your rebranded service
     *
     * @return $this
     */
    public function setPrivateBrandingUrl($private_branding_url)
    {
        $this->container['private_branding_url'] = $private_branding_url;

        return $this;
    }

    /**
     * Gets affiliate_link
     *
     * @return string
     */
    public function getAffiliateLink()
    {
        return $this->container['affiliate_link'];
    }

    /**
     * Sets affiliate_link
     *
     * @param string $affiliate_link URL for affiliating.
     *
     * @return $this
     */
    public function setAffiliateLink($affiliate_link)
    {
        $this->container['affiliate_link'] = $affiliate_link;

        return $this;
    }

    /**
     * Gets monthly_emails_sent
     *
     * @return int
     */
    public function getMonthlyEmailsSent()
    {
        return $this->container['monthly_emails_sent'];
    }

    /**
     * Sets monthly_emails_sent
     *
     * @param int $monthly_emails_sent Amount of emails sent from this account
     *
     * @return $this
     */
    public function setMonthlyEmailsSent($monthly_emails_sent)
    {
        $this->container['monthly_emails_sent'] = $monthly_emails_sent;

        return $this;
    }

    /**
     * Gets email_credits
     *
     * @return int
     */
    public function getEmailCredits()
    {
        return $this->container['email_credits'];
    }

    /**
     * Sets email_credits
     *
     * @param int $email_credits Amount of email credits
     *
     * @return $this
     */
    public function setEmailCredits($email_credits)
    {
        $this->container['email_credits'] = $email_credits;

        return $this;
    }

    /**
     * Gets price_per_email
     *
     * @return float
     */
    public function getPricePerEmail()
    {
        return $this->container['price_per_email'];
    }

    /**
     * Sets price_per_email
     *
     * @param float $price_per_email Amount of emails sent from this account
     *
     * @return $this
     */
    public function setPricePerEmail($price_per_email)
    {
        $this->container['price_per_email'] = $price_per_email;

        return $this;
    }

    /**
     * Gets account_payment_url
     *
     * @return string
     */
    public function getAccountPaymentUrl()
    {
        return $this->container['account_payment_url'];
    }

    /**
     * Sets account_payment_url
     *
     * @param string $account_payment_url URL for making payments.
     *
     * @return $this
     */
    public function setAccountPaymentUrl($account_payment_url)
    {
        $this->container['account_payment_url'] = $account_payment_url;

        return $this;
    }

    /**
     * Gets smtp
     *
     * @return string
     */
    public function getSmtp()
    {
        return $this->container['smtp'];
    }

    /**
     * Sets smtp
     *
     * @param string $smtp Address of SMTP server.
     *
     * @return $this
     */
    public function setSmtp($smtp)
    {
        $this->container['smtp'] = $smtp;

        return $this;
    }

    /**
     * Gets smtp_alternative
     *
     * @return string
     */
    public function getSmtpAlternative()
    {
        return $this->container['smtp_alternative'];
    }

    /**
     * Sets smtp_alternative
     *
     * @param string $smtp_alternative Address of alternative SMTP server.
     *
     * @return $this
     */
    public function setSmtpAlternative($smtp_alternative)
    {
        $this->container['smtp_alternative'] = $smtp_alternative;

        return $this;
    }

    /**
     * Gets auto_credit_status
     *
     * @return string
     */
    public function getAutoCreditStatus()
    {
        return $this->container['auto_credit_status'];
    }

    /**
     * Sets auto_credit_status
     *
     * @param string $auto_credit_status Status of automatic payments configuration.
     *
     * @return $this
     */
    public function setAutoCreditStatus($auto_credit_status)
    {
        $this->container['auto_credit_status'] = $auto_credit_status;

        return $this;
    }

    /**
     * Gets auto_credit_level
     *
     * @return float
     */
    public function getAutoCreditLevel()
    {
        return $this->container['auto_credit_level'];
    }

    /**
     * Sets auto_credit_level
     *
     * @param float $auto_credit_level When AutoCreditStatus is Enabled, the credit level that triggers the credit to be recharged.
     *
     * @return $this
     */
    public function setAutoCreditLevel($auto_credit_level)
    {
        $this->container['auto_credit_level'] = $auto_credit_level;

        return $this;
    }

    /**
     * Gets auto_credit_amount
     *
     * @return float
     */
    public function getAutoCreditAmount()
    {
        return $this->container['auto_credit_amount'];
    }

    /**
     * Sets auto_credit_amount
     *
     * @param float $auto_credit_amount When AutoCreditStatus is Enabled, the amount of credit to be recharged.
     *
     * @return $this
     */
    public function setAutoCreditAmount($auto_credit_amount)
    {
        $this->container['auto_credit_amount'] = $auto_credit_amount;

        return $this;
    }

    /**
     * Gets daily_send_limit
     *
     * @return int
     */
    public function getDailySendLimit()
    {
        return $this->container['daily_send_limit'];
    }

    /**
     * Sets daily_send_limit
     *
     * @param int $daily_send_limit Amount of emails account can send daily
     *
     * @return $this
     */
    public function setDailySendLimit($daily_send_limit)
    {
        $this->container['daily_send_limit'] = $daily_send_limit;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created Creation date.
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets link_tracking
     *
     * @return bool
     */
    public function getLinkTracking()
    {
        return $this->container['link_tracking'];
    }

    /**
     * Sets link_tracking
     *
     * @param bool $link_tracking True, if you have enabled link tracking. Otherwise, false
     *
     * @return $this
     */
    public function setLinkTracking($link_tracking)
    {
        $this->container['link_tracking'] = $link_tracking;

        return $this;
    }

    /**
     * Gets content_transfer_encoding
     *
     * @return string
     */
    public function getContentTransferEncoding()
    {
        return $this->container['content_transfer_encoding'];
    }

    /**
     * Sets content_transfer_encoding
     *
     * @param string $content_transfer_encoding Type of content encoding
     *
     * @return $this
     */
    public function setContentTransferEncoding($content_transfer_encoding)
    {
        $this->container['content_transfer_encoding'] = $content_transfer_encoding;

        return $this;
    }

    /**
     * Gets needs_sms_verification
     *
     * @return bool
     */
    public function getNeedsSmsVerification()
    {
        return $this->container['needs_sms_verification'];
    }

    /**
     * Sets needs_sms_verification
     *
     * @param bool $needs_sms_verification needs_sms_verification
     *
     * @return $this
     */
    public function setNeedsSmsVerification($needs_sms_verification)
    {
        $this->container['needs_sms_verification'] = $needs_sms_verification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


