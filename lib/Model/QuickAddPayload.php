<?php
/**
 * QuickAddPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * QuickAddPayload Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuickAddPayload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QuickAddPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contacts' => '\Swagger\Client\Model\ContactPayload[]',
        'list_name' => 'string',
        'status' => 'string',
        'notify_email' => 'string',
        'consent_date' => '\DateTime',
        'consent_ip' => 'string',
        'consent_tracking' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contacts' => null,
        'list_name' => 'string',
        'status' => null,
        'notify_email' => 'string',
        'consent_date' => 'date-time',
        'consent_ip' => 'string',
        'consent_tracking' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contacts' => 'Contacts',
        'list_name' => 'ListName',
        'status' => 'Status',
        'notify_email' => 'NotifyEmail',
        'consent_date' => 'ConsentDate',
        'consent_ip' => 'ConsentIP',
        'consent_tracking' => 'ConsentTracking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contacts' => 'setContacts',
        'list_name' => 'setListName',
        'status' => 'setStatus',
        'notify_email' => 'setNotifyEmail',
        'consent_date' => 'setConsentDate',
        'consent_ip' => 'setConsentIp',
        'consent_tracking' => 'setConsentTracking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contacts' => 'getContacts',
        'list_name' => 'getListName',
        'status' => 'getStatus',
        'notify_email' => 'getNotifyEmail',
        'consent_date' => 'getConsentDate',
        'consent_ip' => 'getConsentIp',
        'consent_tracking' => 'getConsentTracking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_TRANSACTIONAL = 'Transactional';
    const STATUS_ENGAGED = 'Engaged';
    const STATUS_ACTIVE = 'Active';
    const STATUS_BOUNCED = 'Bounced';
    const STATUS_UNSUBSCRIBED = 'Unsubscribed';
    const STATUS_ABUSE = 'Abuse';
    const STATUS_INACTIVE = 'Inactive';
    const STATUS_STALE = 'Stale';
    const STATUS_NOT_CONFIRMED = 'NotConfirmed';
    const CONSENT_TRACKING_UNKNOWN = 'Unknown';
    const CONSENT_TRACKING_ALLOW = 'Allow';
    const CONSENT_TRACKING_DENY = 'Deny';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_TRANSACTIONAL,
            self::STATUS_ENGAGED,
            self::STATUS_ACTIVE,
            self::STATUS_BOUNCED,
            self::STATUS_UNSUBSCRIBED,
            self::STATUS_ABUSE,
            self::STATUS_INACTIVE,
            self::STATUS_STALE,
            self::STATUS_NOT_CONFIRMED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConsentTrackingAllowableValues()
    {
        return [
            self::CONSENT_TRACKING_UNKNOWN,
            self::CONSENT_TRACKING_ALLOW,
            self::CONSENT_TRACKING_DENY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['list_name'] = isset($data['list_name']) ? $data['list_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['notify_email'] = isset($data['notify_email']) ? $data['notify_email'] : null;
        $this->container['consent_date'] = isset($data['consent_date']) ? $data['consent_date'] : null;
        $this->container['consent_ip'] = isset($data['consent_ip']) ? $data['consent_ip'] : null;
        $this->container['consent_tracking'] = isset($data['consent_tracking']) ? $data['consent_tracking'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contacts'] === null) {
            $invalidProperties[] = "'contacts' can't be null";
        }
        if ($this->container['list_name'] === null) {
            $invalidProperties[] = "'list_name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['notify_email'] === null) {
            $invalidProperties[] = "'notify_email' can't be null";
        }
        if ($this->container['consent_ip'] === null) {
            $invalidProperties[] = "'consent_ip' can't be null";
        }
        if ($this->container['consent_tracking'] === null) {
            $invalidProperties[] = "'consent_tracking' can't be null";
        }
        $allowedValues = $this->getConsentTrackingAllowableValues();
        if (!in_array($this->container['consent_tracking'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'consent_tracking', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['contacts'] === null) {
            return false;
        }
        if ($this->container['list_name'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        if ($this->container['notify_email'] === null) {
            return false;
        }
        if ($this->container['consent_ip'] === null) {
            return false;
        }
        if ($this->container['consent_tracking'] === null) {
            return false;
        }
        $allowedValues = $this->getConsentTrackingAllowableValues();
        if (!in_array($this->container['consent_tracking'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets contacts
     *
     * @return \Swagger\Client\Model\ContactPayload[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Swagger\Client\Model\ContactPayload[] $contacts contacts
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets list_name
     *
     * @return string
     */
    public function getListName()
    {
        return $this->container['list_name'];
    }

    /**
     * Sets list_name
     *
     * @param string $list_name Name of your list.
     *
     * @return $this
     */
    public function setListName($list_name)
    {
        $this->container['list_name'] = $list_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Name of status: Active, Engaged, Inactive, Abuse, Bounced, Unsubscribed.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets notify_email
     *
     * @return string
     */
    public function getNotifyEmail()
    {
        return $this->container['notify_email'];
    }

    /**
     * Sets notify_email
     *
     * @param string $notify_email Emails, separated by semicolon, to which the notification about contact subscribing should be sent to
     *
     * @return $this
     */
    public function setNotifyEmail($notify_email)
    {
        $this->container['notify_email'] = $notify_email;

        return $this;
    }

    /**
     * Gets consent_date
     *
     * @return \DateTime
     */
    public function getConsentDate()
    {
        return $this->container['consent_date'];
    }

    /**
     * Sets consent_date
     *
     * @param \DateTime $consent_date Date of consent to send this contact(s) your email. If not provided current date is used for consent.
     *
     * @return $this
     */
    public function setConsentDate($consent_date)
    {
        $this->container['consent_date'] = $consent_date;

        return $this;
    }

    /**
     * Gets consent_ip
     *
     * @return string
     */
    public function getConsentIp()
    {
        return $this->container['consent_ip'];
    }

    /**
     * Sets consent_ip
     *
     * @param string $consent_ip IP address of consent to send this contact(s) your email. If not provided your current public IP address is used for consent.
     *
     * @return $this
     */
    public function setConsentIp($consent_ip)
    {
        $this->container['consent_ip'] = $consent_ip;

        return $this;
    }

    /**
     * Gets consent_tracking
     *
     * @return string
     */
    public function getConsentTracking()
    {
        return $this->container['consent_tracking'];
    }

    /**
     * Sets consent_tracking
     *
     * @param string $consent_tracking consent_tracking
     *
     * @return $this
     */
    public function setConsentTracking($consent_tracking)
    {
        $allowedValues = $this->getConsentTrackingAllowableValues();
        if (!in_array($consent_tracking, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'consent_tracking', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['consent_tracking'] = $consent_tracking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


