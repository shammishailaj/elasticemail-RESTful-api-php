<?php
/**
 * ContactUnsubscribeReasonCounts
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactUnsubscribeReasonCounts Class Doc Comment
 *
 * @category Class
 * @description Number of Unsubscribed or Complaint Contacts, grouped by Unsubscribe Reason;
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactUnsubscribeReasonCounts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactUnsubscribeReasonCounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unknown' => 'int',
        'no_longer_want' => 'int',
        'irrelevant_content' => 'int',
        'too_frequent' => 'int',
        'never_consented' => 'int',
        'deceptive_content' => 'int',
        'abuse_reported' => 'int',
        'third_party' => 'int',
        'list_unsubscribe' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unknown' => 'int64',
        'no_longer_want' => 'int64',
        'irrelevant_content' => 'int64',
        'too_frequent' => 'int64',
        'never_consented' => 'int64',
        'deceptive_content' => 'int64',
        'abuse_reported' => 'int64',
        'third_party' => 'int64',
        'list_unsubscribe' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unknown' => 'Unknown',
        'no_longer_want' => 'NoLongerWant',
        'irrelevant_content' => 'IrrelevantContent',
        'too_frequent' => 'TooFrequent',
        'never_consented' => 'NeverConsented',
        'deceptive_content' => 'DeceptiveContent',
        'abuse_reported' => 'AbuseReported',
        'third_party' => 'ThirdParty',
        'list_unsubscribe' => 'ListUnsubscribe'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unknown' => 'setUnknown',
        'no_longer_want' => 'setNoLongerWant',
        'irrelevant_content' => 'setIrrelevantContent',
        'too_frequent' => 'setTooFrequent',
        'never_consented' => 'setNeverConsented',
        'deceptive_content' => 'setDeceptiveContent',
        'abuse_reported' => 'setAbuseReported',
        'third_party' => 'setThirdParty',
        'list_unsubscribe' => 'setListUnsubscribe'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unknown' => 'getUnknown',
        'no_longer_want' => 'getNoLongerWant',
        'irrelevant_content' => 'getIrrelevantContent',
        'too_frequent' => 'getTooFrequent',
        'never_consented' => 'getNeverConsented',
        'deceptive_content' => 'getDeceptiveContent',
        'abuse_reported' => 'getAbuseReported',
        'third_party' => 'getThirdParty',
        'list_unsubscribe' => 'getListUnsubscribe'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unknown'] = isset($data['unknown']) ? $data['unknown'] : null;
        $this->container['no_longer_want'] = isset($data['no_longer_want']) ? $data['no_longer_want'] : null;
        $this->container['irrelevant_content'] = isset($data['irrelevant_content']) ? $data['irrelevant_content'] : null;
        $this->container['too_frequent'] = isset($data['too_frequent']) ? $data['too_frequent'] : null;
        $this->container['never_consented'] = isset($data['never_consented']) ? $data['never_consented'] : null;
        $this->container['deceptive_content'] = isset($data['deceptive_content']) ? $data['deceptive_content'] : null;
        $this->container['abuse_reported'] = isset($data['abuse_reported']) ? $data['abuse_reported'] : null;
        $this->container['third_party'] = isset($data['third_party']) ? $data['third_party'] : null;
        $this->container['list_unsubscribe'] = isset($data['list_unsubscribe']) ? $data['list_unsubscribe'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unknown'] === null) {
            $invalidProperties[] = "'unknown' can't be null";
        }
        if ($this->container['no_longer_want'] === null) {
            $invalidProperties[] = "'no_longer_want' can't be null";
        }
        if ($this->container['irrelevant_content'] === null) {
            $invalidProperties[] = "'irrelevant_content' can't be null";
        }
        if ($this->container['too_frequent'] === null) {
            $invalidProperties[] = "'too_frequent' can't be null";
        }
        if ($this->container['never_consented'] === null) {
            $invalidProperties[] = "'never_consented' can't be null";
        }
        if ($this->container['deceptive_content'] === null) {
            $invalidProperties[] = "'deceptive_content' can't be null";
        }
        if ($this->container['abuse_reported'] === null) {
            $invalidProperties[] = "'abuse_reported' can't be null";
        }
        if ($this->container['third_party'] === null) {
            $invalidProperties[] = "'third_party' can't be null";
        }
        if ($this->container['list_unsubscribe'] === null) {
            $invalidProperties[] = "'list_unsubscribe' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['unknown'] === null) {
            return false;
        }
        if ($this->container['no_longer_want'] === null) {
            return false;
        }
        if ($this->container['irrelevant_content'] === null) {
            return false;
        }
        if ($this->container['too_frequent'] === null) {
            return false;
        }
        if ($this->container['never_consented'] === null) {
            return false;
        }
        if ($this->container['deceptive_content'] === null) {
            return false;
        }
        if ($this->container['abuse_reported'] === null) {
            return false;
        }
        if ($this->container['third_party'] === null) {
            return false;
        }
        if ($this->container['list_unsubscribe'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets unknown
     *
     * @return int
     */
    public function getUnknown()
    {
        return $this->container['unknown'];
    }

    /**
     * Sets unknown
     *
     * @param int $unknown unknown
     *
     * @return $this
     */
    public function setUnknown($unknown)
    {
        $this->container['unknown'] = $unknown;

        return $this;
    }

    /**
     * Gets no_longer_want
     *
     * @return int
     */
    public function getNoLongerWant()
    {
        return $this->container['no_longer_want'];
    }

    /**
     * Sets no_longer_want
     *
     * @param int $no_longer_want no_longer_want
     *
     * @return $this
     */
    public function setNoLongerWant($no_longer_want)
    {
        $this->container['no_longer_want'] = $no_longer_want;

        return $this;
    }

    /**
     * Gets irrelevant_content
     *
     * @return int
     */
    public function getIrrelevantContent()
    {
        return $this->container['irrelevant_content'];
    }

    /**
     * Sets irrelevant_content
     *
     * @param int $irrelevant_content irrelevant_content
     *
     * @return $this
     */
    public function setIrrelevantContent($irrelevant_content)
    {
        $this->container['irrelevant_content'] = $irrelevant_content;

        return $this;
    }

    /**
     * Gets too_frequent
     *
     * @return int
     */
    public function getTooFrequent()
    {
        return $this->container['too_frequent'];
    }

    /**
     * Sets too_frequent
     *
     * @param int $too_frequent too_frequent
     *
     * @return $this
     */
    public function setTooFrequent($too_frequent)
    {
        $this->container['too_frequent'] = $too_frequent;

        return $this;
    }

    /**
     * Gets never_consented
     *
     * @return int
     */
    public function getNeverConsented()
    {
        return $this->container['never_consented'];
    }

    /**
     * Sets never_consented
     *
     * @param int $never_consented never_consented
     *
     * @return $this
     */
    public function setNeverConsented($never_consented)
    {
        $this->container['never_consented'] = $never_consented;

        return $this;
    }

    /**
     * Gets deceptive_content
     *
     * @return int
     */
    public function getDeceptiveContent()
    {
        return $this->container['deceptive_content'];
    }

    /**
     * Sets deceptive_content
     *
     * @param int $deceptive_content deceptive_content
     *
     * @return $this
     */
    public function setDeceptiveContent($deceptive_content)
    {
        $this->container['deceptive_content'] = $deceptive_content;

        return $this;
    }

    /**
     * Gets abuse_reported
     *
     * @return int
     */
    public function getAbuseReported()
    {
        return $this->container['abuse_reported'];
    }

    /**
     * Sets abuse_reported
     *
     * @param int $abuse_reported abuse_reported
     *
     * @return $this
     */
    public function setAbuseReported($abuse_reported)
    {
        $this->container['abuse_reported'] = $abuse_reported;

        return $this;
    }

    /**
     * Gets third_party
     *
     * @return int
     */
    public function getThirdParty()
    {
        return $this->container['third_party'];
    }

    /**
     * Sets third_party
     *
     * @param int $third_party third_party
     *
     * @return $this
     */
    public function setThirdParty($third_party)
    {
        $this->container['third_party'] = $third_party;

        return $this;
    }

    /**
     * Gets list_unsubscribe
     *
     * @return int
     */
    public function getListUnsubscribe()
    {
        return $this->container['list_unsubscribe'];
    }

    /**
     * Sets list_unsubscribe
     *
     * @param int $list_unsubscribe list_unsubscribe
     *
     * @return $this
     */
    public function setListUnsubscribe($list_unsubscribe)
    {
        $this->container['list_unsubscribe'] = $list_unsubscribe;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


