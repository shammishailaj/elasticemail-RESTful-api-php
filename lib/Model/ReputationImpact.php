<?php
/**
 * ReputationImpact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReputationImpact Class Doc Comment
 *
 * @category Class
 * @description Overall reputation impact, based on the most important factors.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReputationImpact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReputationImpact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'abuse' => 'double',
        'unknown_users' => 'double',
        'opened' => 'double',
        'clicked' => 'double',
        'average_spam_score' => 'double',
        'server_filter' => 'double',
        'tracking_domain' => 'double',
        'sender_domain' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'abuse' => 'double',
        'unknown_users' => 'double',
        'opened' => 'double',
        'clicked' => 'double',
        'average_spam_score' => 'double',
        'server_filter' => 'double',
        'tracking_domain' => 'double',
        'sender_domain' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abuse' => 'Abuse',
        'unknown_users' => 'UnknownUsers',
        'opened' => 'Opened',
        'clicked' => 'Clicked',
        'average_spam_score' => 'AverageSpamScore',
        'server_filter' => 'ServerFilter',
        'tracking_domain' => 'TrackingDomain',
        'sender_domain' => 'SenderDomain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abuse' => 'setAbuse',
        'unknown_users' => 'setUnknownUsers',
        'opened' => 'setOpened',
        'clicked' => 'setClicked',
        'average_spam_score' => 'setAverageSpamScore',
        'server_filter' => 'setServerFilter',
        'tracking_domain' => 'setTrackingDomain',
        'sender_domain' => 'setSenderDomain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abuse' => 'getAbuse',
        'unknown_users' => 'getUnknownUsers',
        'opened' => 'getOpened',
        'clicked' => 'getClicked',
        'average_spam_score' => 'getAverageSpamScore',
        'server_filter' => 'getServerFilter',
        'tracking_domain' => 'getTrackingDomain',
        'sender_domain' => 'getSenderDomain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abuse'] = isset($data['abuse']) ? $data['abuse'] : null;
        $this->container['unknown_users'] = isset($data['unknown_users']) ? $data['unknown_users'] : null;
        $this->container['opened'] = isset($data['opened']) ? $data['opened'] : null;
        $this->container['clicked'] = isset($data['clicked']) ? $data['clicked'] : null;
        $this->container['average_spam_score'] = isset($data['average_spam_score']) ? $data['average_spam_score'] : null;
        $this->container['server_filter'] = isset($data['server_filter']) ? $data['server_filter'] : null;
        $this->container['tracking_domain'] = isset($data['tracking_domain']) ? $data['tracking_domain'] : null;
        $this->container['sender_domain'] = isset($data['sender_domain']) ? $data['sender_domain'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['abuse'] === null) {
            $invalidProperties[] = "'abuse' can't be null";
        }
        if ($this->container['unknown_users'] === null) {
            $invalidProperties[] = "'unknown_users' can't be null";
        }
        if ($this->container['opened'] === null) {
            $invalidProperties[] = "'opened' can't be null";
        }
        if ($this->container['clicked'] === null) {
            $invalidProperties[] = "'clicked' can't be null";
        }
        if ($this->container['average_spam_score'] === null) {
            $invalidProperties[] = "'average_spam_score' can't be null";
        }
        if ($this->container['server_filter'] === null) {
            $invalidProperties[] = "'server_filter' can't be null";
        }
        if ($this->container['tracking_domain'] === null) {
            $invalidProperties[] = "'tracking_domain' can't be null";
        }
        if ($this->container['sender_domain'] === null) {
            $invalidProperties[] = "'sender_domain' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['abuse'] === null) {
            return false;
        }
        if ($this->container['unknown_users'] === null) {
            return false;
        }
        if ($this->container['opened'] === null) {
            return false;
        }
        if ($this->container['clicked'] === null) {
            return false;
        }
        if ($this->container['average_spam_score'] === null) {
            return false;
        }
        if ($this->container['server_filter'] === null) {
            return false;
        }
        if ($this->container['tracking_domain'] === null) {
            return false;
        }
        if ($this->container['sender_domain'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets abuse
     *
     * @return double
     */
    public function getAbuse()
    {
        return $this->container['abuse'];
    }

    /**
     * Sets abuse
     *
     * @param double $abuse Abuses - mails sent to user without their consent
     *
     * @return $this
     */
    public function setAbuse($abuse)
    {
        $this->container['abuse'] = $abuse;

        return $this;
    }

    /**
     * Gets unknown_users
     *
     * @return double
     */
    public function getUnknownUsers()
    {
        return $this->container['unknown_users'];
    }

    /**
     * Sets unknown_users
     *
     * @param double $unknown_users Users, that could not be reached.
     *
     * @return $this
     */
    public function setUnknownUsers($unknown_users)
    {
        $this->container['unknown_users'] = $unknown_users;

        return $this;
    }

    /**
     * Gets opened
     *
     * @return double
     */
    public function getOpened()
    {
        return $this->container['opened'];
    }

    /**
     * Sets opened
     *
     * @param double $opened Number of opened messages
     *
     * @return $this
     */
    public function setOpened($opened)
    {
        $this->container['opened'] = $opened;

        return $this;
    }

    /**
     * Gets clicked
     *
     * @return double
     */
    public function getClicked()
    {
        return $this->container['clicked'];
    }

    /**
     * Sets clicked
     *
     * @param double $clicked Number of clicked messages
     *
     * @return $this
     */
    public function setClicked($clicked)
    {
        $this->container['clicked'] = $clicked;

        return $this;
    }

    /**
     * Gets average_spam_score
     *
     * @return double
     */
    public function getAverageSpamScore()
    {
        return $this->container['average_spam_score'];
    }

    /**
     * Sets average_spam_score
     *
     * @param double $average_spam_score Penalty from messages marked as spam.
     *
     * @return $this
     */
    public function setAverageSpamScore($average_spam_score)
    {
        $this->container['average_spam_score'] = $average_spam_score;

        return $this;
    }

    /**
     * Gets server_filter
     *
     * @return double
     */
    public function getServerFilter()
    {
        return $this->container['server_filter'];
    }

    /**
     * Sets server_filter
     *
     * @param double $server_filter Content analysis.
     *
     * @return $this
     */
    public function setServerFilter($server_filter)
    {
        $this->container['server_filter'] = $server_filter;

        return $this;
    }

    /**
     * Gets tracking_domain
     *
     * @return double
     */
    public function getTrackingDomain()
    {
        return $this->container['tracking_domain'];
    }

    /**
     * Sets tracking_domain
     *
     * @param double $tracking_domain Tracking domain.
     *
     * @return $this
     */
    public function setTrackingDomain($tracking_domain)
    {
        $this->container['tracking_domain'] = $tracking_domain;

        return $this;
    }

    /**
     * Gets sender_domain
     *
     * @return double
     */
    public function getSenderDomain()
    {
        return $this->container['sender_domain'];
    }

    /**
     * Sets sender_domain
     *
     * @param double $sender_domain Sending domain.
     *
     * @return $this
     */
    public function setSenderDomain($sender_domain)
    {
        $this->container['sender_domain'] = $sender_domain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


