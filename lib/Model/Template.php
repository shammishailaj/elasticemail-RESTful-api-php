<?php
/**
 * Template
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Template Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Template implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Template';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'template_type' => 'string',
        'name' => 'string',
        'date_added' => '\DateTime',
        'from_email' => 'string',
        'from_name' => 'string',
        'body' => '\Swagger\Client\Model\Body',
        'original_template_name' => 'string',
        'template_scope' => 'string',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'template_type' => null,
        'name' => 'string',
        'date_added' => 'date-time',
        'from_email' => 'string',
        'from_name' => 'string',
        'body' => null,
        'original_template_name' => 'string',
        'template_scope' => null,
        'tags' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'template_type' => 'TemplateType',
        'name' => 'Name',
        'date_added' => 'DateAdded',
        'from_email' => 'FromEmail',
        'from_name' => 'FromName',
        'body' => 'Body',
        'original_template_name' => 'OriginalTemplateName',
        'template_scope' => 'TemplateScope',
        'tags' => 'Tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'template_type' => 'setTemplateType',
        'name' => 'setName',
        'date_added' => 'setDateAdded',
        'from_email' => 'setFromEmail',
        'from_name' => 'setFromName',
        'body' => 'setBody',
        'original_template_name' => 'setOriginalTemplateName',
        'template_scope' => 'setTemplateScope',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'template_type' => 'getTemplateType',
        'name' => 'getName',
        'date_added' => 'getDateAdded',
        'from_email' => 'getFromEmail',
        'from_name' => 'getFromName',
        'body' => 'getBody',
        'original_template_name' => 'getOriginalTemplateName',
        'template_scope' => 'getTemplateScope',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TEMPLATE_TYPE_RAW_HTML = 'RawHTML';
    const TEMPLATE_TYPE_DRAG_DROP_EDITOR = 'DragDropEditor';
    const TEMPLATE_SCOPE__PRIVATE = 'Private';
    const TEMPLATE_SCOPE__PUBLIC = 'Public';
    const TEMPLATE_SCOPE_DRAFT = 'Draft';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateTypeAllowableValues()
    {
        return [
            self::TEMPLATE_TYPE_RAW_HTML,
            self::TEMPLATE_TYPE_DRAG_DROP_EDITOR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateScopeAllowableValues()
    {
        return [
            self::TEMPLATE_SCOPE__PRIVATE,
            self::TEMPLATE_SCOPE__PUBLIC,
            self::TEMPLATE_SCOPE_DRAFT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['template_type'] = isset($data['template_type']) ? $data['template_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['date_added'] = isset($data['date_added']) ? $data['date_added'] : null;
        $this->container['from_email'] = isset($data['from_email']) ? $data['from_email'] : null;
        $this->container['from_name'] = isset($data['from_name']) ? $data['from_name'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['original_template_name'] = isset($data['original_template_name']) ? $data['original_template_name'] : null;
        $this->container['template_scope'] = isset($data['template_scope']) ? $data['template_scope'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['template_type'] === null) {
            $invalidProperties[] = "'template_type' can't be null";
        }
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!in_array($this->container['template_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['date_added'] === null) {
            $invalidProperties[] = "'date_added' can't be null";
        }
        if ($this->container['from_email'] === null) {
            $invalidProperties[] = "'from_email' can't be null";
        }
        if ($this->container['from_name'] === null) {
            $invalidProperties[] = "'from_name' can't be null";
        }
        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['original_template_name'] === null) {
            $invalidProperties[] = "'original_template_name' can't be null";
        }
        if ($this->container['template_scope'] === null) {
            $invalidProperties[] = "'template_scope' can't be null";
        }
        $allowedValues = $this->getTemplateScopeAllowableValues();
        if (!in_array($this->container['template_scope'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_scope', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['template_type'] === null) {
            return false;
        }
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!in_array($this->container['template_type'], $allowedValues)) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['date_added'] === null) {
            return false;
        }
        if ($this->container['from_email'] === null) {
            return false;
        }
        if ($this->container['from_name'] === null) {
            return false;
        }
        if ($this->container['body'] === null) {
            return false;
        }
        if ($this->container['original_template_name'] === null) {
            return false;
        }
        if ($this->container['template_scope'] === null) {
            return false;
        }
        $allowedValues = $this->getTemplateScopeAllowableValues();
        if (!in_array($this->container['template_scope'], $allowedValues)) {
            return false;
        }
        if ($this->container['tags'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets template_type
     *
     * @return string
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }

    /**
     * Sets template_type
     *
     * @param string $template_type 0 for API connections
     *
     * @return $this
     */
    public function setTemplateType($template_type)
    {
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!in_array($template_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_type'] = $template_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Filename
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets date_added
     *
     * @return \DateTime
     */
    public function getDateAdded()
    {
        return $this->container['date_added'];
    }

    /**
     * Sets date_added
     *
     * @param \DateTime $date_added Date of creation in YYYY-MM-DDThh:ii:ss format
     *
     * @return $this
     */
    public function setDateAdded($date_added)
    {
        $this->container['date_added'] = $date_added;

        return $this;
    }

    /**
     * Gets from_email
     *
     * @return string
     */
    public function getFromEmail()
    {
        return $this->container['from_email'];
    }

    /**
     * Sets from_email
     *
     * @param string $from_email Default From: email address.
     *
     * @return $this
     */
    public function setFromEmail($from_email)
    {
        $this->container['from_email'] = $from_email;

        return $this;
    }

    /**
     * Gets from_name
     *
     * @return string
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     *
     * @param string $from_name Default From: name.
     *
     * @return $this
     */
    public function setFromName($from_name)
    {
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets body
     *
     * @return \Swagger\Client\Model\Body
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param \Swagger\Client\Model\Body $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets original_template_name
     *
     * @return string
     */
    public function getOriginalTemplateName()
    {
        return $this->container['original_template_name'];
    }

    /**
     * Sets original_template_name
     *
     * @param string $original_template_name original_template_name
     *
     * @return $this
     */
    public function setOriginalTemplateName($original_template_name)
    {
        $this->container['original_template_name'] = $original_template_name;

        return $this;
    }

    /**
     * Gets template_scope
     *
     * @return string
     */
    public function getTemplateScope()
    {
        return $this->container['template_scope'];
    }

    /**
     * Sets template_scope
     *
     * @param string $template_scope Enum: 0 - private, 1 - public, 2 - mockup
     *
     * @return $this
     */
    public function setTemplateScope($template_scope)
    {
        $allowedValues = $this->getTemplateScopeAllowableValues();
        if (!in_array($template_scope, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_scope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_scope'] = $template_scope;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


