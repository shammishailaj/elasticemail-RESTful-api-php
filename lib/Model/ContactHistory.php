<?php
/**
 * ContactHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactHistory Class Doc Comment
 *
 * @category Class
 * @description History of chosen Contact
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactHistory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_type' => 'string',
        'event_type_value' => 'string',
        'event_date' => 'string',
        'channel_name' => 'string',
        'template_name' => 'string',
        'ip_address' => 'string',
        'country' => 'string',
        'data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event_type' => 'string',
        'event_type_value' => null,
        'event_date' => 'string',
        'channel_name' => 'string',
        'template_name' => 'string',
        'ip_address' => 'string',
        'country' => 'string',
        'data' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_type' => 'EventType',
        'event_type_value' => 'EventTypeValue',
        'event_date' => 'EventDate',
        'channel_name' => 'ChannelName',
        'template_name' => 'TemplateName',
        'ip_address' => 'IPAddress',
        'country' => 'Country',
        'data' => 'Data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_type' => 'setEventType',
        'event_type_value' => 'setEventTypeValue',
        'event_date' => 'setEventDate',
        'channel_name' => 'setChannelName',
        'template_name' => 'setTemplateName',
        'ip_address' => 'setIpAddress',
        'country' => 'setCountry',
        'data' => 'setData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_type' => 'getEventType',
        'event_type_value' => 'getEventTypeValue',
        'event_date' => 'getEventDate',
        'channel_name' => 'getChannelName',
        'template_name' => 'getTemplateName',
        'ip_address' => 'getIpAddress',
        'country' => 'getCountry',
        'data' => 'getData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EVENT_TYPE_VALUE_OPENED = 'Opened';
    const EVENT_TYPE_VALUE_CLICKED = 'Clicked';
    const EVENT_TYPE_VALUE_BOUNCED = 'Bounced';
    const EVENT_TYPE_VALUE_UNSUBSCRIBED = 'Unsubscribed';
    const EVENT_TYPE_VALUE_COMPLAINED = 'Complained';
    const EVENT_TYPE_VALUE_ACTIVATED = 'Activated';
    const EVENT_TYPE_VALUE_TRANSACTIONAL_UNSUBSCRIBED = 'TransactionalUnsubscribed';
    const EVENT_TYPE_VALUE_MANUAL_STATUS_CHANGE = 'ManualStatusChange';
    const EVENT_TYPE_VALUE_ACTIVATION_SENT = 'ActivationSent';
    const EVENT_TYPE_VALUE_DELETED = 'Deleted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypeValueAllowableValues()
    {
        return [
            self::EVENT_TYPE_VALUE_OPENED,
            self::EVENT_TYPE_VALUE_CLICKED,
            self::EVENT_TYPE_VALUE_BOUNCED,
            self::EVENT_TYPE_VALUE_UNSUBSCRIBED,
            self::EVENT_TYPE_VALUE_COMPLAINED,
            self::EVENT_TYPE_VALUE_ACTIVATED,
            self::EVENT_TYPE_VALUE_TRANSACTIONAL_UNSUBSCRIBED,
            self::EVENT_TYPE_VALUE_MANUAL_STATUS_CHANGE,
            self::EVENT_TYPE_VALUE_ACTIVATION_SENT,
            self::EVENT_TYPE_VALUE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['event_type_value'] = isset($data['event_type_value']) ? $data['event_type_value'] : null;
        $this->container['event_date'] = isset($data['event_date']) ? $data['event_date'] : null;
        $this->container['channel_name'] = isset($data['channel_name']) ? $data['channel_name'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['event_type'] === null) {
            $invalidProperties[] = "'event_type' can't be null";
        }
        if ($this->container['event_type_value'] === null) {
            $invalidProperties[] = "'event_type_value' can't be null";
        }
        $allowedValues = $this->getEventTypeValueAllowableValues();
        if (!in_array($this->container['event_type_value'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'event_type_value', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['event_date'] === null) {
            $invalidProperties[] = "'event_date' can't be null";
        }
        if ($this->container['channel_name'] === null) {
            $invalidProperties[] = "'channel_name' can't be null";
        }
        if ($this->container['template_name'] === null) {
            $invalidProperties[] = "'template_name' can't be null";
        }
        if ($this->container['ip_address'] === null) {
            $invalidProperties[] = "'ip_address' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['event_type'] === null) {
            return false;
        }
        if ($this->container['event_type_value'] === null) {
            return false;
        }
        $allowedValues = $this->getEventTypeValueAllowableValues();
        if (!in_array($this->container['event_type_value'], $allowedValues)) {
            return false;
        }
        if ($this->container['event_date'] === null) {
            return false;
        }
        if ($this->container['channel_name'] === null) {
            return false;
        }
        if ($this->container['template_name'] === null) {
            return false;
        }
        if ($this->container['ip_address'] === null) {
            return false;
        }
        if ($this->container['country'] === null) {
            return false;
        }
        if ($this->container['data'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets event_type
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string $event_type Type of event occured on this Contact.
     *
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets event_type_value
     *
     * @return string
     */
    public function getEventTypeValue()
    {
        return $this->container['event_type_value'];
    }

    /**
     * Sets event_type_value
     *
     * @param string $event_type_value Numeric code of event occured on this Contact.
     *
     * @return $this
     */
    public function setEventTypeValue($event_type_value)
    {
        $allowedValues = $this->getEventTypeValueAllowableValues();
        if (!in_array($event_type_value, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event_type_value', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_type_value'] = $event_type_value;

        return $this;
    }

    /**
     * Gets event_date
     *
     * @return string
     */
    public function getEventDate()
    {
        return $this->container['event_date'];
    }

    /**
     * Sets event_date
     *
     * @param string $event_date Formatted date of event.
     *
     * @return $this
     */
    public function setEventDate($event_date)
    {
        $this->container['event_date'] = $event_date;

        return $this;
    }

    /**
     * Gets channel_name
     *
     * @return string
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     *
     * @param string $channel_name Name of selected channel.
     *
     * @return $this
     */
    public function setChannelName($channel_name)
    {
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name Name of template.
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address IP Address of the event.
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country of the event.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data Information about the event
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


