<?php
/**
 * RandomListPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RandomListPayload Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RandomListPayload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RandomListPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'list_name' => 'string',
        'count' => 'int',
        'exclude_blocked' => 'bool',
        'allow_unsubscribe' => 'bool',
        'rule' => 'string',
        'all_contacts' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'list_name' => 'string',
        'count' => 'int32',
        'exclude_blocked' => 'boolean',
        'allow_unsubscribe' => 'boolean',
        'rule' => 'string',
        'all_contacts' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'list_name' => 'ListName',
        'count' => 'Count',
        'exclude_blocked' => 'ExcludeBlocked',
        'allow_unsubscribe' => 'AllowUnsubscribe',
        'rule' => 'Rule',
        'all_contacts' => 'AllContacts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'list_name' => 'setListName',
        'count' => 'setCount',
        'exclude_blocked' => 'setExcludeBlocked',
        'allow_unsubscribe' => 'setAllowUnsubscribe',
        'rule' => 'setRule',
        'all_contacts' => 'setAllContacts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'list_name' => 'getListName',
        'count' => 'getCount',
        'exclude_blocked' => 'getExcludeBlocked',
        'allow_unsubscribe' => 'getAllowUnsubscribe',
        'rule' => 'getRule',
        'all_contacts' => 'getAllContacts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['list_name'] = isset($data['list_name']) ? $data['list_name'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['exclude_blocked'] = isset($data['exclude_blocked']) ? $data['exclude_blocked'] : null;
        $this->container['allow_unsubscribe'] = isset($data['allow_unsubscribe']) ? $data['allow_unsubscribe'] : null;
        $this->container['rule'] = isset($data['rule']) ? $data['rule'] : null;
        $this->container['all_contacts'] = isset($data['all_contacts']) ? $data['all_contacts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['list_name'] === null) {
            $invalidProperties[] = "'list_name' can't be null";
        }
        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        if ($this->container['exclude_blocked'] === null) {
            $invalidProperties[] = "'exclude_blocked' can't be null";
        }
        if ($this->container['allow_unsubscribe'] === null) {
            $invalidProperties[] = "'allow_unsubscribe' can't be null";
        }
        if ($this->container['rule'] === null) {
            $invalidProperties[] = "'rule' can't be null";
        }
        if ($this->container['all_contacts'] === null) {
            $invalidProperties[] = "'all_contacts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['list_name'] === null) {
            return false;
        }
        if ($this->container['count'] === null) {
            return false;
        }
        if ($this->container['exclude_blocked'] === null) {
            return false;
        }
        if ($this->container['allow_unsubscribe'] === null) {
            return false;
        }
        if ($this->container['rule'] === null) {
            return false;
        }
        if ($this->container['all_contacts'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets list_name
     *
     * @return string
     */
    public function getListName()
    {
        return $this->container['list_name'];
    }

    /**
     * Sets list_name
     *
     * @param string $list_name Name of your list.
     *
     * @return $this
     */
    public function setListName($list_name)
    {
        $this->container['list_name'] = $list_name;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count Number of items.
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets exclude_blocked
     *
     * @return bool
     */
    public function getExcludeBlocked()
    {
        return $this->container['exclude_blocked'];
    }

    /**
     * Sets exclude_blocked
     *
     * @param bool $exclude_blocked True if you want to exclude contacts that are currently in a blocked status of either unsubscribe, complaint or bounce. Otherwise, false.
     *
     * @return $this
     */
    public function setExcludeBlocked($exclude_blocked)
    {
        $this->container['exclude_blocked'] = $exclude_blocked;

        return $this;
    }

    /**
     * Gets allow_unsubscribe
     *
     * @return bool
     */
    public function getAllowUnsubscribe()
    {
        return $this->container['allow_unsubscribe'];
    }

    /**
     * Sets allow_unsubscribe
     *
     * @param bool $allow_unsubscribe True: Allow unsubscribing from this list. Otherwise, false
     *
     * @return $this
     */
    public function setAllowUnsubscribe($allow_unsubscribe)
    {
        $this->container['allow_unsubscribe'] = $allow_unsubscribe;

        return $this;
    }

    /**
     * Gets rule
     *
     * @return string
     */
    public function getRule()
    {
        return $this->container['rule'];
    }

    /**
     * Sets rule
     *
     * @param string $rule Query used for filtering.
     *
     * @return $this
     */
    public function setRule($rule)
    {
        $this->container['rule'] = $rule;

        return $this;
    }

    /**
     * Gets all_contacts
     *
     * @return bool
     */
    public function getAllContacts()
    {
        return $this->container['all_contacts'];
    }

    /**
     * Sets all_contacts
     *
     * @param bool $all_contacts True: Include every Contact in your Account. Otherwise, false
     *
     * @return $this
     */
    public function setAllContacts($all_contacts)
    {
        $this->container['all_contacts'] = $all_contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


