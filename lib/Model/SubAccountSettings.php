<?php
/**
 * SubAccountSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SubAccountSettings Class Doc Comment
 *
 * @category Class
 * @description Detailed account settings.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubAccountSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubAccountSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'email' => 'string',
        'requires_email_credits' => 'bool',
        'monthly_refill_credits' => 'double',
        'email_size_limit' => 'int',
        'daily_send_limit' => 'int',
        'max_contacts' => 'int',
        'enable_private_ip_request' => 'bool',
        'enable_contact_features' => 'bool',
        'sending_permission' => 'string',
        'pool_name' => 'string',
        'public_account_id' => 'string',
        'allow2_fa' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'email' => 'string',
        'requires_email_credits' => 'boolean',
        'monthly_refill_credits' => 'double',
        'email_size_limit' => 'int32',
        'daily_send_limit' => 'int32',
        'max_contacts' => 'int32',
        'enable_private_ip_request' => 'boolean',
        'enable_contact_features' => 'boolean',
        'sending_permission' => null,
        'pool_name' => 'string',
        'public_account_id' => 'string',
        'allow2_fa' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'Email',
        'requires_email_credits' => 'RequiresEmailCredits',
        'monthly_refill_credits' => 'MonthlyRefillCredits',
        'email_size_limit' => 'EmailSizeLimit',
        'daily_send_limit' => 'DailySendLimit',
        'max_contacts' => 'MaxContacts',
        'enable_private_ip_request' => 'EnablePrivateIPRequest',
        'enable_contact_features' => 'EnableContactFeatures',
        'sending_permission' => 'SendingPermission',
        'pool_name' => 'PoolName',
        'public_account_id' => 'PublicAccountID',
        'allow2_fa' => 'Allow2FA'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'requires_email_credits' => 'setRequiresEmailCredits',
        'monthly_refill_credits' => 'setMonthlyRefillCredits',
        'email_size_limit' => 'setEmailSizeLimit',
        'daily_send_limit' => 'setDailySendLimit',
        'max_contacts' => 'setMaxContacts',
        'enable_private_ip_request' => 'setEnablePrivateIpRequest',
        'enable_contact_features' => 'setEnableContactFeatures',
        'sending_permission' => 'setSendingPermission',
        'pool_name' => 'setPoolName',
        'public_account_id' => 'setPublicAccountId',
        'allow2_fa' => 'setAllow2Fa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'requires_email_credits' => 'getRequiresEmailCredits',
        'monthly_refill_credits' => 'getMonthlyRefillCredits',
        'email_size_limit' => 'getEmailSizeLimit',
        'daily_send_limit' => 'getDailySendLimit',
        'max_contacts' => 'getMaxContacts',
        'enable_private_ip_request' => 'getEnablePrivateIpRequest',
        'enable_contact_features' => 'getEnableContactFeatures',
        'sending_permission' => 'getSendingPermission',
        'pool_name' => 'getPoolName',
        'public_account_id' => 'getPublicAccountId',
        'allow2_fa' => 'getAllow2Fa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SENDING_PERMISSION_NONE = 'None';
    const SENDING_PERMISSION_SMTP = 'Smtp';
    const SENDING_PERMISSION_HTTP_API = 'HttpApi';
    const SENDING_PERMISSION_SMTP_AND_HTTP_API = 'SmtpAndHttpApi';
    const SENDING_PERMISSION__INTERFACE = 'Interface';
    const SENDING_PERMISSION_SMTP_AND_INTERFACE = 'SmtpAndInterface';
    const SENDING_PERMISSION_HTTP_API_AND_INTERFACE = 'HttpApiAndInterface';
    const SENDING_PERMISSION_USE_ACCESS_LEVEL = 'UseAccessLevel';
    const SENDING_PERMISSION_ALL = 'All';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendingPermissionAllowableValues()
    {
        return [
            self::SENDING_PERMISSION_NONE,
            self::SENDING_PERMISSION_SMTP,
            self::SENDING_PERMISSION_HTTP_API,
            self::SENDING_PERMISSION_SMTP_AND_HTTP_API,
            self::SENDING_PERMISSION__INTERFACE,
            self::SENDING_PERMISSION_SMTP_AND_INTERFACE,
            self::SENDING_PERMISSION_HTTP_API_AND_INTERFACE,
            self::SENDING_PERMISSION_USE_ACCESS_LEVEL,
            self::SENDING_PERMISSION_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['requires_email_credits'] = isset($data['requires_email_credits']) ? $data['requires_email_credits'] : null;
        $this->container['monthly_refill_credits'] = isset($data['monthly_refill_credits']) ? $data['monthly_refill_credits'] : null;
        $this->container['email_size_limit'] = isset($data['email_size_limit']) ? $data['email_size_limit'] : null;
        $this->container['daily_send_limit'] = isset($data['daily_send_limit']) ? $data['daily_send_limit'] : null;
        $this->container['max_contacts'] = isset($data['max_contacts']) ? $data['max_contacts'] : null;
        $this->container['enable_private_ip_request'] = isset($data['enable_private_ip_request']) ? $data['enable_private_ip_request'] : null;
        $this->container['enable_contact_features'] = isset($data['enable_contact_features']) ? $data['enable_contact_features'] : null;
        $this->container['sending_permission'] = isset($data['sending_permission']) ? $data['sending_permission'] : null;
        $this->container['pool_name'] = isset($data['pool_name']) ? $data['pool_name'] : null;
        $this->container['public_account_id'] = isset($data['public_account_id']) ? $data['public_account_id'] : null;
        $this->container['allow2_fa'] = isset($data['allow2_fa']) ? $data['allow2_fa'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['requires_email_credits'] === null) {
            $invalidProperties[] = "'requires_email_credits' can't be null";
        }
        if ($this->container['monthly_refill_credits'] === null) {
            $invalidProperties[] = "'monthly_refill_credits' can't be null";
        }
        if ($this->container['email_size_limit'] === null) {
            $invalidProperties[] = "'email_size_limit' can't be null";
        }
        if ($this->container['daily_send_limit'] === null) {
            $invalidProperties[] = "'daily_send_limit' can't be null";
        }
        if ($this->container['max_contacts'] === null) {
            $invalidProperties[] = "'max_contacts' can't be null";
        }
        if ($this->container['enable_private_ip_request'] === null) {
            $invalidProperties[] = "'enable_private_ip_request' can't be null";
        }
        if ($this->container['enable_contact_features'] === null) {
            $invalidProperties[] = "'enable_contact_features' can't be null";
        }
        if ($this->container['sending_permission'] === null) {
            $invalidProperties[] = "'sending_permission' can't be null";
        }
        $allowedValues = $this->getSendingPermissionAllowableValues();
        if (!in_array($this->container['sending_permission'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sending_permission', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['pool_name'] === null) {
            $invalidProperties[] = "'pool_name' can't be null";
        }
        if ($this->container['public_account_id'] === null) {
            $invalidProperties[] = "'public_account_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['requires_email_credits'] === null) {
            return false;
        }
        if ($this->container['monthly_refill_credits'] === null) {
            return false;
        }
        if ($this->container['email_size_limit'] === null) {
            return false;
        }
        if ($this->container['daily_send_limit'] === null) {
            return false;
        }
        if ($this->container['max_contacts'] === null) {
            return false;
        }
        if ($this->container['enable_private_ip_request'] === null) {
            return false;
        }
        if ($this->container['enable_contact_features'] === null) {
            return false;
        }
        if ($this->container['sending_permission'] === null) {
            return false;
        }
        $allowedValues = $this->getSendingPermissionAllowableValues();
        if (!in_array($this->container['sending_permission'], $allowedValues)) {
            return false;
        }
        if ($this->container['pool_name'] === null) {
            return false;
        }
        if ($this->container['public_account_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Proper email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets requires_email_credits
     *
     * @return bool
     */
    public function getRequiresEmailCredits()
    {
        return $this->container['requires_email_credits'];
    }

    /**
     * Sets requires_email_credits
     *
     * @param bool $requires_email_credits True, if account needs credits to send emails. Otherwise, false
     *
     * @return $this
     */
    public function setRequiresEmailCredits($requires_email_credits)
    {
        $this->container['requires_email_credits'] = $requires_email_credits;

        return $this;
    }

    /**
     * Gets monthly_refill_credits
     *
     * @return double
     */
    public function getMonthlyRefillCredits()
    {
        return $this->container['monthly_refill_credits'];
    }

    /**
     * Sets monthly_refill_credits
     *
     * @param double $monthly_refill_credits Amount of credits added to account automatically
     *
     * @return $this
     */
    public function setMonthlyRefillCredits($monthly_refill_credits)
    {
        $this->container['monthly_refill_credits'] = $monthly_refill_credits;

        return $this;
    }

    /**
     * Gets email_size_limit
     *
     * @return int
     */
    public function getEmailSizeLimit()
    {
        return $this->container['email_size_limit'];
    }

    /**
     * Sets email_size_limit
     *
     * @param int $email_size_limit Maximum size of email including attachments in MB's
     *
     * @return $this
     */
    public function setEmailSizeLimit($email_size_limit)
    {
        $this->container['email_size_limit'] = $email_size_limit;

        return $this;
    }

    /**
     * Gets daily_send_limit
     *
     * @return int
     */
    public function getDailySendLimit()
    {
        return $this->container['daily_send_limit'];
    }

    /**
     * Sets daily_send_limit
     *
     * @param int $daily_send_limit Amount of emails account can send daily
     *
     * @return $this
     */
    public function setDailySendLimit($daily_send_limit)
    {
        $this->container['daily_send_limit'] = $daily_send_limit;

        return $this;
    }

    /**
     * Gets max_contacts
     *
     * @return int
     */
    public function getMaxContacts()
    {
        return $this->container['max_contacts'];
    }

    /**
     * Sets max_contacts
     *
     * @param int $max_contacts Maximum number of contacts the account can have
     *
     * @return $this
     */
    public function setMaxContacts($max_contacts)
    {
        $this->container['max_contacts'] = $max_contacts;

        return $this;
    }

    /**
     * Gets enable_private_ip_request
     *
     * @return bool
     */
    public function getEnablePrivateIpRequest()
    {
        return $this->container['enable_private_ip_request'];
    }

    /**
     * Sets enable_private_ip_request
     *
     * @param bool $enable_private_ip_request True, if account can request for private IP on its own. Otherwise, false
     *
     * @return $this
     */
    public function setEnablePrivateIpRequest($enable_private_ip_request)
    {
        $this->container['enable_private_ip_request'] = $enable_private_ip_request;

        return $this;
    }

    /**
     * Gets enable_contact_features
     *
     * @return bool
     */
    public function getEnableContactFeatures()
    {
        return $this->container['enable_contact_features'];
    }

    /**
     * Sets enable_contact_features
     *
     * @param bool $enable_contact_features True, if you want to use Contact Delivery Tools.  Otherwise, false
     *
     * @return $this
     */
    public function setEnableContactFeatures($enable_contact_features)
    {
        $this->container['enable_contact_features'] = $enable_contact_features;

        return $this;
    }

    /**
     * Gets sending_permission
     *
     * @return string
     */
    public function getSendingPermission()
    {
        return $this->container['sending_permission'];
    }

    /**
     * Sets sending_permission
     *
     * @param string $sending_permission Sending permission setting for account
     *
     * @return $this
     */
    public function setSendingPermission($sending_permission)
    {
        $allowedValues = $this->getSendingPermissionAllowableValues();
        if (!in_array($sending_permission, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sending_permission', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sending_permission'] = $sending_permission;

        return $this;
    }

    /**
     * Gets pool_name
     *
     * @return string
     */
    public function getPoolName()
    {
        return $this->container['pool_name'];
    }

    /**
     * Sets pool_name
     *
     * @param string $pool_name Name of your custom IP Pool to be used in the sending process
     *
     * @return $this
     */
    public function setPoolName($pool_name)
    {
        $this->container['pool_name'] = $pool_name;

        return $this;
    }

    /**
     * Gets public_account_id
     *
     * @return string
     */
    public function getPublicAccountId()
    {
        return $this->container['public_account_id'];
    }

    /**
     * Sets public_account_id
     *
     * @param string $public_account_id Public key for limited access to your account such as contact/add so you can use it safely on public websites.
     *
     * @return $this
     */
    public function setPublicAccountId($public_account_id)
    {
        $this->container['public_account_id'] = $public_account_id;

        return $this;
    }

    /**
     * Gets allow2_fa
     *
     * @return bool
     */
    public function getAllow2Fa()
    {
        return $this->container['allow2_fa'];
    }

    /**
     * Sets allow2_fa
     *
     * @param bool $allow2_fa allow2_fa
     *
     * @return $this
     */
    public function setAllow2Fa($allow2_fa)
    {
        $this->container['allow2_fa'] = $allow2_fa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


