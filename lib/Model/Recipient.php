<?php
/**
 * Recipient
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Recipient Class Doc Comment
 *
 * @category Class
 * @description Detailed information about message recipient
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Recipient implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Recipient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_sms' => 'bool',
        'msg_id' => 'string',
        'to' => 'string',
        'status' => 'string',
        'channel' => 'string',
        'date' => 'string',
        'date_sent' => 'string',
        'date_opened' => 'string',
        'date_clicked' => 'string',
        'message' => 'string',
        'show_category' => 'bool',
        'message_category' => 'string',
        'message_category_id' => 'string',
        'status_change_date' => 'string',
        'next_try_on' => 'string',
        'subject' => 'string',
        'from_email' => 'string',
        'envelope_from' => 'string',
        'job_id' => 'string',
        'sms_update_required' => 'bool',
        'text_message' => 'string',
        'message_sid' => 'string',
        'contact_last_error' => 'string',
        'ip_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_sms' => 'boolean',
        'msg_id' => 'string',
        'to' => 'string',
        'status' => 'string',
        'channel' => 'string',
        'date' => 'string',
        'date_sent' => 'string',
        'date_opened' => 'string',
        'date_clicked' => 'string',
        'message' => 'string',
        'show_category' => 'boolean',
        'message_category' => 'string',
        'message_category_id' => null,
        'status_change_date' => 'string',
        'next_try_on' => 'string',
        'subject' => 'string',
        'from_email' => 'string',
        'envelope_from' => 'string',
        'job_id' => 'string',
        'sms_update_required' => 'boolean',
        'text_message' => 'string',
        'message_sid' => 'string',
        'contact_last_error' => 'string',
        'ip_address' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_sms' => 'IsSms',
        'msg_id' => 'MsgID',
        'to' => 'To',
        'status' => 'Status',
        'channel' => 'Channel',
        'date' => 'Date',
        'date_sent' => 'DateSent',
        'date_opened' => 'DateOpened',
        'date_clicked' => 'DateClicked',
        'message' => 'Message',
        'show_category' => 'ShowCategory',
        'message_category' => 'MessageCategory',
        'message_category_id' => 'MessageCategoryID',
        'status_change_date' => 'StatusChangeDate',
        'next_try_on' => 'NextTryOn',
        'subject' => 'Subject',
        'from_email' => 'FromEmail',
        'envelope_from' => 'EnvelopeFrom',
        'job_id' => 'JobID',
        'sms_update_required' => 'SmsUpdateRequired',
        'text_message' => 'TextMessage',
        'message_sid' => 'MessageSid',
        'contact_last_error' => 'ContactLastError',
        'ip_address' => 'IPAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_sms' => 'setIsSms',
        'msg_id' => 'setMsgId',
        'to' => 'setTo',
        'status' => 'setStatus',
        'channel' => 'setChannel',
        'date' => 'setDate',
        'date_sent' => 'setDateSent',
        'date_opened' => 'setDateOpened',
        'date_clicked' => 'setDateClicked',
        'message' => 'setMessage',
        'show_category' => 'setShowCategory',
        'message_category' => 'setMessageCategory',
        'message_category_id' => 'setMessageCategoryId',
        'status_change_date' => 'setStatusChangeDate',
        'next_try_on' => 'setNextTryOn',
        'subject' => 'setSubject',
        'from_email' => 'setFromEmail',
        'envelope_from' => 'setEnvelopeFrom',
        'job_id' => 'setJobId',
        'sms_update_required' => 'setSmsUpdateRequired',
        'text_message' => 'setTextMessage',
        'message_sid' => 'setMessageSid',
        'contact_last_error' => 'setContactLastError',
        'ip_address' => 'setIpAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_sms' => 'getIsSms',
        'msg_id' => 'getMsgId',
        'to' => 'getTo',
        'status' => 'getStatus',
        'channel' => 'getChannel',
        'date' => 'getDate',
        'date_sent' => 'getDateSent',
        'date_opened' => 'getDateOpened',
        'date_clicked' => 'getDateClicked',
        'message' => 'getMessage',
        'show_category' => 'getShowCategory',
        'message_category' => 'getMessageCategory',
        'message_category_id' => 'getMessageCategoryId',
        'status_change_date' => 'getStatusChangeDate',
        'next_try_on' => 'getNextTryOn',
        'subject' => 'getSubject',
        'from_email' => 'getFromEmail',
        'envelope_from' => 'getEnvelopeFrom',
        'job_id' => 'getJobId',
        'sms_update_required' => 'getSmsUpdateRequired',
        'text_message' => 'getTextMessage',
        'message_sid' => 'getMessageSid',
        'contact_last_error' => 'getContactLastError',
        'ip_address' => 'getIpAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MESSAGE_CATEGORY_ID_UNKNOWN = 'Unknown';
    const MESSAGE_CATEGORY_ID_IGNORE = 'Ignore';
    const MESSAGE_CATEGORY_ID_SPAM = 'Spam';
    const MESSAGE_CATEGORY_ID_BLACK_LISTED = 'BlackListed';
    const MESSAGE_CATEGORY_ID_NO_MAILBOX = 'NoMailbox';
    const MESSAGE_CATEGORY_ID_GREY_LISTED = 'GreyListed';
    const MESSAGE_CATEGORY_ID_THROTTLED = 'Throttled';
    const MESSAGE_CATEGORY_ID_TIMEOUT = 'Timeout';
    const MESSAGE_CATEGORY_ID_CONNECTION_PROBLEM = 'ConnectionProblem';
    const MESSAGE_CATEGORY_ID_SPF_PROBLEM = 'SPFProblem';
    const MESSAGE_CATEGORY_ID_ACCOUNT_PROBLEM = 'AccountProblem';
    const MESSAGE_CATEGORY_ID_DNS_PROBLEM = 'DNSProblem';
    const MESSAGE_CATEGORY_ID_NOT_DELIVERED_CANCELLED = 'NotDeliveredCancelled';
    const MESSAGE_CATEGORY_ID_CODE_ERROR = 'CodeError';
    const MESSAGE_CATEGORY_ID_MANUAL_CANCEL = 'ManualCancel';
    const MESSAGE_CATEGORY_ID_CONNECTION_TERMINATED = 'ConnectionTerminated';
    const MESSAGE_CATEGORY_ID_NOT_DELIVERED = 'NotDelivered';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessageCategoryIdAllowableValues()
    {
        return [
            self::MESSAGE_CATEGORY_ID_UNKNOWN,
            self::MESSAGE_CATEGORY_ID_IGNORE,
            self::MESSAGE_CATEGORY_ID_SPAM,
            self::MESSAGE_CATEGORY_ID_BLACK_LISTED,
            self::MESSAGE_CATEGORY_ID_NO_MAILBOX,
            self::MESSAGE_CATEGORY_ID_GREY_LISTED,
            self::MESSAGE_CATEGORY_ID_THROTTLED,
            self::MESSAGE_CATEGORY_ID_TIMEOUT,
            self::MESSAGE_CATEGORY_ID_CONNECTION_PROBLEM,
            self::MESSAGE_CATEGORY_ID_SPF_PROBLEM,
            self::MESSAGE_CATEGORY_ID_ACCOUNT_PROBLEM,
            self::MESSAGE_CATEGORY_ID_DNS_PROBLEM,
            self::MESSAGE_CATEGORY_ID_NOT_DELIVERED_CANCELLED,
            self::MESSAGE_CATEGORY_ID_CODE_ERROR,
            self::MESSAGE_CATEGORY_ID_MANUAL_CANCEL,
            self::MESSAGE_CATEGORY_ID_CONNECTION_TERMINATED,
            self::MESSAGE_CATEGORY_ID_NOT_DELIVERED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_sms'] = isset($data['is_sms']) ? $data['is_sms'] : null;
        $this->container['msg_id'] = isset($data['msg_id']) ? $data['msg_id'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['date_sent'] = isset($data['date_sent']) ? $data['date_sent'] : null;
        $this->container['date_opened'] = isset($data['date_opened']) ? $data['date_opened'] : null;
        $this->container['date_clicked'] = isset($data['date_clicked']) ? $data['date_clicked'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['show_category'] = isset($data['show_category']) ? $data['show_category'] : null;
        $this->container['message_category'] = isset($data['message_category']) ? $data['message_category'] : null;
        $this->container['message_category_id'] = isset($data['message_category_id']) ? $data['message_category_id'] : null;
        $this->container['status_change_date'] = isset($data['status_change_date']) ? $data['status_change_date'] : null;
        $this->container['next_try_on'] = isset($data['next_try_on']) ? $data['next_try_on'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['from_email'] = isset($data['from_email']) ? $data['from_email'] : null;
        $this->container['envelope_from'] = isset($data['envelope_from']) ? $data['envelope_from'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['sms_update_required'] = isset($data['sms_update_required']) ? $data['sms_update_required'] : null;
        $this->container['text_message'] = isset($data['text_message']) ? $data['text_message'] : null;
        $this->container['message_sid'] = isset($data['message_sid']) ? $data['message_sid'] : null;
        $this->container['contact_last_error'] = isset($data['contact_last_error']) ? $data['contact_last_error'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_sms'] === null) {
            $invalidProperties[] = "'is_sms' can't be null";
        }
        if ($this->container['msg_id'] === null) {
            $invalidProperties[] = "'msg_id' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['date_sent'] === null) {
            $invalidProperties[] = "'date_sent' can't be null";
        }
        if ($this->container['date_opened'] === null) {
            $invalidProperties[] = "'date_opened' can't be null";
        }
        if ($this->container['date_clicked'] === null) {
            $invalidProperties[] = "'date_clicked' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        if ($this->container['show_category'] === null) {
            $invalidProperties[] = "'show_category' can't be null";
        }
        if ($this->container['message_category'] === null) {
            $invalidProperties[] = "'message_category' can't be null";
        }
        $allowedValues = $this->getMessageCategoryIdAllowableValues();
        if (!in_array($this->container['message_category_id'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'message_category_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status_change_date'] === null) {
            $invalidProperties[] = "'status_change_date' can't be null";
        }
        if ($this->container['next_try_on'] === null) {
            $invalidProperties[] = "'next_try_on' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['from_email'] === null) {
            $invalidProperties[] = "'from_email' can't be null";
        }
        if ($this->container['envelope_from'] === null) {
            $invalidProperties[] = "'envelope_from' can't be null";
        }
        if ($this->container['job_id'] === null) {
            $invalidProperties[] = "'job_id' can't be null";
        }
        if ($this->container['sms_update_required'] === null) {
            $invalidProperties[] = "'sms_update_required' can't be null";
        }
        if ($this->container['text_message'] === null) {
            $invalidProperties[] = "'text_message' can't be null";
        }
        if ($this->container['message_sid'] === null) {
            $invalidProperties[] = "'message_sid' can't be null";
        }
        if ($this->container['contact_last_error'] === null) {
            $invalidProperties[] = "'contact_last_error' can't be null";
        }
        if ($this->container['ip_address'] === null) {
            $invalidProperties[] = "'ip_address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['is_sms'] === null) {
            return false;
        }
        if ($this->container['msg_id'] === null) {
            return false;
        }
        if ($this->container['to'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['channel'] === null) {
            return false;
        }
        if ($this->container['date'] === null) {
            return false;
        }
        if ($this->container['date_sent'] === null) {
            return false;
        }
        if ($this->container['date_opened'] === null) {
            return false;
        }
        if ($this->container['date_clicked'] === null) {
            return false;
        }
        if ($this->container['message'] === null) {
            return false;
        }
        if ($this->container['show_category'] === null) {
            return false;
        }
        if ($this->container['message_category'] === null) {
            return false;
        }
        $allowedValues = $this->getMessageCategoryIdAllowableValues();
        if (!in_array($this->container['message_category_id'], $allowedValues)) {
            return false;
        }
        if ($this->container['status_change_date'] === null) {
            return false;
        }
        if ($this->container['next_try_on'] === null) {
            return false;
        }
        if ($this->container['subject'] === null) {
            return false;
        }
        if ($this->container['from_email'] === null) {
            return false;
        }
        if ($this->container['envelope_from'] === null) {
            return false;
        }
        if ($this->container['job_id'] === null) {
            return false;
        }
        if ($this->container['sms_update_required'] === null) {
            return false;
        }
        if ($this->container['text_message'] === null) {
            return false;
        }
        if ($this->container['message_sid'] === null) {
            return false;
        }
        if ($this->container['contact_last_error'] === null) {
            return false;
        }
        if ($this->container['ip_address'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets is_sms
     *
     * @return bool
     */
    public function getIsSms()
    {
        return $this->container['is_sms'];
    }

    /**
     * Sets is_sms
     *
     * @param bool $is_sms True, if message is SMS. Otherwise, false
     *
     * @return $this
     */
    public function setIsSms($is_sms)
    {
        $this->container['is_sms'] = $is_sms;

        return $this;
    }

    /**
     * Gets msg_id
     *
     * @return string
     */
    public function getMsgId()
    {
        return $this->container['msg_id'];
    }

    /**
     * Sets msg_id
     *
     * @param string $msg_id ID number of selected message.
     *
     * @return $this
     */
    public function setMsgId($msg_id)
    {
        $this->container['msg_id'] = $msg_id;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to Ending date for search in YYYY-MM-DDThh:mm:ss format.
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Name of recipient's status: Submitted, ReadyToSend, WaitingToRetry, Sending, Bounced, Sent, Opened, Clicked, Unsubscribed, AbuseReport
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel Name of selected Channel.
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date Creation date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets date_sent
     *
     * @return string
     */
    public function getDateSent()
    {
        return $this->container['date_sent'];
    }

    /**
     * Sets date_sent
     *
     * @param string $date_sent Date when the email was sent
     *
     * @return $this
     */
    public function setDateSent($date_sent)
    {
        $this->container['date_sent'] = $date_sent;

        return $this;
    }

    /**
     * Gets date_opened
     *
     * @return string
     */
    public function getDateOpened()
    {
        return $this->container['date_opened'];
    }

    /**
     * Sets date_opened
     *
     * @param string $date_opened Date when the email changed the status to 'opened'
     *
     * @return $this
     */
    public function setDateOpened($date_opened)
    {
        $this->container['date_opened'] = $date_opened;

        return $this;
    }

    /**
     * Gets date_clicked
     *
     * @return string
     */
    public function getDateClicked()
    {
        return $this->container['date_clicked'];
    }

    /**
     * Sets date_clicked
     *
     * @param string $date_clicked Date when the email changed the status to 'clicked'
     *
     * @return $this
     */
    public function setDateClicked($date_clicked)
    {
        $this->container['date_clicked'] = $date_clicked;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Content of message, HTML encoded
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets show_category
     *
     * @return bool
     */
    public function getShowCategory()
    {
        return $this->container['show_category'];
    }

    /**
     * Sets show_category
     *
     * @param bool $show_category True, if message category should be shown. Otherwise, false
     *
     * @return $this
     */
    public function setShowCategory($show_category)
    {
        $this->container['show_category'] = $show_category;

        return $this;
    }

    /**
     * Gets message_category
     *
     * @return string
     */
    public function getMessageCategory()
    {
        return $this->container['message_category'];
    }

    /**
     * Sets message_category
     *
     * @param string $message_category Name of message category
     *
     * @return $this
     */
    public function setMessageCategory($message_category)
    {
        $this->container['message_category'] = $message_category;

        return $this;
    }

    /**
     * Gets message_category_id
     *
     * @return string
     */
    public function getMessageCategoryId()
    {
        return $this->container['message_category_id'];
    }

    /**
     * Sets message_category_id
     *
     * @param string $message_category_id ID of message category
     *
     * @return $this
     */
    public function setMessageCategoryId($message_category_id)
    {
        $allowedValues = $this->getMessageCategoryIdAllowableValues();
        if (!is_null($message_category_id) && !in_array($message_category_id, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'message_category_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_category_id'] = $message_category_id;

        return $this;
    }

    /**
     * Gets status_change_date
     *
     * @return string
     */
    public function getStatusChangeDate()
    {
        return $this->container['status_change_date'];
    }

    /**
     * Sets status_change_date
     *
     * @param string $status_change_date Date of last status change.
     *
     * @return $this
     */
    public function setStatusChangeDate($status_change_date)
    {
        $this->container['status_change_date'] = $status_change_date;

        return $this;
    }

    /**
     * Gets next_try_on
     *
     * @return string
     */
    public function getNextTryOn()
    {
        return $this->container['next_try_on'];
    }

    /**
     * Sets next_try_on
     *
     * @param string $next_try_on Date of next try
     *
     * @return $this
     */
    public function setNextTryOn($next_try_on)
    {
        $this->container['next_try_on'] = $next_try_on;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Default subject of email.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets from_email
     *
     * @return string
     */
    public function getFromEmail()
    {
        return $this->container['from_email'];
    }

    /**
     * Sets from_email
     *
     * @param string $from_email Default From: email address.
     *
     * @return $this
     */
    public function setFromEmail($from_email)
    {
        $this->container['from_email'] = $from_email;

        return $this;
    }

    /**
     * Gets envelope_from
     *
     * @return string
     */
    public function getEnvelopeFrom()
    {
        return $this->container['envelope_from'];
    }

    /**
     * Sets envelope_from
     *
     * @param string $envelope_from envelope_from
     *
     * @return $this
     */
    public function setEnvelopeFrom($envelope_from)
    {
        $this->container['envelope_from'] = $envelope_from;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param string $job_id ID of certain mail job
     *
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets sms_update_required
     *
     * @return bool
     */
    public function getSmsUpdateRequired()
    {
        return $this->container['sms_update_required'];
    }

    /**
     * Sets sms_update_required
     *
     * @param bool $sms_update_required True, if message is a SMS and status is not yet confirmed. Otherwise, false
     *
     * @return $this
     */
    public function setSmsUpdateRequired($sms_update_required)
    {
        $this->container['sms_update_required'] = $sms_update_required;

        return $this;
    }

    /**
     * Gets text_message
     *
     * @return string
     */
    public function getTextMessage()
    {
        return $this->container['text_message'];
    }

    /**
     * Sets text_message
     *
     * @param string $text_message Content of message
     *
     * @return $this
     */
    public function setTextMessage($text_message)
    {
        $this->container['text_message'] = $text_message;

        return $this;
    }

    /**
     * Gets message_sid
     *
     * @return string
     */
    public function getMessageSid()
    {
        return $this->container['message_sid'];
    }

    /**
     * Sets message_sid
     *
     * @param string $message_sid Comma separated ID numbers of messages.
     *
     * @return $this
     */
    public function setMessageSid($message_sid)
    {
        $this->container['message_sid'] = $message_sid;

        return $this;
    }

    /**
     * Gets contact_last_error
     *
     * @return string
     */
    public function getContactLastError()
    {
        return $this->container['contact_last_error'];
    }

    /**
     * Sets contact_last_error
     *
     * @param string $contact_last_error Recipient's last bounce error because of which this e-mail was suppressed
     *
     * @return $this
     */
    public function setContactLastError($contact_last_error)
    {
        $this->container['contact_last_error'] = $contact_last_error;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


