<?php
/**
 * AccessToken
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccessToken Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccessToken implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccessToken';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_level' => 'string',
        'name' => 'string',
        'last_use' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_level' => null,
        'name' => 'string',
        'last_use' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_level' => 'AccessLevel',
        'name' => 'Name',
        'last_use' => 'LastUse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_level' => 'setAccessLevel',
        'name' => 'setName',
        'last_use' => 'setLastUse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_level' => 'getAccessLevel',
        'name' => 'getName',
        'last_use' => 'getLastUse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCESS_LEVEL_NONE = 'None';
    const ACCESS_LEVEL_VIEW_ACCOUNT = 'ViewAccount';
    const ACCESS_LEVEL_VIEW_CONTACTS = 'ViewContacts';
    const ACCESS_LEVEL_VIEW_FORMS = 'ViewForms';
    const ACCESS_LEVEL_VIEW_TEMPLATES = 'ViewTemplates';
    const ACCESS_LEVEL_VIEW_CAMPAIGNS = 'ViewCampaigns';
    const ACCESS_LEVEL_VIEW_CHANNELS = 'ViewChannels';
    const ACCESS_LEVEL_VIEW_JOURNEYS = 'ViewJourneys';
    const ACCESS_LEVEL_VIEW_SURVEYS = 'ViewSurveys';
    const ACCESS_LEVEL_VIEW_SETTINGS = 'ViewSettings';
    const ACCESS_LEVEL_VIEW_BILLING = 'ViewBilling';
    const ACCESS_LEVEL_VIEW_SUB_ACCOUNTS = 'ViewSubAccounts';
    const ACCESS_LEVEL_VIEW_USERS = 'ViewUsers';
    const ACCESS_LEVEL_VIEW_FILES = 'ViewFiles';
    const ACCESS_LEVEL_VIEW_REPORTS = 'ViewReports';
    const ACCESS_LEVEL_MODIFY_ACCOUNT = 'ModifyAccount';
    const ACCESS_LEVEL_MODIFY_CONTACTS = 'ModifyContacts';
    const ACCESS_LEVEL_MODIFY_FORMS = 'ModifyForms';
    const ACCESS_LEVEL_MODIFY_TEMPLATES = 'ModifyTemplates';
    const ACCESS_LEVEL_MODIFY_CAMPAIGNS = 'ModifyCampaigns';
    const ACCESS_LEVEL_MODIFY_CHANNELS = 'ModifyChannels';
    const ACCESS_LEVEL_MODIFY_JOURNEYS = 'ModifyJourneys';
    const ACCESS_LEVEL_MODIFY_SURVEYS = 'ModifySurveys';
    const ACCESS_LEVEL_MODIFY_FILES = 'ModifyFiles';
    const ACCESS_LEVEL_EXPORT = 'Export';
    const ACCESS_LEVEL_SEND_SMTP = 'SendSmtp';
    const ACCESS_LEVEL_SEND_SMS = 'SendSMS';
    const ACCESS_LEVEL_MODIFY_SETTINGS = 'ModifySettings';
    const ACCESS_LEVEL_MODIFY_BILLING = 'ModifyBilling';
    const ACCESS_LEVEL_MODIFY_PROFILE = 'ModifyProfile';
    const ACCESS_LEVEL_MODIFY_SUB_ACCOUNTS = 'ModifySubAccounts';
    const ACCESS_LEVEL_MODIFY_USERS = 'ModifyUsers';
    const ACCESS_LEVEL_SECURITY = 'Security';
    const ACCESS_LEVEL_MODIFY_LANGUAGE = 'ModifyLanguage';
    const ACCESS_LEVEL_VIEW_SUPPORT = 'ViewSupport';
    const ACCESS_LEVEL_SEND_HTTP = 'SendHttp';
    const ACCESS_LEVEL_MODIFY2_FA = 'Modify2FA';
    const ACCESS_LEVEL_MODIFY_SUPPORT = 'ModifySupport';
    const ACCESS_LEVEL_VIEW_CUSTOM_FIELDS = 'ViewCustomFields';
    const ACCESS_LEVEL_MODIFY_CUSTOM_FIELDS = 'ModifyCustomFields';
    const ACCESS_LEVEL_MODIFY_WEB_NOTIFICATIONS = 'ModifyWebNotifications';
    const ACCESS_LEVEL_EXTENDED_LOGS = 'ExtendedLogs';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessLevelAllowableValues()
    {
        return [
            self::ACCESS_LEVEL_NONE,
            self::ACCESS_LEVEL_VIEW_ACCOUNT,
            self::ACCESS_LEVEL_VIEW_CONTACTS,
            self::ACCESS_LEVEL_VIEW_FORMS,
            self::ACCESS_LEVEL_VIEW_TEMPLATES,
            self::ACCESS_LEVEL_VIEW_CAMPAIGNS,
            self::ACCESS_LEVEL_VIEW_CHANNELS,
            self::ACCESS_LEVEL_VIEW_JOURNEYS,
            self::ACCESS_LEVEL_VIEW_SURVEYS,
            self::ACCESS_LEVEL_VIEW_SETTINGS,
            self::ACCESS_LEVEL_VIEW_BILLING,
            self::ACCESS_LEVEL_VIEW_SUB_ACCOUNTS,
            self::ACCESS_LEVEL_VIEW_USERS,
            self::ACCESS_LEVEL_VIEW_FILES,
            self::ACCESS_LEVEL_VIEW_REPORTS,
            self::ACCESS_LEVEL_MODIFY_ACCOUNT,
            self::ACCESS_LEVEL_MODIFY_CONTACTS,
            self::ACCESS_LEVEL_MODIFY_FORMS,
            self::ACCESS_LEVEL_MODIFY_TEMPLATES,
            self::ACCESS_LEVEL_MODIFY_CAMPAIGNS,
            self::ACCESS_LEVEL_MODIFY_CHANNELS,
            self::ACCESS_LEVEL_MODIFY_JOURNEYS,
            self::ACCESS_LEVEL_MODIFY_SURVEYS,
            self::ACCESS_LEVEL_MODIFY_FILES,
            self::ACCESS_LEVEL_EXPORT,
            self::ACCESS_LEVEL_SEND_SMTP,
            self::ACCESS_LEVEL_SEND_SMS,
            self::ACCESS_LEVEL_MODIFY_SETTINGS,
            self::ACCESS_LEVEL_MODIFY_BILLING,
            self::ACCESS_LEVEL_MODIFY_PROFILE,
            self::ACCESS_LEVEL_MODIFY_SUB_ACCOUNTS,
            self::ACCESS_LEVEL_MODIFY_USERS,
            self::ACCESS_LEVEL_SECURITY,
            self::ACCESS_LEVEL_MODIFY_LANGUAGE,
            self::ACCESS_LEVEL_VIEW_SUPPORT,
            self::ACCESS_LEVEL_SEND_HTTP,
            self::ACCESS_LEVEL_MODIFY2_FA,
            self::ACCESS_LEVEL_MODIFY_SUPPORT,
            self::ACCESS_LEVEL_VIEW_CUSTOM_FIELDS,
            self::ACCESS_LEVEL_MODIFY_CUSTOM_FIELDS,
            self::ACCESS_LEVEL_MODIFY_WEB_NOTIFICATIONS,
            self::ACCESS_LEVEL_EXTENDED_LOGS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_level'] = isset($data['access_level']) ? $data['access_level'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['last_use'] = isset($data['last_use']) ? $data['last_use'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['access_level'] === null) {
            $invalidProperties[] = "'access_level' can't be null";
        }
        $allowedValues = $this->getAccessLevelAllowableValues();
        if (!in_array($this->container['access_level'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'access_level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['access_level'] === null) {
            return false;
        }
        $allowedValues = $this->getAccessLevelAllowableValues();
        if (!in_array($this->container['access_level'], $allowedValues)) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets access_level
     *
     * @return string
     */
    public function getAccessLevel()
    {
        return $this->container['access_level'];
    }

    /**
     * Sets access_level
     *
     * @param string $access_level Access which this Token grants
     *
     * @return $this
     */
    public function setAccessLevel($access_level)
    {
        $allowedValues = $this->getAccessLevelAllowableValues();
        if (!in_array($access_level, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'access_level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_level'] = $access_level;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Filename
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets last_use
     *
     * @return \DateTime
     */
    public function getLastUse()
    {
        return $this->container['last_use'];
    }

    /**
     * Sets last_use
     *
     * @param \DateTime $last_use When was this AccessToken used last
     *
     * @return $this
     */
    public function setLastUse($last_use)
    {
        $this->container['last_use'] = $last_use;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


