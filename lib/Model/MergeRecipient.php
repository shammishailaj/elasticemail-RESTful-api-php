<?php
/**
 * MergeRecipient
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MergeRecipient Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MergeRecipient implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MergeRecipient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recipient_list' => 'string[]',
        'list_names' => 'string[]',
        'segment_names' => 'string[]',
        'merge_filename' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recipient_list' => 'string',
        'list_names' => 'string',
        'segment_names' => 'string',
        'merge_filename' => 'string'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipient_list' => 'RecipientList',
        'list_names' => 'ListNames',
        'segment_names' => 'SegmentNames',
        'merge_filename' => 'MergeFilename'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recipient_list' => 'setRecipientList',
        'list_names' => 'setListNames',
        'segment_names' => 'setSegmentNames',
        'merge_filename' => 'setMergeFilename'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recipient_list' => 'getRecipientList',
        'list_names' => 'getListNames',
        'segment_names' => 'getSegmentNames',
        'merge_filename' => 'getMergeFilename'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipient_list'] = isset($data['recipient_list']) ? $data['recipient_list'] : null;
        $this->container['list_names'] = isset($data['list_names']) ? $data['list_names'] : null;
        $this->container['segment_names'] = isset($data['segment_names']) ? $data['segment_names'] : null;
        $this->container['merge_filename'] = isset($data['merge_filename']) ? $data['merge_filename'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recipient_list'] === null) {
            $invalidProperties[] = "'recipient_list' can't be null";
        }
        if ($this->container['list_names'] === null) {
            $invalidProperties[] = "'list_names' can't be null";
        }
        if ($this->container['segment_names'] === null) {
            $invalidProperties[] = "'segment_names' can't be null";
        }
        if ($this->container['merge_filename'] === null) {
            $invalidProperties[] = "'merge_filename' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['recipient_list'] === null) {
            return false;
        }
        if ($this->container['list_names'] === null) {
            return false;
        }
        if ($this->container['segment_names'] === null) {
            return false;
        }
        if ($this->container['merge_filename'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets recipient_list
     *
     * @return string[]
     */
    public function getRecipientList()
    {
        return $this->container['recipient_list'];
    }

    /**
     * Sets recipient_list
     *
     * @param string[] $recipient_list recipient_list
     *
     * @return $this
     */
    public function setRecipientList($recipient_list)
    {
        $this->container['recipient_list'] = $recipient_list;

        return $this;
    }

    /**
     * Gets list_names
     *
     * @return string[]
     */
    public function getListNames()
    {
        return $this->container['list_names'];
    }

    /**
     * Sets list_names
     *
     * @param string[] $list_names list_names
     *
     * @return $this
     */
    public function setListNames($list_names)
    {
        $this->container['list_names'] = $list_names;

        return $this;
    }

    /**
     * Gets segment_names
     *
     * @return string[]
     */
    public function getSegmentNames()
    {
        return $this->container['segment_names'];
    }

    /**
     * Sets segment_names
     *
     * @param string[] $segment_names segment_names
     *
     * @return $this
     */
    public function setSegmentNames($segment_names)
    {
        $this->container['segment_names'] = $segment_names;

        return $this;
    }

    /**
     * Gets merge_filename
     *
     * @return string
     */
    public function getMergeFilename()
    {
        return $this->container['merge_filename'];
    }

    /**
     * Sets merge_filename
     *
     * @param string $merge_filename States which attachment is a CSV file containing Recipients.
     *
     * @return $this
     */
    public function setMergeFilename($merge_filename)
    {
        $this->container['merge_filename'] = $merge_filename;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


