<?php
/**
 * ContactStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * elasticemail_Restful_api
 *
 * Send your emails with ElasticEmail API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactStats Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'engaged' => 'int',
        'active' => 'int',
        'complaint' => 'int',
        'unsubscribed' => '\Swagger\Client\Model\ContactUnsubscribeReasonCounts',
        'bounced' => 'int',
        'inactive' => 'int',
        'transactional' => 'int',
        'stale' => 'int',
        'not_confirmed' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'engaged' => 'int64',
        'active' => 'int64',
        'complaint' => 'int64',
        'unsubscribed' => null,
        'bounced' => 'int64',
        'inactive' => 'int64',
        'transactional' => 'int64',
        'stale' => 'int64',
        'not_confirmed' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'engaged' => 'Engaged',
        'active' => 'Active',
        'complaint' => 'Complaint',
        'unsubscribed' => 'Unsubscribed',
        'bounced' => 'Bounced',
        'inactive' => 'Inactive',
        'transactional' => 'Transactional',
        'stale' => 'Stale',
        'not_confirmed' => 'NotConfirmed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'engaged' => 'setEngaged',
        'active' => 'setActive',
        'complaint' => 'setComplaint',
        'unsubscribed' => 'setUnsubscribed',
        'bounced' => 'setBounced',
        'inactive' => 'setInactive',
        'transactional' => 'setTransactional',
        'stale' => 'setStale',
        'not_confirmed' => 'setNotConfirmed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'engaged' => 'getEngaged',
        'active' => 'getActive',
        'complaint' => 'getComplaint',
        'unsubscribed' => 'getUnsubscribed',
        'bounced' => 'getBounced',
        'inactive' => 'getInactive',
        'transactional' => 'getTransactional',
        'stale' => 'getStale',
        'not_confirmed' => 'getNotConfirmed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['engaged'] = isset($data['engaged']) ? $data['engaged'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['complaint'] = isset($data['complaint']) ? $data['complaint'] : null;
        $this->container['unsubscribed'] = isset($data['unsubscribed']) ? $data['unsubscribed'] : null;
        $this->container['bounced'] = isset($data['bounced']) ? $data['bounced'] : null;
        $this->container['inactive'] = isset($data['inactive']) ? $data['inactive'] : null;
        $this->container['transactional'] = isset($data['transactional']) ? $data['transactional'] : null;
        $this->container['stale'] = isset($data['stale']) ? $data['stale'] : null;
        $this->container['not_confirmed'] = isset($data['not_confirmed']) ? $data['not_confirmed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['engaged'] === null) {
            $invalidProperties[] = "'engaged' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['complaint'] === null) {
            $invalidProperties[] = "'complaint' can't be null";
        }
        if ($this->container['unsubscribed'] === null) {
            $invalidProperties[] = "'unsubscribed' can't be null";
        }
        if ($this->container['bounced'] === null) {
            $invalidProperties[] = "'bounced' can't be null";
        }
        if ($this->container['inactive'] === null) {
            $invalidProperties[] = "'inactive' can't be null";
        }
        if ($this->container['transactional'] === null) {
            $invalidProperties[] = "'transactional' can't be null";
        }
        if ($this->container['stale'] === null) {
            $invalidProperties[] = "'stale' can't be null";
        }
        if ($this->container['not_confirmed'] === null) {
            $invalidProperties[] = "'not_confirmed' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['engaged'] === null) {
            return false;
        }
        if ($this->container['active'] === null) {
            return false;
        }
        if ($this->container['complaint'] === null) {
            return false;
        }
        if ($this->container['unsubscribed'] === null) {
            return false;
        }
        if ($this->container['bounced'] === null) {
            return false;
        }
        if ($this->container['inactive'] === null) {
            return false;
        }
        if ($this->container['transactional'] === null) {
            return false;
        }
        if ($this->container['stale'] === null) {
            return false;
        }
        if ($this->container['not_confirmed'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets engaged
     *
     * @return int
     */
    public function getEngaged()
    {
        return $this->container['engaged'];
    }

    /**
     * Sets engaged
     *
     * @param int $engaged Number of engaged contacts
     *
     * @return $this
     */
    public function setEngaged($engaged)
    {
        $this->container['engaged'] = $engaged;

        return $this;
    }

    /**
     * Gets active
     *
     * @return int
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param int $active Number of active contacts
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets complaint
     *
     * @return int
     */
    public function getComplaint()
    {
        return $this->container['complaint'];
    }

    /**
     * Sets complaint
     *
     * @param int $complaint Number of complaint messages
     *
     * @return $this
     */
    public function setComplaint($complaint)
    {
        $this->container['complaint'] = $complaint;

        return $this;
    }

    /**
     * Gets unsubscribed
     *
     * @return \Swagger\Client\Model\ContactUnsubscribeReasonCounts
     */
    public function getUnsubscribed()
    {
        return $this->container['unsubscribed'];
    }

    /**
     * Sets unsubscribed
     *
     * @param \Swagger\Client\Model\ContactUnsubscribeReasonCounts $unsubscribed unsubscribed
     *
     * @return $this
     */
    public function setUnsubscribed($unsubscribed)
    {
        $this->container['unsubscribed'] = $unsubscribed;

        return $this;
    }

    /**
     * Gets bounced
     *
     * @return int
     */
    public function getBounced()
    {
        return $this->container['bounced'];
    }

    /**
     * Sets bounced
     *
     * @param int $bounced Number of bounced messages
     *
     * @return $this
     */
    public function setBounced($bounced)
    {
        $this->container['bounced'] = $bounced;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return int
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param int $inactive Number of inactive contacts
     *
     * @return $this
     */
    public function setInactive($inactive)
    {
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets transactional
     *
     * @return int
     */
    public function getTransactional()
    {
        return $this->container['transactional'];
    }

    /**
     * Sets transactional
     *
     * @param int $transactional Number of transactional contacts
     *
     * @return $this
     */
    public function setTransactional($transactional)
    {
        $this->container['transactional'] = $transactional;

        return $this;
    }

    /**
     * Gets stale
     *
     * @return int
     */
    public function getStale()
    {
        return $this->container['stale'];
    }

    /**
     * Sets stale
     *
     * @param int $stale stale
     *
     * @return $this
     */
    public function setStale($stale)
    {
        $this->container['stale'] = $stale;

        return $this;
    }

    /**
     * Gets not_confirmed
     *
     * @return int
     */
    public function getNotConfirmed()
    {
        return $this->container['not_confirmed'];
    }

    /**
     * Sets not_confirmed
     *
     * @param int $not_confirmed not_confirmed
     *
     * @return $this
     */
    public function setNotConfirmed($not_confirmed)
    {
        $this->container['not_confirmed'] = $not_confirmed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


